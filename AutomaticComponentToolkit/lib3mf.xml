<?xml version="1.0" encoding="UTF-8"?>
<component xmlns="http://schemas.autodesk.com/netfabb/automaticcomponenttoolkit/2018" libraryname="the 3MF Library" namespace="Lib3MF" copyright="3MF Consortium (Original Author)" year="2019" basename="lib3mf" version="2.3.2">


	<license>
		<line value="All rights reserved."/>
		<line value=""/>
		<line value="Redistribution and use in source and binary forms, with or without modification,"/>
		<line value="are permitted provided that the following conditions are met:"/>
		<line value=""/>
		<line value="1. Redistributions of source code must retain the above copyright notice, this"/>
		<line value="list of conditions and the following disclaimer."/>
		<line value="2. Redistributions in binary form must reproduce the above copyright notice,"/>
		<line value="this list of conditions and the following disclaimer in the documentation"/>
		<line value="and/or other materials provided with the distribution."/>
		<line value=""/>
		<line value="THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND"/>
		<line value="ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED"/>
		<line value="WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE"/>
		<line value="DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR"/>
		<line value="ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES"/>
		<line value="(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;"/>
		<line value="LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"/>
		<line value="ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT"/>
		<line value="(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS"/>
		<line value="SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."/>
	</license>

	<bindings>
		<binding language="C" indentation="tabs"/>
		<binding language="CDynamic" indentation="tabs"/>
		<binding language="Cpp" indentation="tabs"/>
		<binding language="CppDynamic" indentation="tabs"/>
		<binding language="Pascal" indentation="tabs"/>
		<binding language="Python" indentation="tabs"/>
		<binding language="Node" indentation="tabs"/>
		<binding language="Go" indentation="tabs"/>
		<binding language="CSharp" indentation="tabs"/>
	</bindings>
	<implementations>
		<implementation language="Cpp" indentation="tabs"/>
	</implementations>

	<errors>
		<error name="NOTIMPLEMENTED" code="1" description="functionality not implemented"/>
		<error name="INVALIDPARAM" code="2" description="an invalid parameter was passed"/>
		<error name="INVALIDCAST" code="3" description="a type cast failed"/>
		<error name="BUFFERTOOSMALL" code="4" description="a provided buffer is too small"/>
		<error name="GENERICEXCEPTION" code="5" description="a generic exception occurred"/>
		<error name="COULDNOTLOADLIBRARY" code="6" description="the library could not be loaded"/>
		<error name="COULDNOTFINDLIBRARYEXPORT" code="7" description="a required exported symbol could not be found in the library"/>
		<error name="INCOMPATIBLEBINARYVERSION" code="8" description="the version of the binary interface does not match the bindings interface"/>
		<error name="CALCULATIONABORTED" code="10" description="a calculation has been aborted"/>
		<error name="SHOULDNOTBECALLED" code="11" description="functionality should not be called"/>
		<error name="READERCLASSUNKNOWN" code="100" description="the queried reader class is unknown"/>
		<error name="WRITERCLASSUNKNOWN" code="101" description="the queried writer class is unknown"/>
		<error name="ITERATORINVALIDINDEX" code="102" description="the current index of an iterator is invalid"/>
		<error name="INVALIDMODELRESOURCE" code="103" description="no Model Resource has been given"/>
		<error name="RESOURCENOTFOUND" code="104" description="Resource not found"/>
		<error name="INVALIDMODEL" code="105" description="A model is invalid"/>
		<error name="INVALIDOBJECT" code="106" description="An object is invalid"/>
		<error name="INVALIDMESHOBJECT" code="107" description="A mesh object is invalid"/>
		<error name="INVALIDCOMPONENTSOBJECT" code="108" description="A components object is invalid"/>
		<error name="INVALIDCOMPONENT" code="109" description="A component is invalid"/>
		<error name="INVALIDBUILDITEM" code="110" description="A build item is invalid"/>
		<error name="INVALIDBASEMATERIALGROUP" code="111" description="A basematerialgroup is invalid"/>
		<error name="INVALIDSLICESTACKRESOURCE" code="112" description="A slicestack resource is invalid"/>
		<error name="INVALIDTEXTURERESOURCE" code="113" description="A texture resource is invalid"/>
		<error name="INVALIDCOLORGROUP" code="114" description="A color group resource is invalid"/>
		<error name="INVALIDTEXTURE2DGROUP" code="115" description="A texture2d group resource is invalid"/>
		<error name="INVALIDCOMPOSITEMATERIALS" code="116" description="A composite materials resource is invalid"/>
		<error name="INVALIDMULTIPROPERTYGROUP" code="117" description="A MultiPropertyGroup resource is invalid"/>
		<error name="INVALIDRESOURCEINDEX" code="120" description="A resource index is invalid"/>
		<error name="ATTACHMENTNOTFOUND" code="121" description="Attachment not found"/>
		<error name="FORBIDDENCYCLICREFERENCE" code="130" description="A component references one of its ancestors"/>
		<error name="INVALIDATTACHMENTSTREAM" code="131" description="An attachment stream is invalid"/>
		<error name="INVALIDPROPERTYCOUNT" code="132" description="Invalid property count."/>
		<error name="UNKOWNPROGRESSIDENTIFIER" code="140" description="A progress identifier is unknown"/>
		<error name="ELEMENTCOUNTEXCEEDSLIMIT" code="141" description="An element buffer exceeds its spec limit"/>
		<error name="INVALIDRESOURCE" code="142" description="A resource is invalid"/>
		<error name="INVALIDNODEINDEX" code="143" description="Invalid node index"/>
		<error name="INVALIDATTRIBUTEINDEX" code="144" description="Invalid attribute index"/>
		<error name="DUPLICATECUSTOMDATA" code="145" description="Duplicate custom data"/>
		<error name="CUSTOMDATANOTFOUND" code="146" description="Custom data not found"/>

		<error name="BEAMLATTICE_INVALID_OBJECTTYPE" code="2000" description="This object type is not valid for beamlattices"/>		
		<error name="INVALIDKEYSTORE" code="3000" description="The keystore object is invalid"/>
		<error name="INVALIDKEYSTORECONSUMER" code="3001" description="The consumer keystore object is invalid"/>
		<error name="KEYSTORECONSUMERNOTFOUND" code="3002" description="A consumer has not been found"/>
		<error name="KEYSTORERESOURCEDATANOTFOUND" code="3003" description="A resource data has not been found"/>
		<error name="SECURECONTEXTNOTREGISTERED" code="3004" description="A Key or Conentent encryption callback has not been registered"/>
		<error name="INVALIDKEYSIZE" code="3005" description="The key size is invalid"/>

		<error name="TOOLPATH_NOTWRITINGHEADER" code="4000" description="Not in toolpath header writing mode" />
		<error name="TOOLPATH_NOTWRITINGDATA" code="4001" description="Not in toolpath data writing mode" />
		<error name="TOOLPATH_DATAHASBEENWRITTEN" code="4002" description="Toolpath has already been written out" />
		<error name="TOOLPATH_INVALIDPOINTCOUNT" code="4003" description="Toolpath has an invalid number of points" />
		<error name="TOOLPATH_ATTRIBUTEALREADYDEFINED" code="4004" description="Toolpath attribute already defined" />
		<error name="TOOLPATH_INVALIDATTRIBUTETYPE" code="4005" description="Toolpath attribute is of invalid type" />
		
		<error name="EMPTYNAMESPACEPREFIX" code="4006" description="Empty namespace prefix."/>
		<error name="EMPTYNAMESPACE" code="4007" description="Empty namespace."/>		
		<error name="INVALIDNAMESPACEPREFIX" code="4008" description="Invalid namespace prefix."/>
		<error name="WRITERDOESNOTSUPPORTNAMESPACES" code="4009" description="Writer does not support namespaces."/>
		
		
	</errors>

	<enum name="PropertyType">
		<option name="NoPropertyType" value="0"/>
		<option name="BaseMaterial" value="1"/>
		<option name="TexCoord" value="2"/>
		<option name="Colors" value="3"/>
		<option name="Composite" value="4"/>
		<option name="Multi" value="5"/>
	</enum>

	<enum name="SlicesMeshResolution">
		<option name="Fullres" value="0"/>
		<option name="Lowres" value="1"/>
	</enum>
	
	<enum name="PersistentReaderSourceType">
		<option name="Unknown" value="0"/>
		<option name="FileOnDisk" value="1"/>
		<option name="MemoryBuffer" value="2"/>
		<option name="Callback" value="3"/>
	</enum>
	

	<enum name="ModelUnit">
		<option name="MicroMeter" value="0"/>
		<option name="MilliMeter" value="1"/>
		<option name="CentiMeter" value="2"/>
		<option name="Inch" value="3"/>
		<option name="Foot" value="4"/>	
		<option name="Meter" value="5"/>
	</enum>

	<enum name="ObjectType">	
		<option name="Other" value="0"/>
		<option name="Model" value="1"/>
		<option name="Support" value="2"/>
		<option name="SolidSupport" value="3"/>
	</enum>

	<enum name="TextureType">	
		<option name="Unknown" value="0"/>
		<option name="PNG" value="1"/>
		<option name="JPEG" value="2"/>
	</enum>

	<enum name="TextureTileStyle">	
		<option name="Wrap" value="0"/>
		<option name="Mirror" value="1"/>
		<option name="Clamp" value="2"/>
		<option name="NoTileStyle" value="3"/>
	</enum>

	<enum name="TextureFilter">	
		<option name="Auto" value="0"/>
		<option name="Linear" value="1"/>
		<option name="Nearest" value="2"/>
	</enum>

	<enum name="BeamLatticeCapMode">	
		<option name="Sphere" value="0"/>
		<option name="HemiSphere" value="1"/>
		<option name="Butt" value="2"/>
	</enum>

	<enum name="BeamLatticeClipMode">
		<option name="NoClipMode" value="0"/>
		<option name="Inside" value="1"/>
		<option name="Outside" value="2"/>
	</enum>

	<enum name="BeamLatticeBallMode">
		<option name="None" value="0"/>
		<option name="Mixed" value="1"/>
		<option name="All" value="2"/>
	</enum>
	
	<enum name="BinaryStreamPredictionType">
		<option name="NoPrediction" value="0"/>
		<option name="DeltaPrediction" value="1"/>
	</enum>
	

	<enum name="ProgressIdentifier">
		<option name="QUERYCANCELED" value="0"/>
		<option name="DONE" value="1"/>
		<option name="CLEANUP" value="2"/>
		<option name="READSTREAM" value="3"/>
		<option name="EXTRACTOPCPACKAGE" value="4"/>
		<option name="READNONROOTMODELS" value="5"/>
		<option name="READROOTMODEL" value="6"/>
		<option name="READRESOURCES" value="7"/>
		<option name="READMESH" value="8"/>
		<option name="READSLICES" value="9"/>
		<option name="READBUILD" value="10"/>
		<option name="READCUSTOMATTACHMENT" value="11"/>
		<option name="READTEXTURETACHMENTS" value="12"/>
		<option name="CREATEOPCPACKAGE" value="13"/>
		<option name="WRITEMODELSTOSTREAM" value="14"/>
		<option name="WRITEROOTMODEL" value="15"/>
		<option name="WRITENONROOTMODELS" value="16"/>
		<option name="WRITEATTACHMENTS" value="17"/>
		<option name="WRITECONTENTTYPES" value="18"/>
		<option name="WRITENOBJECTS" value="19"/>
		<option name="WRITENODES" value="20"/>
		<option name="WRITETRIANGLES" value="21"/>
		<option name="WRITESLICES" value="22"/>
		<option name="WRITEKEYSTORE" value="23"/>
	</enum>

	<enum name="BlendMethod">
		<option name="NoBlendMethod" value="0"/>
		<option name="Mix" value="1"/>
		<option name="Multiply" value="2"/>
	</enum>
	
	<enum name="ToolpathSegmentType">
		<option name="Unknown" value="0" />
		<option name="Hatch" value="1" />
		<option name="Loop" value="2" />
		<option name="Polyline" value="3" />
	</enum>

	<enum name="ToolpathAttributeType">
		<option name="Unknown" value="0" />
		<option name="Integer" value="1" />
		<option name="Double" value="2" />
	</enum>

	<struct name="Triangle">
		<member name="Indices" type="uint32" rows="3"/>
	</struct>

	<struct name="TriangleProperties">
		<member name="ResourceID" type="uint32"/>
		<member name="PropertyIDs" type="uint32" rows="3"/>
	</struct>

	<struct name="Position">
		<member name="Coordinates" type="single" rows="3"/>
	</struct>

	<struct name="Position2D">
		<member name="Coordinates" type="single" rows="2"/>
	</struct>

	<struct name="CompositeConstituent">
		<member name="PropertyID" type="uint32"/>
		<member name="MixingRatio" type="double"/>
	</struct>

	<struct name="MultiPropertyLayer">
		<member name="ResourceID" type="uint32"/>
		<member name="TheBlendMethod" type="enum" class="BlendMethod"/>
	</struct>

	<struct name="Tex2Coord">
		<member name="U" type="double"/>
		<member name="V" type="double"/>
	</struct>

	<struct name="Transform">
		<member name="Fields" type="single" columns="4" rows="3"/>
	</struct>

	<struct name="Box">
		<member name="MinCoordinate" type="single" rows="3"/>
		<member name="MaxCoordinate" type="single" rows="3"/>
	</struct>

	<struct name="Color">
		<member name="Red" type="uint8"/>
		<member name="Green" type="uint8"/>
		<member name="Blue" type="uint8"/>
		<member name="Alpha" type="uint8"/>
	</struct>

	<struct name="Beam">
		<member name="Indices" type="uint32" rows="2"/>
		<member name="Radii" type="double" rows="2"/>
		<member name="CapModes" type="enum" class="BeamLatticeCapMode" rows="2"/>
	</struct>

	<struct name="Ball">
		<member name="Index" type="uint32"/>
		<member name="Radius" type="double"/>
	</struct>

	<functiontype name="ProgressCallback" description="A callback function">
		<param name="Abort" type="bool" pass="return" description="Returns whether the calculation should be aborted"/>
		<param name="ProgressValue" type="double" pass="in" description="The value of the progress function: values in the interval [0,1] are progress; &lt; mean no progress update"/>
		<param name="ProgressIdentifier" type="enum" class="ProgressIdentifier" pass="in" description="An identifier of progress"/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
	</functiontype>

	<functiontype name="WriteCallback" description="Callback to call for writing a data chunk">
		<param name="ByteData" type="uint64" pass="in" description="Pointer to the data to be written"/>
		<param name="NumBytes" type="uint64" pass="in" description="Number of bytes to write"/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
	</functiontype>

	<functiontype name="ReadCallback" description="Callback to call for reading a data chunk">
		<param name="ByteData" type="uint64" pass="in" description="Pointer to a buffer to read data into"/>
		<param name="NumBytes" type="uint64" pass="in" description="Number of bytes to read"/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
	</functiontype>

	<functiontype name="SeekCallback" description="Callback to call for seeking in the stream">
		<param name="Position" type="uint64" pass="in" description="Position in the stream to move to"/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
	</functiontype>
	
	<functiontype name="RandomNumberCallback" description="Callback to generate random numbers">
		<param name="ByteData" type="uint64" pass="in" description="Pointer to a buffer to read data into"/>
		<param name="NumBytes" type="uint64" pass="in" description="Size of available bytes in the buffer" />
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		<param name="BytesWritten" type="uint64" pass="return" description="Number of bytes generated when succeed. 0 or less if failed." />
	</functiontype>

	<class name="Base">
		<method name="ClassTypeId" description="Get Class Type Id">
			<param name="ClassTypeId" type="uint64" pass="return" description="Class type as a 64 bits integer" />
		</method>
	</class>


	<class name="BinaryStream" parent="Base">  
		<method name="GetBinaryPath" description = "Retrieves an binary streams package path for the binary data.">
			<param name="Path" type="string" pass="return" description="binary streams package binary path." />
		</method>

		<method name="GetIndexPath" description = "Retrieves an binary streams package path for the index data.">
			<param name="Path" type="string" pass="return" description="binary streams package index path." />
		</method>
		
		<method name="GetUUID" description = "Retrieves an binary streams uuid.">
			<param name="UUID" type="string" pass="return" description="binary streams uuid" />
		</method>

		<method name="DisableDiscretizedArrayCompression" description="Sets the float compression mode to raw. All subsequent writes will adhere to this mode.">
		</method>
		
		<method name="EnableDiscretizedArrayCompression" description="Sets the compression mode to a quantized array. All subsequent writes will adhere to this mode.">
			<param name="Units" type="double" pass="in" description="Unit factor to use for quantization." />
			<param name="PredictionType" type="enum" class="BinaryStreamPredictionType" pass="in" description="Prediction type to use for arrays." />			
		</method>
		
		<method name="EnableLZMA" description="Enables LZMA mode.">
			<param name="LZMALevel" type="uint32" pass="in" description="LZMA Level (0-9)" />
		</method>
		
		<method name="DisableLZMA" description="Disables LZMA mode.">
		</method>
		
	</class>


	<class name="Writer" parent="Base">
		<method name="WriteToFile" description="Writes out the model as file. The file type is specified by the Model Writer class.">
			<param name="Filename" type="string" pass="in" description="Filename to write into"/>
		</method>
		<method name="GetStreamSize" description="Retrieves the size of the full 3MF file stream.">
			<param name="StreamSize" type="uint64" pass="return" description="the stream size"/>
		</method>
		<method name="WriteToBuffer" description="Writes out the 3MF file into a memory buffer">
			<param name="Buffer" type="basicarray" class="uint8" pass="out" description="buffer to write into"/>
		</method>
		<method name="WriteToCallback" description="Writes out the model and passes the data to a provided callback function. The file type is specified by the Model Writer class.">
			<param name="TheWriteCallback" type="functiontype" class="WriteCallback" pass="in" description="Callback to call for writing a data chunk"/>
			<param name="TheSeekCallback" type="functiontype" class="SeekCallback" pass="in" description="Callback to call for seeking in the stream"/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		<method name="SetProgressCallback" description="Set the progress callback for calls to this writer">
			<param name="ProgressCallback" type="functiontype" class="ProgressCallback" pass="in" description="pointer to the callback function."/>
			<param name="UserData" type="pointer" pass="in" description="pointer to arbitrary user data that is passed without modification to the callback."/>
		</method>
		<method name="GetDecimalPrecision" description="Returns the number of digits after the decimal point to be written in each vertex coordinate-value.">
			<param name="DecimalPrecision" type="uint32" pass="return" description="The number of digits to be written in each vertex coordinate-value after the decimal point."/>
		</method>
		<method name="SetDecimalPrecision" description="Sets the number of digits after the decimal point to be written in each vertex coordinate-value.">
			<param name="DecimalPrecision" type="uint32" pass="in" description="The number of digits to be written in each vertex coordinate-value after the decimal point."/>
		</method>
		<method name="SetStrictModeActive" description="Activates (deactivates) the strict mode of the reader.">
			<param name="StrictModeActive" type="bool" pass="in" description="flag whether strict mode is active or not."/>
		</method>
		<method name="GetStrictModeActive" description="Queries whether the strict mode of the reader is active or not">
			<param name="StrictModeActive" type="bool" pass="return" description="returns flag whether strict mode is active or not."/>
		</method>
		<method name="GetWarning" description="Returns Warning and Error Information of the read process">
			<param name="Index" type="uint32" pass="in" description="Index of the Warning. Valid values are 0 to WarningCount - 1"/>
			<param name="ErrorCode" type="uint32" pass="out" description="filled with the error code of the warning"/>
			<param name="Warning" type="string" pass="return" description="the message of the warning"/>
		</method>
		<method name="GetWarningCount" description="Returns Warning and Error Count of the read process">
			<param name="Count" type="uint32" pass="return" description="filled with the count of the occurred warnings."/>
		</method>		
		<method name="AddKeyWrappingCallback" description="Registers a callback to deal with data key encryption/decryption from keystore">
			<param name="ConsumerID" type="string" pass="in" description="The ConsumerID to register for"/>
			<param name="TheCallback" type="functiontype" class="KeyWrappingCallback" pass="in" description="The callback to be callede for wrapping and encryption key" />
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		<method name="SetContentEncryptionCallback" description="Registers a callback to deal with encryption of content">
			<param name="TheCallback" type="functiontype" class="ContentEncryptionCallback" pass="in" description="The callback used to encrypt content"/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		
		<method name="CreateBinaryStream" description = "Creates a binary stream object. Only applicable for 3MF Writers.">
			<param name="IndexPath" type="string" pass="in" description="Package path to write the index into" />
			<param name="BinaryPath" type="string" pass="in" description="Package path to write raw binary data into" />
			<param name="BinaryStream" type="class" class="BinaryStream" pass="return" description="Returns a package path." />
		</method>
		
		<method name="AssignBinaryStream" description="Sets a binary stream for an object. Currently supported objects are Meshes and Toolpath layers.">
			<param name="Instance" type="class" class="Base" pass="in" description="Object instance to assign Binary stream to." />
			<param name="BinaryStream" type="class" class="BinaryStream" pass="in" description="Binary stream object to use for this layer." />
		</method>
		
		<method name="RegisterCustomNamespace" description = "Registers a custom 3MF Namespace. Fails if Prefix is already registered.">
			<param name="Prefix" type="string" pass="in" description="Prefix to be used. MUST NOT be empty. MUST be alphanumeric, not starting with a number" />
			<param name="NameSpace" type="string" pass="in" description="Namespace to be used. MUST NOT be empty. MUST be alphanumeric, not starting with a number" />
		</method>
	</class>
	

	<class name="PersistentReaderSource" description="Reader class to load an OPC package from a persistent source (without unpacking everything in memory).">
			
		<method name="GetSourceType" description="Retrieves the type of source data.">
			<param name="SourceType" type="enum" class="PersistentReaderSourceType" pass="return" description="Reader Source Type"/>
		</method>
		
		<method name="InvalidateSourceData" description="Invalidates the reader source. Every subsequent read on this data will fail.">
		</method>
	
		<method name="SourceDataIsValid" description="Checks if the source data is valid. Any read on an invalid source object will fail.">
			<param name="DataIsValid" type="bool" pass="return" description="The source data is valid."/>
		</method>
		
	</class>


	<class name="Reader" parent="Base">
	
		<method name="ReadFromPersistentSource" description="Reads a model from a persistent source object. The object will be referenced until the Model is destroyed or cleared.">
			<param name="Source" type="class" class="PersistentReaderSource" pass="in" description="Source object to read from"/>				
		</method>
	
		<method name="ReadFromFile" description="Reads a model from a file. The file type is specified by the Model Reader class">
			<param name="Filename" type="string" pass="in" description="Filename to read from"/>				
		</method>
		<method name="ReadFromBuffer" description="Reads a model from a memory buffer.">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Buffer to read from"/>				
		</method>
		<method name="ReadFromCallback" description="Reads a model and from the data provided by a callback function">
			<param name="TheReadCallback" type="functiontype" class="ReadCallback" pass="in" description="Callback to call for reading a data chunk"/>
			<param name="StreamSize" type="uint64" pass="in" description="number of bytes the callback returns"/>
			<param name="TheSeekCallback" type="functiontype" class="SeekCallback" pass="in" description="Callback to call for seeking in the stream."/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		<method name="SetProgressCallback" description="Set the progress callback for calls to this writer">
			<param name="ProgressCallback" type="functiontype" class="ProgressCallback" pass="in" description="pointer to the callback function."/>
			<param name="UserData" type="pointer" pass="in" description="pointer to arbitrary user data that is passed without modification to the callback."/>
		</method>
		<method name="AddRelationToRead" description="Adds a relationship type which shall be read as attachment in memory while loading">
			<param name="RelationShipType" type="string" pass="in" description="String of the relationship type"/>				
		</method>
		<method name="RemoveRelationToRead" description="Removes a relationship type which shall be read as attachment in memory while loading">
			<param name="RelationShipType" type="string" pass="in" description="String of the relationship type"/>				
		</method>
		<method name="SetStrictModeActive" description="Activates (deactivates) the strict mode of the reader.">
			<param name="StrictModeActive" type="bool" pass="in" description="flag whether strict mode is active or not."/>
		</method>
		<method name="GetStrictModeActive" description="Queries whether the strict mode of the reader is active or not">
			<param name="StrictModeActive" type="bool" pass="return" description="returns flag whether strict mode is active or not."/>
		</method>
		<method name="GetWarning" description="Returns Warning and Error Information of the read process">
			<param name="Index" type="uint32" pass="in" description="Index of the Warning. Valid values are 0 to WarningCount - 1"/>
			<param name="ErrorCode" type="uint32" pass="out" description="filled with the error code of the warning"/>
			<param name="Warning" type="string" pass="return" description="the message of the warning"/>
		</method>
		<method name="GetWarningCount" description="Returns Warning and Error Count of the read process">
			<param name="Count" type="uint32" pass="return" description="filled with the count of the occurred warnings."/>
		</method>
		<method name="AddKeyWrappingCallback" description="Registers a callback to deal with key wrapping mechanism from keystore">
			<param name="ConsumerID" type="string" pass="in" description="The ConsumerID to register for"/>
			<param name="TheCallback" type="functiontype" class="KeyWrappingCallback" pass="in" description="The callback used to decrypt data key"/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		<method name="SetContentEncryptionCallback" description="Registers a callback to deal with encryption of content">
			<param name="TheCallback" type="functiontype" class="ContentEncryptionCallback" pass="in" description="The callback used to encrypt content"/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
  </class>

	<class name="PackagePart" parent="Base">
		<method name="GetPath" description="Returns the absolute path of this PackagePart.">
			<param name="Path" type="string" pass="return" description="Returns the absolute path of this PackagePart"/>
		</method>
		<method name="SetPath" description="Sets the absolute path of this PackagePart.">
			<param name="Path" type="string" pass="in" description="Sets the absolute path of this PackagePart."/>
		</method>
	</class>
	
	<class name="Resource" parent="Base">
		<method name="GetResourceID" description="Retrieves the unique id of this resource within a package. This function will be removed in a later release in favor of GetUniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="return" description="Retrieves the unique id of this resource within a package."/>
		</method>
		<method name="GetUniqueResourceID" description="Retrieves the unique id of this resource within a package.">
			<param name="UniqueResourceID" type="uint32" pass="return" description="Retrieves the unique id of this resource within a package."/>
		</method>
		<method name="PackagePart" description="Returns the PackagePart within which this resource resides">
			<param name="PackagePart" type="class" class="PackagePart" pass="return" description="the PackagePart within which this resource resides."/>
		</method>
		<method name="SetPackagePart" description="Sets the new PackagePart within which this resource resides">
			<param name="PackagePart" type="class" class="PackagePart" pass="in" description="the new PackagePart within which this resource resides."/>
		</method>
		<method name="GetModelResourceID" description="Retrieves the id of this resource within a model.">
			<param name="ModelResourceId" type="uint32" pass="return" description="Retrieves the id of this resource within a model."/>
		</method>
	</class>

	<class name="ResourceIterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next resource in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next resource in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous resource in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous resource in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the resource the iterator points at.">
			<param name="Resource" type="handle" class="Resource" pass="return" description="returns the resource instance."/>
		</method>
		<method name="Clone" description="Creates a new resource iterator with the same resource list.">
			<param name="OutResourceIterator" type="handle" class="ResourceIterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of resoucres the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of resoucres the iterator captures."/>
		</method>
	</class>


	<class name="CustomXMLAttribute" parent="Base" description="An custom XML attribute of a DOM Tree.">
		
		<method name="GetName" description="Retrieves name of the attribute.">
			<param name="Name" type="string" pass="return" description="returns the name of the attribute." />
		</method>
				
		<method name="GetValue" description="Retrieves value of the attribute as string.">
			<param name="Value" type="string" pass="return" description="returns the value of the attribute." />
		</method>

		<method name="IsValidInteger" description="Checks if the value is a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid integer." />
		</method>

		<method name="GetIntegerValue" description="Returns the value as integer. Fails if the value is not a valid integer in the given range.">
			<param name="MinValue" type="int64" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="int64" pass="in" description="Maximum allowed value" />
			<param name="Value" type="int64" pass="return" description="returns the value." />
		</method>

		<method name="IsValidDouble" description="Checks if the value is a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid double." />
		</method>

		<method name="GetDoubleValue" description="Returns the value as double. Fails if the value is not a valid double in the given range.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="double" pass="return" description="returns the value ." />
		</method>
		
		<method name="IsValidBool" description="Checks if the value is a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="IsValid" type="bool" pass="return" description="returns if the value is a valid bool." />
		</method>

		<method name="GetBoolValue" description="Returns the value as bool. Fails if the value is not a valid boolean value, meaning an integer or true or false as string. The value will be trimmed and any character will be converted to lowercase.">
			<param name="MinValue" type="double" pass="in" description="Minimum allowed value" />
			<param name="MaxValue" type="double" pass="in" description="Maximum allowed value" />
			<param name="Value" type="bool" pass="return" description="returns the value ." />
		</method>

		<method name="SetValue" description="Sets the value of the attribute as string.">
			<param name="Value" type="string" pass="in" description="new value of the attribute." />
		</method>
		
		<method name="SetIntegerValue" description="Sets the value of the attribute as integer.">
			<param name="Value" type="int64" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetDoubleValue" description="Sets the value of the attribute as double.">
			<param name="Value" type="double" pass="in" description="new value of the attribute." />
		</method>

		<method name="SetBoolValue" description="Sets the value of the attribute as bool.">
			<param name="Value" type="bool" pass="in" description="new value of the attribute." />
		</method>

		<method name="Remove" description="Removes the attribute from its parent node. All subsequent calls to the class will fail.">
		</method>
		
	</class>


	<class name="CustomXMLNode" parent="Base" description="A custom XML attribute of a DOM tree.">

		<method name="GetName" description="Retrieves name of the node.">
			<param name="Name" type="string" pass="return" description="returns the name of the node." />
		</method>
				
		<method name="GetNameSpace" description="Retrieves namespace of the node.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the node." />
		</method>

		<method name="GetAttributeCount" description="Returns number of attributes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of attributes." />
		</method>
				
		<method name="GetAttribute" description="Returns attribute instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to return (0-based)." />
			<param name="AttributeInstance" type="class" class="CustomXMLAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="HasAttribute" description="Returns if attribute of a specific name exists.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeExists" type="bool" pass="return" description="Returns if the attribute exists." />
		</method>

		<method name="FindAttribute" description="Returns attribute instance of a specific name. ">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if attribute does not exist. If falls, the call will return null if the attribute does not exist." />			
			<param name="AttributeInstance" type="optionalclass" class="CustomXMLAttribute" pass="return" description="XML Document attribute." />
		</method>

		<method name="RemoveAttribute" description="Removes the attribute with a specific name. Does nothing if attribute does not exist.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="AttributeRemoved" type="bool" pass="return" description="Returns true if an attribute was removed." />			
		</method>

		<method name="RemoveAttributeByIndex" description="Removes the attribute with a specific index. Fails if index is invalid">
			<param name="Index" type="uint64" pass="in" description="Index of the attribute to remove (0-based)." />
			<param name="AttributeRemoved" type="bool" pass="return" description="Returns true if an attribute was removed." />			
		</method>

		<method name="AddAttribute" description="Adds an attribute with a specific name and string value. Fails if attribute already exists.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="string" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddIntegerAttribute" description="Adds an attribute with a specific name and integer value. Fails if attribute already exists.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="int64" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddDoubleAttribute" description="Adds an attribute with a specific name and double value. Fails if attribute already exists.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="double" pass="in" description="Value of the attribute." />
		</method>

		<method name="AddBoolAttribute" description="Adds an attribute with a specific name and bool value. Fails if attribute already exists.">
			<param name="Name" type="string" pass="in" description="Name of the attribute." />
			<param name="Value" type="bool" pass="in" description="Value of the attribute." />
		</method>

		<method name="GetChildren" description="Returns all the child nodes of the XML Node.">
			<param name="ChildNodes" type="class" class="CustomXMLNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="CountChildrenByName" description="Returns how many children of the XML Node have a specific name.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number children with the specified name." />
		</method>
				
		<method name="GetChildrenByName" description="Returns all the child nodes of the XML Node with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildNodes" type="class" class="CustomXMLNodes" pass="return" description="returns the list of child nodes." />
		</method>

		<method name="HasChild" description="Returns if a child with a specific name exist.">
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists." />
		</method>

		<method name="HasUniqueChild" description="Returns if a child with a specific name exist once and only once.">
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildExists" type="bool" pass="return" description="returns if a child with a specific name exists once and only once." />
		</method>

		<method name="FindChild" description="Returns child with a specific name. Throws an error if name does not exist once and only once.">
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if child does not exist. If falls, the call will return null if the child does not exist." />			
			<param name="ChildInstance" type="optionalclass" class="CustomXMLNode" pass="return" description="returns child instance or null." />
		</method>
		
		<method name="AddChild" description="Adds a new child with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of the child." />
			<param name="ChildInstance" type="class" class="CustomXMLNode" pass="return" description="returns child instance." />
		</method>

		<method name="RemoveChild" description="Removes a specific child. All subsequent calls to the child will fail after the call.">
			<param name="ChildInstance" type="class" class="CustomXMLNode" pass="in" description="child instance to remove. Fails if given instance is not a child of the node." />
		</method>

		<method name="RemoveChildrenWithName" description="Removes all children with a specific name. Does nothing if no child with the name exists. All subsequent calls to the deleted children will fail after the call.">
			<param name="Name" type="string" pass="in" description="Name of the children." />
			<param name="NumberOfDeletedChildren" type="uint64" pass="return" description="Returns how many children have been deleted." />
		</method>

		<method name="Remove" description="Removes the node from its parent. The root node of the document can not be removed. Any subsequent call to the node fails after this.">
		</method>

		
		
	</class>

	<class name="CustomXMLNodes" parent="Base" description="An list of XML document nodes.">

		<method name="GetNodeCount" description="Returns number of nodes.">
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes in the list." />
		</method>
				
		<method name="GetNode" description="Returns node instance. Fails if Index is out of range.">
			<param name="Index" type="uint64" pass="in" description="Index of the node to return (0-based)." />
			<param name="NodeInstance" type="class" class="CustomXMLNode" pass="return" description="XML Node node." />
		</method>

		<method name="CountNodesByName" description="Returns how many nodes of the XML Node have a specific name.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Count" type="uint64" pass="return" description="returns the number of nodes with the specified name." />
		</method>

		<method name="GetNodesByName" description="Returns all the nodes nodes of the XML Node with a specific name.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="Nodes" type="class" class="CustomXMLNodes" pass="return" description="returns the list of node nodes." />
		</method>
				
		<method name="HasNode" description="Returns if a node with a specific name exist.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists." />
		</method>

		<method name="HasUniqueNode" description="Returns if a node with a specific name exist once and only once.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="NodeExists" type="bool" pass="return" description="returns if a node with a specific name exists once and only once." />
		</method>

		<method name="FindNode" description="Returns node with a specific name. Throws an error if name does not exist once and only once.">
			<param name="Name" type="string" pass="in" description="Name of the node." />
			<param name="MustExist" type="bool" pass="in" description="If true, the call fails if node does not exist. If falls, the call will return null if the node does not exist." />			
			<param name="NodeInstance" type="optionalclass" class="CustomXMLNode" pass="return" description="returns node instance." />
		</method>


				
	</class>

	<class name="CustomDOMTree" parent="Base" description="encapsulates a custom DOM tree in the XML File">
	
		<method name="GetNameSpace" description="Returns the namespace identifier for the DOM Tree.">
			<param name="NameSpace" type="string" pass="return" description="returns the namespace of the DOM Tree."/>
		</method>
		
		<method name="GetRootNode" description="Returns root node of the tree.">
			<param name="RootNode" type="class" class="CustomXMLNode" pass="return" description="Root node of the document." />
		</method>	

		<method name="SaveToString" description="Saves the XML tree into a string.">
			<param name="XMLString" type="string" pass="return" description="String with the XML Content." />
		</method>	
		
	</class>


	<class name="SliceStackIterator" parent="ResourceIterator">
		<method name="GetCurrentSliceStack" description="Returns the SliceStack the iterator points at.">
			<param name="Resource" type="handle" class="SliceStack" pass="return" description="returns the SliceStack instance."/>
		</method>
	</class>

	<class name="ObjectIterator" parent="ResourceIterator">
		<method name="GetCurrentObject" description="Returns the Object the iterator points at.">
			<param name="Resource" type="handle" class="Object" pass="return" description="returns the Object instance."/>
		</method>
	</class>

	<class name="MeshObjectIterator" parent="ResourceIterator">
		<method name="GetCurrentMeshObject" description="Returns the MeshObject the iterator points at.">
			<param name="Resource" type="handle" class="MeshObject" pass="return" description="returns the MeshObject instance."/>
		</method>
	</class>

	<class name="ComponentsObjectIterator" parent="ResourceIterator">
		<method name="GetCurrentComponentsObject" description="Returns the ComponentsObject the iterator points at.">
			<param name="Resource" type="handle" class="ComponentsObject" pass="return" description="returns the ComponentsObject instance."/>
		</method>
	</class> 

	<class name="Texture2DIterator" parent="ResourceIterator">
		<method name="GetCurrentTexture2D" description="Returns the Texture2D the iterator points at.">
			<param name="Resource" type="handle" class="Texture2D" pass="return" description="returns the Texture2D instance."/>
		</method>
	</class>

	<class name="BaseMaterialGroupIterator" parent="ResourceIterator">
		<method name="GetCurrentBaseMaterialGroup" description="Returns the MaterialGroup the iterator points at.">
			<param name="Resource" type="handle" class="BaseMaterialGroup" pass="return" description="returns the BaseMaterialGroup instance."/>
		</method>
	</class>

	<class name="ColorGroupIterator" parent="ResourceIterator">
		<method name="GetCurrentColorGroup" description="Returns the ColorGroup the iterator points at.">
			<param name="Resource" type="handle" class="ColorGroup" pass="return" description="returns the ColorGroup instance."/>
		</method>
	</class>

	<class name="Texture2DGroupIterator" parent="ResourceIterator">
		<method name="GetCurrentTexture2DGroup" description="Returns the Texture2DGroup the iterator points at.">
			<param name="Resource" type="handle" class="Texture2DGroup" pass="return" description="returns the Texture2DGroup instance."/>
		</method>
	</class>

	<class name="CompositeMaterialsIterator" parent="ResourceIterator">
		<method name="GetCurrentCompositeMaterials" description="Returns the CompositeMaterials the iterator points at.">
			<param name="Resource" type="handle" class="CompositeMaterials" pass="return" description="returns the CompositeMaterials instance."/>
		</method>
	</class>

	<class name="MultiPropertyGroupIterator" parent="ResourceIterator">
		<method name="GetCurrentMultiPropertyGroup" description="Returns the MultiPropertyGroup the iterator points at.">
			<param name="Resource" type="handle" class="MultiPropertyGroup" pass="return" description="returns the MultiPropertyGroup instance."/>
		</method>
	</class>

	<class name="MetaData" parent="Base">
		<method name="GetNameSpace" description="returns the namespace URL of the metadata">
			<param name="NameSpace" type="string" pass="return" description="the namespace URL of the metadata"/>
		</method>
		<method name="SetNameSpace" description="sets a new namespace URL of the metadata">
			<param name="NameSpace" type="string" pass="in" description="the new namespace URL of the metadata"/>
		</method>
		<method name="GetName" description="returns the name of a metadata">
			<param name="Name" type="string" pass="return" description="the name of the metadata"/>
		</method>
		<method name="SetName" description="sets a new name of a metadata">
			<param name="Name" type="string" pass="in" description="the new name of the metadata"/>
		</method>
		<method name="GetKey" description="returns the (namespace+name) of a metadata">
			<param name="Key" type="string" pass="return" description="the key (namespace+name) of the metadata"/>
		</method>
		<method name="GetMustPreserve" description="returns, whether a metadata must be preserved">
			<param name="MustPreserve" type="bool" pass="return" description="returns, whether a metadata must be preserved"/>
		</method>
		<method name="SetMustPreserve" description="sets whether a metadata must be preserved">
			<param name="MustPreserve" type="bool" pass="in" description="a new value whether a metadata must be preserved"/>
		</method>
		<method name="GetType" description="returns the type of a metadata">
			<param name="Type" type="string" pass="return" description="the type of the metadata"/>
		</method>
		<method name="SetType" description="sets a new type of a metadata. This must be a simple XML type">
			<param name="Type" type="string" pass="in" description="a new type of the metadata"/>
		</method>
		<method name="GetValue" description="returns the value of the metadata">
			<param name="Value" type="string" pass="return" description="the value of the metadata"/>
		</method>
		<method name="SetValue" description="sets a new value of the metadata">
			<param name="Value" type="string" pass="in" description="a new value of the metadata"/>
		</method>
	</class>

	<class name="MetaDataGroup" parent="Base">
		<method name="GetMetaDataCount" description="returns the number of metadata in this metadatagroup">
			<param name="Count" type="uint32" pass="return" description="returns the number metadata"/>
		</method>
		<method name="GetMetaData" description="returns a metadata value within this metadatagroup">
			<param name="Index" type="uint32" pass="in" description="Index of the Metadata."/>
			<param name="MetaData" type="handle" class="MetaData" pass="return" description="an instance of the metadata"/>
		</method>
		<method name="GetMetaDataByKey" description="returns a metadata value within this metadatagroup">
			<param name="NameSpace" type="string" pass="in" description="the namespace of the metadata"/>
			<param name="Name" type="string" pass="in" description="the name of the Metadata"/>
			<param name="MetaData" type="handle" class="MetaData" pass="return" description="an instance of the metadata"/>
		</method>
		<method name="RemoveMetaDataByIndex" description="removes metadata by index from the model.">
			<param name="Index" type="uint32" pass="in" description=" Index of the metadata to remove"/>
		</method>
		<method name="RemoveMetaData" description="removes metadata from the model.">
			<param name="TheMetaData" type="handle" class="MetaData" pass="in" description="The metadata to remove"/>
		</method>
		<method name="AddMetaData" description="adds a new metadata to this metadatagroup">
			<param name="NameSpace" type="string" pass="in" description="the namespace of the metadata"/>
			<param name="Name" type="string" pass="in" description="the name of the metadata"/>
			<param name="Value" type="string" pass="in" description="the value of the metadata"/>
			<param name="Type" type="string" pass="in" description="the type of the metadata"/>
			<param name="MustPreserve" type="bool" pass="in" description="shuold the metadata be preserved"/>
			<param name="MetaData" type="handle" class="MetaData" pass="return" description="a new instance of the metadata"/>
		</method>
	</class>

	<class name="Object" parent="Resource">
		<method name="GetType" description="Retrieves an object's type">
			<param name="ObjectType" type="enum" class="ObjectType" pass="return" description="returns object type enum."/>
		</method>
		<method name="SetType" description="Sets an object's type">
			<param name="ObjectType" type="enum" class="ObjectType" pass="in" description="object type enum."/>
		</method>
		<method name="GetName" description="Retrieves an object's name">
			<param name="Name" type="string" pass="return" description="returns object name."/>
		</method>
		<method name="SetName" description="Sets an object's name string">
			<param name="Name" type="string" pass="in" description="new object name."/>
		</method>
		<method name="GetPartNumber" description="Retrieves an object's part number">
			<param name="PartNumber" type="string" pass="return" description="returns object part number."/>
		</method>
		<method name="SetPartNumber" description="Sets an objects partnumber string">
			<param name="PartNumber" type="string" pass="in" description="new object part number."/>
		</method>
		<method name="IsMeshObject" description="Retrieves, if an object is a mesh object">
			<param name="IsMeshObject" type="bool" pass="return" description="returns, whether the object is a mesh object"/>
		</method>
		<method name="IsComponentsObject" description="Retrieves, if an object is a components object">
			<param name="IsComponentsObject" type="bool" pass="return" description="returns, whether the object is a components object"/>
		</method>
		<method name="IsValid" description="Retrieves, if the object is valid according to the core spec. For mesh objects, we distinguish between the type attribute of the object:In case of object type other, this always means false.In case of object type model or solidsupport, this means, if the mesh suffices all requirements of the core spec chapter 4.1.In case of object type support or surface, this always means true.A component objects is valid if and only if it contains at least one component and all child components are valid objects.">
			<param name="IsValid" type="bool" pass="return" description="returns whether the object is a valid object description"/>
		</method>
		<method name="SetAttachmentAsThumbnail" description="Use an existing attachment as thumbnail for this object">
			<param name="Attachment" type="handle" class="Attachment" pass="in" description="Instance of a new or the existing thumbnailattachment object."/>
		</method>
		<method name="GetThumbnailAttachment" description="Get the attachment containing the object thumbnail.">
			<param name="Attachment" type="optionalclass" class="Attachment" pass="return" description="Instance of the thumbnailattachment object or NULL."/>
		</method>
		<method name="ClearThumbnailAttachment" description="Clears the attachment. The attachment instance is not removed from the package.">
		</method>
		<method name="GetOutbox" description="Returns the outbox of a build item">
			<param name="Outbox" type="struct" class="Box" pass="return" description="Outbox of this build item"/>
		</method>
		<method name="GetUUID" description="Retrieves an object's uuid string (see production extension specification)">
			<param name="HasUUID" type="bool" pass="out" description="flag whether the build item has a UUID"/>
			<param name="UUID" type="string" pass="return" description="returns object uuid."/>
		</method>
		<method name="SetUUID" description="Sets a build object's uuid string (see production extension specification)">
			<param name="UUID" type="string" pass="in" description="new object uuid string."/>
		</method>
		<method name="GetMetaDataGroup" description="Returns the metadatagroup of this object">
			<param name="MetaDataGroup" type="handle" class="MetaDataGroup" pass="return" description="returns an Instance of the metadatagroup of this object"/>
		</method>
		<method name="SetSlicesMeshResolution" description="set the meshresolution of the mesh object">
			<param name="MeshResolution" type="enum" class="SlicesMeshResolution" pass="in" description="meshresolution of this object"/>
		</method>
		<method name="GetSlicesMeshResolution" description="get the meshresolution of the mesh object">
			<param name="MeshResolution" type="enum" class="SlicesMeshResolution" pass="return" description="meshresolution of this object"/>
		</method>
		<method name="HasSlices" description="returns whether the Object has a slice stack. If Recursive is true, also checks whether any references object has a slice stack">
			<param name="Recursive" type="bool" pass="in" description="check also all referenced objects?"/>
			<param name="HasSlices" type="bool" pass="return" description="does the object have a slice stack?"/>
		</method>
		<method name="ClearSliceStack" description="unlinks the attached slicestack from this object. If no slice stack is attached, do noting.">
		</method>
		<method name="GetSliceStack" description="get the Slicestack attached to the object">
			<param name="SliceStackInstance" type="handle" class="SliceStack" pass="return" description="returns the slicestack instance"/>
		</method>
		<method name="AssignSliceStack" description="assigns a slicestack to the object">
			<param name="SliceStackInstance" type="handle" class="SliceStack" pass="in" description="the new slice stack of this Object"/>
		</method>
		
	</class>

	<class name="MeshObject" parent="Object">
		<method name="GetVertexCount" description="Returns the vertex count of a mesh object.">
			<param name="VertexCount" type="uint32" pass="return" description="filled with the vertex count."/>
		</method>
		<method name="GetTriangleCount" description="Returns the triangle count of a mesh object.">
			<param name="VertexCount" type="uint32" pass="return" description="filled with the triangle count."/>
		</method>
		<method name="GetVertex" description="Returns the vertex count of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the vertex (0 to vertexcount - 1)"/>
			<param name="Coordinates" type="struct" class="Position" pass="return" description="filled with the vertex coordinates."/>
		</method>
		<method name="SetVertex" description="Sets the coordinates of a single vertex of a mesh object">
			<param name="Index" type="uint32" pass="in" description="Index of the vertex (0 to vertexcount - 1)"/>
			<param name="Coordinates" type="struct" class="Position" pass="in" description="contains the vertex coordinates."/>
		</method>
		<method name="AddVertex" description="Adds a single vertex to a mesh object">
			<param name="Coordinates" type="struct" class="Position" pass="in" description="contains the vertex coordinates."/>
			<param name="NewIndex" type="uint32" pass="return" description="Index of the new vertex"/>
		</method>
		<method name="GetVertices" description="Obtains all vertex positions of a mesh object">
			<param name="Vertices" type="structarray" class="Position" pass="out" description="contains the vertex coordinates."/>
		</method>
		<method name="GetTriangle" description="Returns indices of a single triangle of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the triangle (0 to trianglecount - 1)"/>
			<param name="Indices" type="struct" class="Triangle" pass="return" description="filled with the triangle indices."/>
		</method>
		<method name="SetTriangle" description="Sets the indices of a single triangle of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the triangle (0 to trianglecount - 1)"/>
			<param name="Indices" type="struct" class="Triangle" pass="in" description="contains the triangle indices."/>
		</method>
		<method name="AddTriangle" description="Adds a single triangle to a mesh object">
			<param name="Indices" type="struct" class="Triangle" pass="in" description="contains the triangle indices."/>
			<param name="NewIndex" type="uint32" pass="return" description="Index of the new triangle"/>
		</method>
		<method name="GetTriangleIndices" description="Get all triangles of a mesh object">
			<param name="Indices" type="structarray" class="Triangle" pass="out" description="contains the triangle indices."/>
		</method>
		<method name="SetObjectLevelProperty" description="Sets the property at the object-level of the mesh object.">
			<param name="UniqueResourceID" type="uint32" pass="in" description="the object-level Property UniqueResourceID."/>
			<param name="PropertyID" type="uint32" pass="in" description="the object-level PropertyID."/>
		</method>
		<method name="GetObjectLevelProperty" description="Gets the property at the object-level of the mesh object.">
			<param name="UniqueResourceID" type="uint32" pass="out" description="the object-level Property UniqueResourceID."/>
			<param name="PropertyID" type="uint32" pass="out" description="the object-level PropertyID."/>
			<param name="HasObjectLevelProperty" type="bool" pass="return" description="Has an object-level property been specified?"/>
		</method>
		<method name="SetTriangleProperties" description="Sets the properties of a single triangle of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the triangle (0 to trianglecount - 1)"/>
			<param name="Properties" type="struct" class="TriangleProperties" pass="in" description="contains the triangle properties."/>
		</method>
		<method name="GetTriangleProperties" description="Gets the properties of a single triangle of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the triangle (0 to trianglecount - 1)"/>
			<param name="Property" type="struct" class="TriangleProperties" pass="out" description="returns the triangle properties."/>
		</method>
		<method name="SetAllTriangleProperties" description="Sets the properties of all triangles of a mesh object. Sets the object level property to the first entry of the passed triangle properties, if not yet specified.">
			<param name="PropertiesArray" type="structarray" class="TriangleProperties" pass="in" description="contains the triangle properties array. Must have trianglecount elements."/>
		</method>
		<method name="GetAllTriangleProperties" description="Gets the properties of all triangles of a mesh object.">
			<param name="PropertiesArray" type="structarray" class="TriangleProperties" pass="out" description="returns the triangle properties array. Must have trianglecount elements."/>
		</method>
		<method name="ClearAllProperties" description="Clears all properties of this mesh object (triangle and object-level).">
		</method>
		<method name="SetGeometry" description="Set all triangles of a mesh object">
			<param name="Vertices" type="structarray" class="Position" pass="in" description="contains the positions."/>
			<param name="Indices" type="structarray" class="Triangle" pass="in" description="contains the triangle indices."/>
		</method>
		<method name="IsManifoldAndOriented" description="Retrieves, if an object describes a topologically oriented and manifold mesh, according to the core spec.">
			<param name="IsManifoldAndOriented" type="bool" pass="return" description="returns, if the object is oriented and manifold."/>
		</method>
		<method name="BeamLattice" description="Retrieves the BeamLattice within this MeshObject.">
			<param name="TheBeamLattice" type="handle" class="BeamLattice" pass="return" description="the BeamLattice within this MeshObject"/>
		</method>
	</class>

	<class name="BeamLattice" parent="Base">
		<method name="GetMinLength" description="Returns the minimal length of beams for the beamlattice.">
			<param name="MinLength" type="double" pass="return" description="minimal length of beams for the beamlattice"/>
		</method>
		<method name="SetMinLength" description="Sets the minimal length of beams for the beamlattice.">
			<param name="MinLength" type="double" pass="in" description="minimal length of beams for the beamlattice"/>
		</method>
		<method name="GetClipping" description="Returns the clipping mode and the clipping-mesh for the beamlattice of this mesh.">
			<param name="ClipMode" type="enum" class="BeamLatticeClipMode" pass="out" description="contains the clip mode of this mesh"/>
			<param name="UniqueResourceID" type="uint32" pass="out" description="filled with the UniqueResourceID of the clipping mesh-object or an undefined value if pClipMode is MODELBEAMLATTICECLIPMODE_NONE"/>
		</method>
		<method name="SetClipping" description="Sets the clipping mode and the clipping-mesh for the beamlattice of this mesh.">
			<param name="ClipMode" type="enum" class="BeamLatticeClipMode" pass="in" description="contains the clip mode of this mesh"/>
			<param name="UniqueResourceID" type="uint32" pass="in" description="the UniqueResourceID of the clipping mesh-object. This mesh-object has to be defined before setting the Clipping."/>
		</method>
		<method name="GetRepresentation" description="Returns the representation-mesh for the beamlattice of this mesh.">
			<param name="HasRepresentation" type="bool" pass="return" description="flag whether the beamlattice has a representation mesh."/>
			<param name="UniqueResourceID" type="uint32" pass="out" description="filled with the UniqueResourceID of the clipping mesh-object."/>
		</method>
		<method name="SetRepresentation" description="Sets the representation-mesh for the beamlattice of this mesh.">
			<param name="UniqueResourceID" type="uint32" pass="in" description="the UniqueResourceID of the representation mesh-object. This mesh-object has to be defined before setting the representation."/>
		</method>
		<method name="GetBallOptions" description="Returns the ball mode and the default ball radius for the beamlattice of this mesh.">
			<param name="BallMode" type="enum" class="BeamLatticeBallMode" pass="out" description="contains the ball mode of this mesh"/>
			<param name="BallRadius" type="double" pass="out" description="default ball radius of balls for the beamlattice"/>
		</method>
		<method name="SetBallOptions" description="Sets the ball mode and thedefault ball radius for the beamlattice.">
			<param name="BallMode" type="enum" class="BeamLatticeBallMode" pass="in" description="contains the ball mode of this mesh"/>
			<param name="BallRadius" type="double" pass="in" description="default ball radius of balls for the beamlattice"/>
		</method>
		<method name="GetBeamCount" description="Returns the beam count of a mesh object.">
			<param name="Count" type="uint32" pass="return" description="filled with the beam count."/>
		</method>
		<method name="GetBeam" description="Returns indices, radii and capmodes of a single beam of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the beam (0 to beamcount - 1)."/>
			<param name="BeamInfo" type="struct" class="Beam" pass="return" description="filled with the beam indices, radii and capmodes."/>
		</method>
		<method name="AddBeam" description="Adds a single beam to a mesh object.">
			<param name="BeamInfo" type="struct" class="Beam" pass="in" description="contains the node indices, radii and capmodes."/>
			<param name="Index" type="uint32" pass="return" description="filled with the new Index of the beam."/>
		</method>
		<method name="SetBeam" description="Sets the indices, radii and capmodes of a single beam of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the beam (0 to beamcount - 1)."/>
			<param name="BeamInfo" type="struct" class="Beam" pass="in" description="filled with the beam indices, radii and capmodes."/>
		</method>
		<method name="SetBeams" description="Sets all beam indices, radii and capmodes of a mesh object.">
			<param name="BeamInfo" type="structarray" class="Beam" pass="in" description="contains information of a number of  beams"/>
		</method>
		<method name="GetBeams" description="obtains all beam indices, radii and capmodes of a mesh object.">
			<param name="BeamInfo" type="structarray" class="Beam" pass="out" description="contains information of all beams"/>
		</method>
		<method name="GetBallCount" description="Returns the ball count of a mesh object.">
			<param name="Count" type="uint32" pass="return" description="filled with the ball count."/>
		</method>
		<method name="GetBall" description="Returns index and radius of a single ball of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the ball (0 to ballcount - 1)."/>
			<param name="BallInfo" type="struct" class="Ball" pass="return" description="filled with the ball node index and radius."/>
		</method>
		<method name="AddBall" description="Adds a single ball to a mesh object.">
			<param name="BallInfo" type="struct" class="Ball" pass="in" description="contains the node index and radius."/>
			<param name="Index" type="uint32" pass="return" description="filled with the new Index of the ball."/>
		</method>
		<method name="SetBall" description="Sets the index and radius of a single ball of a mesh object.">
			<param name="Index" type="uint32" pass="in" description="Index of the ball (0 to ballcount - 1)."/>
			<param name="BallInfo" type="struct" class="Ball" pass="in" description="filled with the ball node index and radius."/>
		</method>
		<method name="SetBalls" description="Sets all ball indices and radii of a mesh object.">
			<param name="BallInfo" type="structarray" class="Ball" pass="in" description="contains information of a number of  balls"/>
		</method>
		<method name="GetBalls" description="obtains all ball indices and radii of a mesh object.">
			<param name="BallInfo" type="structarray" class="Ball" pass="out" description="contains information of all balls"/>
		</method>
		<method name="GetBeamSetCount" description="Returns the number of beamsets of a mesh object.">
			<param name="Count" type="uint32" pass="return" description="filled with the beamset count."/>
		</method>
		<method name="AddBeamSet" description="Adds an empty beamset to a mesh object">
			<param name="BeamSet" type="handle" class="BeamSet" pass="return" description="the new beamset"/>
		</method>
		<method name="GetBeamSet" description="Returns a beamset of a mesh object">
			<param name="Index" type="uint32" pass="in" description="index of the requested beamset (0 ... beamsetcount-1)."/>
			<param name="BeamSet" type="handle" class="BeamSet" pass="return" description="the requested beamset"/>
		</method>
	</class>

	<class name="Component" parent="Base">
		<method name="GetObjectResource" description="Returns the Resource Instance of the component.">
			<param name="ObjectResource" type="handle" class="Object" pass="return" description="filled with the Resource Instance."/>
		</method>
		<method name="GetObjectResourceID" description="Returns the UniqueResourceID of the component.">
			<param name="UniqueResourceID" type="uint32" pass="return" description="returns the UniqueResourceID."/>
		</method>
		<method name="GetUUID" description="returns, whether a component has a UUID and, if true, the component's UUID">
			<param name="HasUUID" type="bool" pass="out" description="flag whether the component has a UUID"/>
			<param name="UUID" type="string" pass="return" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="SetUUID" description="sets the component's UUID">
			<param name="UUID" type="string" pass="in" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="HasTransform" description="Returns, if the component has a different transformation than the identity matrix">
			<param name="HasTransform" type="bool" pass="return" description="if true is returned, the transformation is not equal than the identity"/>
		</method>
		<method name="GetTransform" description="Returns the transformation matrix of the component.">
			<param name="Transform" type="struct" class="Transform" pass="return" description="filled with the component transformation matrix"/>
		</method>
		<method name="SetTransform" description="Sets the transformation matrix of the component.">
			<param name="Transform" type="struct" class="Transform" pass="in" description="new transformation matrix"/>
		</method>
	</class>

	<class name="ComponentsObject" parent="Object">
		<method name="AddComponent" description="Adds a new component to a components object.">
			<param name="ObjectResource" type="handle" class="Object" pass="in" description="object to add as component. Must not lead to circular references!"/>
			<param name="Transform" type="struct" class="Transform" pass="in" description="optional transform matrix for the component."/>
			<param name="ComponentInstance" type="handle" class="Component" pass="return" description="new component instance"/>
		</method>
		<method name="GetComponent" description="Retrieves a component from a component object.">
			<param name="Index" type="uint32" pass="in" description="index of the component to retrieve (0 to componentcount - 1)"/>
			<param name="ComponentInstance" type="handle" class="Component" pass="return" description="component instance"/>			
		</method>
		<method name="GetComponentCount" description="Retrieves a component count of a component object.">
			<param name="Count" type="uint32" pass="return" description="returns the component count"/>
		</method>
	</class>

	<class name="BeamSet" parent="Base">
		<method name="SetName" description="Sets a beamset's name string">
			<param name="Name" type="string" pass="in" description="new name of the beamset."/>
		</method>
		<method name="GetName" description="Retrieves a beamset's name string">
			<param name="Name" type="string" pass="return" description="returns the name of the beamset."/>
		</method>
		<method name="SetIdentifier" description="Sets a beamset's identifier string">
			<param name="Identifier" type="string" pass="in" description="new name of the beamset."/>
		</method>
		<method name="GetIdentifier" description="Retrieves a beamset's identifier string">
			<param name="Identifier" type="string" pass="return" description="returns the identifier of the beamset."/>
		</method>
		<method name="GetReferenceCount" description="Retrieves the reference count of a beamset">
			<param name="Count" type="uint32" pass="return" description="returns the reference count"/>
		</method>
		<method name="SetReferences" description="Sets the references of a beamset">
			<param name="References" type="basicarray" class="uint32" pass="in" description="the new indices of all beams in this beamset"/>
		</method>
		<method name="GetReferences" description="Retrieves the references of a beamset">
			<param name="References" type="basicarray" class="uint32" pass="out" description="retrieves the indices of all beams in this beamset"/>
		</method>
		<method name="GetBallReferenceCount" description="Retrieves the ball reference count of a beamset">
			<param name="Count" type="uint32" pass="return" description="returns the ball reference count"/>
		</method>
		<method name="SetBallReferences" description="Sets the ball references of a beamset">
			<param name="BallReferences" type="basicarray" class="uint32" pass="in" description="the new indices of all balls in this beamset"/>
		</method>
		<method name="GetBallReferences" description="Retrieves the ball references of a beamset">
			<param name="BallReferences" type="basicarray" class="uint32" pass="out" description="retrieves the indices of all balls in this beamset"/>
		</method>
	</class>

	<class name="BaseMaterialGroup" parent="Resource" description="The BaseMaterialGroup corresponds to a basematerials-element within a 3MF document">
		<method name="GetCount" description="Retrieves the count of base materials in the material group.">
			<param name="Count" type="uint32" pass="return" description="returns the count of base materials."/>
		</method>
		<method name="GetAllPropertyIDs" description="returns all the PropertyIDs of all materials in this group">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="PropertyID of the material in the material group."/>
		</method>
		<method name="AddMaterial" description="Adds a new material to the material group">
			<param name="Name" type="string" pass="in" description="new name of the base material."/>
			<param name="DisplayColor" type="struct" class="Color" pass="in" description="Display color of the material"/>
			<param name="PropertyID" type="uint32" pass="return" description="returns new PropertyID of the new material in the material group."/>			
		</method>
		<method name="RemoveMaterial" description="Removes a material from the material group.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the material in the material group."/>
		</method>
		<method name="GetName" description="Returns the base material's name">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the material in the material group."/>
			<param name="Name" type="string" pass="return" description="returns the name of the base material."/>
		</method>
		<method name="SetName" description="Sets a base material's name">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the material in the material group."/>
			<param name="Name" type="string" pass="in" description="new name of the base material."/>
		</method>
		<method name="SetDisplayColor" description="Sets a base material's display color.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the material in the material group."/>
			<param name="TheColor" type="struct" class="Color" pass="in" description="The base material's display color"/>
		</method>
		<method name="GetDisplayColor" description="Returns a base material's display color.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the material in the material group."/>
			<param name="TheColor" type="struct" class="Color" pass="return" description="The base material's display color"/>
		</method>
	</class>

	<class name="ColorGroup" parent="Resource">
		<method name="GetCount" description="Retrieves the count of base materials in this Color Group.">
			<param name="Count" type="uint32" pass="return" description="returns the count of colors within this color group."/>
		</method>
		<method name="GetAllPropertyIDs" description="returns all the PropertyIDs of all colors within this group">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="PropertyID of the color in the color group."/>
		</method>
		<method name="AddColor" description="Adds a new value.">
			<param name="TheColor" type="struct" class="Color" pass="in" description="The new color"/>
			<param name="PropertyID" type="uint32" pass="return" description="PropertyID of the new color within this color group."/>
		</method>
		<method name="RemoveColor" description="Removes a color from the color group.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the color to be removed from the color group."/>
		</method>
		<method name="SetColor" description="Sets a color value.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of a color within this color group."/>
			<param name="TheColor" type="struct" class="Color" pass="in" description="The color"/>
		</method>
		<method name="GetColor" description="Sets a color value.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of a color within this color group."/>
			<param name="TheColor" type="struct" class="Color" pass="return" description="The color"/>
		</method>
	</class>

	<class name="Texture2DGroup" parent="Resource">
		<method name="GetCount" description="Retrieves the count of tex2coords in the Texture2DGroup.">
			<param name="Count" type="uint32" pass="return" description="returns the count of tex2coords."/>
		</method>
		<method name="GetAllPropertyIDs" description="returns all the PropertyIDs of all tex2coords in this Texture2DGroup">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="PropertyID of the tex2coords in the Texture2DGroup."/>
		</method>
		<method name="AddTex2Coord" description="Adds a new tex2coord to the Texture2DGroup">
			<param name="UVCoordinate" type="struct" class="Tex2Coord" pass="in" description="The u/v-coordinate within the texture, horizontally right/vertically up from the origin in the lower left of the texture."/>
			<param name="PropertyID" type="uint32" pass="return" description="returns new PropertyID of the new tex2coord in the Texture2DGroup."/>			
		</method>
		<method name="GetTex2Coord" description="Obtains a tex2coord to the Texture2DGroup">
			<param name="PropertyID" type="uint32" pass="in" description="the PropertyID of the tex2coord in the Texture2DGroup."/>	
			<param name="UVCoordinate" type="struct" class="Tex2Coord" pass="return" description="The u/v-coordinate within the texture, horizontally right/vertically up from the origin in the lower left of the texture."/>
		</method>
		<method name="RemoveTex2Coord" description="Removes a tex2coords from the Texture2DGroup.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the tex2coords in the Texture2DGroup."/>
		</method>
		<method name="GetTexture2D" description="Obtains the texture2D instance of this group.">
			<param name="Texture2DInstance" type="handle" class="Texture2D" pass="return" description="the texture2D instance of this group."/>
		</method>
	</class>

	<class name="CompositeMaterials" parent="Resource">
		<method name="GetCount" description="Retrieves the count of Composite-s in the CompositeMaterials.">
			<param name="Count" type="uint32" pass="return" description="returns the count of Composite-s"/>
		</method>
		<method name="GetAllPropertyIDs" description="returns all the PropertyIDs of all Composite-Mixing Values in this CompositeMaterials">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="PropertyID of the Composite-Mixing Values in the CompositeMaterials."/>
		</method>
		<method name="GetBaseMaterialGroup" description="Obtains the BaseMaterialGroup instance of this CompositeMaterials.">
			<param name="BaseMaterialGroupInstance" type="handle" class="BaseMaterialGroup" pass="return" description="returns the BaseMaterialGroup instance of this CompositeMaterials"/>
		</method>
		<method name="AddComposite" description="Adds a new Composite-Mixing Values to the CompositeMaterials.">
			<param name="Composite" type="structarray" class="CompositeConstituent" pass="in" description="The Composite Constituents to be added as composite"/>
			<param name="PropertyID" type="uint32" pass="return" description="returns new PropertyID of the new Composite in the CompositeMaterials."/>
		</method>
		<method name="RemoveComposite" description="Removes a Composite-Maxing Ratio from the CompositeMaterials.">
			<param name="PropertyID" type="uint32" pass="in" description="PropertyID of the  Composite-Mixing Values in the CompositeMaterials to be removed."/>
		</method>
		<method name="GetComposite" description="Obtains a Composite-Maxing Ratio of this CompositeMaterials.">
			<param name="PropertyID" type="uint32" pass="in" description="the PropertyID of the Composite-Maxing Ratio in the CompositeMaterials."/>
			<param name="Composite" type="structarray" class="CompositeConstituent" pass="out" description="The Composite-Mixing Values with the given PropertyID"/>
		</method>
	</class>

	<class name="MultiPropertyGroup" parent="Resource">
		<method name="GetCount" description="Retrieves the count of MultiProperty-s in the MultiPropertyGroup.">
			<param name="Count" type="uint32" pass="return" description="returns the count of MultiProperty-s"/>
		</method>
		<method name="GetAllPropertyIDs" description="returns all the PropertyIDs of all MultiProperty-s in this MultiPropertyGroup">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="PropertyID of the MultiProperty-s in the MultiPropertyGroup."/>
		</method>
		<method name="AddMultiProperty" description="Adds a new MultiProperty to the MultiPropertyGroup.">
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="in" description="The PropertyIDs of the new MultiProperty."/>
			<param name="PropertyID" type="uint32" pass="return" description="returns the PropertyID of the new MultiProperty in the MultiPropertyGroup."/>
		</method>
		<method name="SetMultiProperty" description="Sets the PropertyIDs of a MultiProperty.">
			<param name="PropertyID" type="uint32" pass="in" description="the PropertyID of the MultiProperty to be changed."/>
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="in" description="The new PropertyIDs of the MultiProperty"/>
		</method>
		<method name="GetMultiProperty" description="Obtains the PropertyIDs of a MultiProperty.">
			<param name="PropertyID" type="uint32" pass="in" description="the PropertyID of the MultiProperty to be queried."/>
			<param name="PropertyIDs" type="basicarray" class="uint32" pass="out" description="The PropertyIDs of the MultiProperty"/>
		</method>
		<method name="RemoveMultiProperty" description="Removes a MultiProperty from this MultiPropertyGroup.">
			<param name="PropertyID" type="uint32" pass="in" description="the PropertyID of the MultiProperty to be removed."/>
		</method>
		<method name="GetLayerCount" description="Retrieves the number of layers of this MultiPropertyGroup.">
			<param name="Count" type="uint32" pass="return" description="returns the number of layers"/>
		</method>
		<method name="AddLayer" description="Adds a MultiPropertyLayer to this MultiPropertyGroup.">
			<param name="TheLayer" type="struct" class="MultiPropertyLayer" pass="in" description="The MultiPropertyLayer to add to this MultiPropertyGroup"/>
			<param name="LayerIndex" type="uint32" pass="return" description="returns the index of this MultiPropertyLayer"/>
		</method>
		<method name="GetLayer" description="Obtains a MultiPropertyLayer of this MultiPropertyGroup.">
			<param name="LayerIndex" type="uint32" pass="in" description="The Index of the MultiPropertyLayer queried"/>
			<param name="TheLayer" type="struct" class="MultiPropertyLayer" pass="return" description="The MultiPropertyLayer with index LayerIndex within MultiPropertyGroup"/>
		</method>
		<method name="RemoveLayer" description="Removes a MultiPropertyLayer from this MultiPropertyGroup.">
			<param name="LayerIndex" type="uint32" pass="in" description="The Index of the MultiPropertyLayer to be removed"/>
		</method>
	</class>

	<class name="Attachment" parent="Base">
		<method name="GetPath" description="Retrieves an attachment's package path. This function will be removed in a later release.">
			<param name="Path" type="string" pass="return" description="returns the attachment's package path string"/>
		</method>
		<method name="SetPath" description="Sets an attachment's package path. This function will be removed in a later release.">
			<param name="Path" type="string" pass="in" description="new path of the attachment."/>
		</method>
		<method name="PackagePart" description="Returns the PackagePart that is this attachment.">
			<param name="PackagePart" type="class" class="PackagePart" pass="return" description="The PackagePart of this attachment."/>
		</method>
		<method name="GetRelationShipType" description="Retrieves an attachment's relationship type">
			<param name="Path" type="string" pass="return" description="returns the attachment's package relationship type string"/>
		</method>
		<method name="SetRelationShipType" description="Sets an attachment's relationship type.">
			<param name="Path" type="string" pass="in" description="new relationship type string."/>
		</method>
		<method name="WriteToFile" description="Writes out the attachment as file.">
			<param name="FileName" type="string" pass="in" description="file to write into."/>
		</method>
		<method name="ReadFromFile" description="Reads an attachment from a file. The path of this file is only read when this attachment is being written as part of the 3MF package, or via the WriteToFile or WriteToBuffer-methods.">
			<param name="FileName" type="string" pass="in" description="file to read from."/>
		</method>
		<method name="ReadFromCallback" description="Reads an attachment from the data provided by a callback function. This callback function is only invoked when this attachment is being written as part of the 3MF package, or via the WriteToFile or WriteToBuffer-methods.">
			<param name="TheReadCallback" type="functiontype" class="ReadCallback" pass="in" description="Callback to call for reading a data chunk"/>
			<param name="StreamSize" type="uint64" pass="in" description="number of bytes the callback returns"/>
			<param name="TheSeekCallback" type="functiontype" class="SeekCallback" pass="in" description="Callback to call for seeking in the stream."/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		</method>
		<method name="GetStreamSize" description="Retrieves the size of the attachment stream">
			<param name="StreamSize" type="uint64" pass="return" description="the stream size"/>
		</method>
		<method name="WriteToBuffer" description="Writes out the attachment into a buffer">
			<param name="Buffer" type="basicarray" class="uint8" pass="out" description="Buffer to write into"/>
		</method>
		<method name="ReadFromBuffer" description="Reads an attachment from a memory buffer. This buffer is immediatly read (in contrast to the ReadFromCallback and ReadFromFile-methods).">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Buffer to read from"/>
		</method>
		<!--
		<method name="WriteToCallback" description = "Writes out the attachment and passes the data to a provided callback function. The file type is specified by the type (and potentially path) of the attachment">
			<param name="WriteCallback" type="callback" pass="in" description="Callback to call for writing a data chunk" />
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function" />
		</method>
		-->
	</class>

	<class name="Texture2D" parent="Resource">
		<method name="GetAttachment" description="Retrieves the attachment located at the path of the texture.">
			<param name="Attachment" type="handle" class="Attachment" pass="return" description="attachment that holds the texture's image information."/>
		</method>
		<method name="SetAttachment" description="Sets the texture's package path to the path of the attachment.">
			<param name="Attachment" type="handle" class="Attachment" pass="in" description="attachment that holds the texture's image information."/>
		</method>
		<method name="GetContentType" description="Retrieves a texture's content type.">
			<param name="ContentType" type="enum" class="TextureType" pass="return" description="returns content type enum."/>
		</method>

		<method name="SetContentType" description="Retrieves a texture's content type.">
			<param name="ContentType" type="enum" class="TextureType" pass="in" description="new Content Type"/>
		</method>

		<method name="GetTileStyleUV" description="Retrieves a texture's tilestyle type.">
			<param name="TileStyleU" type="enum" class="TextureTileStyle" pass="out" description="returns tilestyle type enum."/>
			<param name="TileStyleV" type="enum" class="TextureTileStyle" pass="out" description="returns tilestyle type enum."/>
		</method>

		<method name="SetTileStyleUV" description="Sets a texture's tilestyle type.">
			<param name="TileStyleU" type="enum" class="TextureTileStyle" pass="in" description="new tilestyle type enum."/>
			<param name="TileStyleV" type="enum" class="TextureTileStyle" pass="in" description="new tilestyle type enum."/>
		</method>

		<method name="GetFilter" description="Retrieves a texture's filter type.">
			<param name="Filter" type="enum" class="TextureFilter" pass="return" description="returns filter type enum."/>
		</method>

		<method name="SetFilter" description="Sets a texture's filter type.">
			<param name="Filter" type="enum" class="TextureFilter" pass="in" description="sets new filter type enum."/>
		</method>
	</class>


	<class name="BuildItem" parent="Base">
		<method name="GetObjectResource" description="Retrieves the object resource associated to a build item">
			<param name="ObjectResource" type="handle" class="Object" pass="return" description="returns the associated resource instance"/>
		</method>
		<method name="GetUUID" description="returns, whether a build item has a UUID and, if true, the build item's UUID">
			<param name="HasUUID" type="bool" pass="out" description="flag whether the build item has a UUID"/>
			<param name="UUID" type="string" pass="return" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="SetUUID" description="sets the build item's UUID">
			<param name="UUID" type="string" pass="in" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="GetObjectResourceID" description="Retrieves the object UniqueResourceID associated to a build item">
			<param name="UniqueResourceID" type="uint32" pass="return" description="returns the UniqueResourceID of the object"/>
		</method>
		<method name="HasObjectTransform" description="Checks, if a build item has a non-identity transformation matrix">
			<param name="HasTransform" type="bool" pass="return" description="returns true, if the transformation matrix is not the identity"/>
		</method>
		<method name="GetObjectTransform" description="Retrieves a build item's transformation matrix.">
			<param name="Transform" type="struct" class="Transform" pass="return" description="returns the transformation matrix"/>
		</method>
		<method name="SetObjectTransform" description="Sets a build item's transformation matrix.">
			<param name="Transform" type="struct" class="Transform" pass="in" description="new transformation matrix"/>
		</method>
		<method name="GetPartNumber" description="Retrieves a build item's part number string">
			<param name="PartNumber" type="string" pass="return" description="Returns a build item's part number string"/>
		</method>
		<method name="SetPartNumber" description="Sets a build item's part number string">
			<param name="SetPartnumber" type="string" pass="in" description="new part number string for referencing parts from the outside world"/>
		</method>
		<method name="GetMetaDataGroup" description="Returns the metadatagroup of this build item">
			<param name="MetaDataGroup" type="handle" class="MetaDataGroup" pass="return" description="returns an Instance of the metadatagroup of this build item"/>
		</method>
		<method name="GetOutbox" description="Returns the outbox of a build item">
			<param name="Outbox" type="struct" class="Box" pass="return" description="Outbox of this build item"/>
		</method>
	</class>


	<class name="BuildItemIterator" parent="Base">
		<method name="MoveNext" description="Iterates to the next build item in the list.">
			<param name="HasNext" type="bool" pass="return" description="Iterates to the next build item in the list."/>
		</method>
		<method name="MovePrevious" description="Iterates to the previous build item in the list.">
			<param name="HasPrevious" type="bool" pass="return" description="Iterates to the previous build item in the list."/>
		</method>
		<method name="GetCurrent" description="Returns the build item the iterator points at.">
			<param name="BuildItem" type="handle" class="BuildItem" pass="return" description="returns the build item instance."/>
		</method>
		<method name="Clone" description="Creates a new build item iterator with the same build item list.">
			<param name="OutBuildItemIterator" type="handle" class="BuildItemIterator" pass="return" description="returns the cloned Iterator instance"/>
		</method>
		<method name="Count" description="Returns the number of build items the iterator captures.">
			<param name="Count" type="uint64" pass="return" description="returns the number of build items the iterator captures."/>
		</method>
	</class>

	<class name="Slice" parent="Base">
		<method name="SetVertices" description="Set all vertices of a slice. All polygons will be cleared.">
			<param name="Vertices" type="structarray" class="Position2D" pass="in" description="contains the positions."/>
		</method>
		<method name="GetVertices" description="Get all vertices of a slice">
			<param name="Vertices" type="structarray" class="Position2D" pass="out" description="contains the positions."/>
		</method>
		<method name="GetVertexCount" description="Get the number of vertices in a slice">
			<param name="Count" type="uint64" pass="return" description="the number of vertices in the slice"/>
		</method>
		<method name="AddPolygon" description="Add a new polygon to this slice">
			<param name="Indices" type="basicarray" class="uint32" pass="in" description="the new indices of the new polygon"/>
			<param name="Index" type="uint64" pass="return" description="the index of the new polygon"/>
		</method>
		<method name="GetPolygonCount" description="Get the number of polygons in the slice">		
			<param name="Count" type="uint64" pass="return" description="the number of polygons in the slice"/>
		</method>
		<method name="SetPolygonIndices" description="Set all indices of a polygon">
			<param name="Index" type="uint64" pass="in" description="the index of the polygon to manipulate"/>
			<param name="Indices" type="basicarray" class="uint32" pass="in" description="the new indices of the index-th polygon"/>
		</method>
		<method name="GetPolygonIndices" description="Get all vertices of a slice">
			<param name="Index" type="uint64" pass="in" description="the index of the polygon to manipulate"/>
			<param name="Indices" type="basicarray" class="uint32" pass="out" description="the indices of the index-th polygon "/>
		</method>
		<method name="GetPolygonIndexCount" description="Get the number of vertices in a slice">
			<param name="Index" type="uint64" pass="in" description="the index of the polygon to manipulate"/>
			<param name="Count" type="uint64" pass="return" description="the number of indices of the index-th polygon"/>
		</method>
		<method name="GetZTop" description="Get the upper Z-Coordinate of this slice.">
			<param name="ZTop" type="double" pass="return" description="the upper Z-Coordinate of this slice"/>
		</method>
	</class>
	
	<class name="ToolpathProfile" parent="Base">

		<method name="GetUUID" description="Retrieves the profile's uuid">
			<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
		</method>

		<method name="GetName" description="Retrieves the profile's name">
			<param name="Name" type="string" pass="return" description="Returns the name." />
		</method>

		<method name="GetParameterCount" description="Returns the number of parameters.">
			<param name="Count" type="uint32" pass="return" description="Returns the number of parameters." />
		</method>

		<method name="GetParameterName" description="Returns the Name of a parameter.">
			<param name="Index" type="uint32" pass="in" description="Index of Parameter (0-based). Call will fail if an invalid index is given." />
			<param name="Name" type="string" pass="return" description="Returns the name of the parameter." />
		</method>

		<method name="GetParameterNameSpace" description="Returns the NameSpace of a parameter.">
			<param name="Index" type="uint32" pass="in" description="Index of Parameter (0-based). Call will fail if an invalid index is given." />
			<param name="NameSpace" type="string" pass="return" description="Returns the namespace of the parameter." />
		</method>
		
		<method name="HasParameterValue" description="Checks if a parameter value exists.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="ValueExists" type="bool" pass="return" description="Returns if a value exists." />
		</method>

		<method name="GetParameterValue" description="Retrieves a profile's parameter value. Fails if value does not exist.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="string" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterValueDef" description="Retrieves a profile's parameter value">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="DefaultValue" type="string" pass="in" description="Default value if value does not exist." />
			<param name="Value" type="string" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterDoubleValue" description="Retrieves a profile's parameter value as double. Fails if value does not exist or is not a double value.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="double" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterDoubleValueDef" description="Retrieves a profile's parameter value as double.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="DefaultValue" type="double" pass="in" description="Default value if value does not exist or is not a double value." />
			<param name="Value" type="double" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterIntegerValue" description="Retrieves a profile's parameter value as integer. Fails if value does not exist or is not a integer value.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="int64" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterIntegerValueDef" description="Retrieves a profile's parameter value as integer.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="DefaultValue" type="int64" pass="in" description="Default value if value does not exist or is not a integer value." />
			<param name="Value" type="int64" pass="return" description="Returns the value of the field." />
		</method>
		
		<method name="GetParameterBoolValue" description="Retrieves a profile's parameter value as boolean. Fails if value does not exist or is not a boolean value.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="bool" pass="return" description="Returns the value of the field." />
		</method>

		<method name="GetParameterBoolValueDef" description="Retrieves a profile's parameter value as boolean.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="DefaultValue" type="bool" pass="in" description="Default value if value does not exist or is not a boolean value." />
			<param name="Value" type="bool" pass="return" description="Returns the value of the field." />
		</method>
		
		<method name="SetName" description="Sets the profile's name">
			<param name="Name" type="string" pass="in" description="Returns the name." />
		</method>

		<method name="SetParameterValue" description="Sets a profile's parameter value.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="string" pass="in" description="String value of the parameter." />
		</method>

		<method name="SetParameterDoubleValue" description="Sets a profile's parameter value as double.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="double" pass="in" description="Double value of the parameter." />
		</method>


		<method name="SetParameterIntegerValue" description="Sets a profile's parameter value as integer.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="int64" pass="in" description="Integer value of the parameter." />
		</method>

		<method name="SetParameterBoolValue" description="Sets a profile's parameter value as boolean.">
			<param name="NameSpaceName" type="string" pass="in" description="Name of the Parameter Namespace." />
			<param name="ValueName" type="string" pass="in" description="Value key string." />
			<param name="Value" type="bool" pass="in" description="Boolean value of the parameter." />
		</method>

	</class>


  <class name="ToolpathLayerReader" parent="Base">
  
	<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
		<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
	</method>
	
	<method name="GetSegmentCount" description="Retrieves the count of segments.">
		<param name="Count" type="uint32" pass="return" description="Count" />
	</method>
	
	<method name="GetSegmentInfo" description="Retrieves the segment type information .">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="Type" type="enum" class="ToolpathSegmentType" pass="out" description="Segment Type" />
		<param name="PointCount" type="uint32" pass="out" description="Point count of segment." />
	</method>
	
	<method name="GetSegmentProfile" description="Retrieves the assigned segment profile.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="Profile" type="class" class="ToolpathProfile" pass="return" description="Segment Profile" />
	</method>
	
	<method name="GetSegmentProfileUUID" description="Retrieves the assigned segment profile uuid.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="ProfileUUID" type="string" pass="return" description="Segment Profile UUID" />
	</method>

	<method name="GetSegmentPart" description="Retrieves the assigned segment profile.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="BuildItem" type="class" class="BuildItem" pass="return" description="Segment Build Item" />
	</method>
	
	<method name="GetSegmentPartUUID" description="Retrieves the assigned segment part uuid.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
	</method>

	<method name="GetSegmentLocalPartID" description="Retrieves the assigned segment part id. ATTENTION: This ID is only unique within the layer and there is no guarantee to be globally unique or consistent across layers.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
		<param name="LocalPartID" type="uint32" pass="return" description="Local Segment Part ID" />
	</method>

	<method name="GetPartUUIDByLocalPartID" description="Retrieves the global part UUID by the local part ID. Fails if part ID does not exist in this layer. ATTENTION: This ID is only unique within the layer and there is no guarantee to be globally unique or consistent across layers.">
		<param name="LocalPartID" type="uint32" pass="in" description="Local Segment Part ID" />
		<param name="PartUUID" type="string" pass="return" description="Segment Part UUID" />
	</method>

	<method name="GetSegmentPointData" description="Retrieves the assigned segment point list. For type hatch, the points are taken pairwise.">
		<param name="Index" type="uint32" pass="in" description="Index. Must be between 0 and Count - 1." />
	    <param name="PointData" type="structarray" class="Position2D" pass="out" description="The point data array" />
	</method>

	<method name="FindAttributeInfoByName" description="Retrieves a segment attribute Information by Attribute Name. Will fail if Attribute does not exist.">
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
		<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
		<param name="ID" type="uint32" pass="out" description="Attribute ID." />
		<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="out" description="Attribute Type." />		
	</method>

	<method name="FindAttributeIDByName" description="Retrieves a segment attribute ID by Attribute Name. Will fail if Attribute does not exist.">
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
		<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
		<param name="ID" type="uint32" pass="return" description="Attribute ID." />
	</method>

	<method name="FindAttributeValueByName" description="Retrieves a segment attribute Type by Attribute Name. Will fail if Attribute does not exist.">
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
		<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
		<param name="AttributeType" type="enum" class="ToolpathAttributeType" pass="return" description="Attribute Type." />
	</method>

	<method name="GetSegmentIntegerAttributeByID" description="Retrieves a segment Uint32 attribute by Attribute ID. Will fail if Attribute does not exist.">
		<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
		<param name="ID" type="uint32" pass="in" description="Attribute ID." />
		<param name="Value" type="int64" pass="return" description="Attribute Value." />
	</method>

	<method name="GetSegmentIntegerAttributeByName" description="Retrieves a segment integer attribute by Attribute Name. Will fail if Attribute does not exist or is of different type.">
		<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
		<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
		<param name="Value" type="int64" pass="return" description="Attribute Value." />
	</method>


	<method name="GetSegmentDoubleAttributeByID" description="Retrieves a segment Double attribute by Attribute ID. Will fail if Attribute does not exist.">
		<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
		<param name="ID" type="uint32" pass="in" description="Attribute ID." />
		<param name="Value" type="double" pass="return" description="Attribute Value." />
	</method>

	<method name="GetSegmentDoubleAttributeByName" description="Retrieves a segment Double attribute by Attribute Name. Will fail if Attribute does not exist.">
		<param name="Index" type="uint32" pass="in" description="Segment Index. Must be between 0 and Count - 1." />
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom attribute." />
		<param name="AttributeName" type="string" pass="in" description="Name of the custom attribute." />
		<param name="Value" type="double" pass="return" description="Attribute Value." />
	</method>

	<method name="GetCustomDataCount" description="Retrieves the count of custom data elements.">
		<param name="Count" type="uint32" pass="return" description="Count" />
	</method>
	
	<method name="GetCustomData" description="Retrieves the custom data.">
		<param name="Index" type="uint32" pass="in" description="Index of the Custom Data. 0-based. MUST be smaller than Data Count" />
		<param name="Data" type="class" class="CustomDOMTree" pass="return" description="DOM Tree of the data." />
	</method>

	<method name="GetCustomDataName" description="Retrieves the node name of the custom data.">
		<param name="Index" type="uint32" pass="in" description="Index of the Custom Data. 0-based. MUST be smaller than Data Count" />
		<param name="NameSpace" type="string" pass="out" description="Namespace of the custom data tree." />
		<param name="DataName" type="string" pass="out" description="Root name of the data tree." />
	</method>
	
  </class>
  
	
	
  <class name="ToolpathLayerData" parent="Base">

	<method name="GetLayerDataUUID" description="Retrieves the layerdata's uuid">
		<param name="UUID" type="string" pass="return" description="Returns the uuid value." />
	</method>
  
    <method name="RegisterProfile" description="Registers a toolpath profile">
      <param name="Profile" class="ToolpathProfile" type="handle" pass="in" description="The toolpath profile to register." />
      <param name="ProfileID" type="uint32" pass="return" description="returns the local profile ID for the layer." />
    </method>

    <method name="RegisterBuildItem" description="Registers a Model Build Item">
      <param name="BuildItem" class="BuildItem" type="handle" pass="in" description="The model build item to use." />
      <param name="PartID" type="uint32" pass="return" description="returns the local part ID for the layer." />
    </method>

    <method name="SetSegmentAttribute" description="Sets Segment Attribute for all following segments that are added. Overrides previously set attribute.">
      <param name="NameSpace" type="string" pass="in" description="The namespace of the attribute to register." />
      <param name="AttributeName" type="string" pass="in" description="The name of the attribute to register." />
      <param name="Value" type="string" pass="in" description="The value of the attribute to register." />
    </method>

    <method name="ClearSegmentAttributes" description="Clears current segment attributes.">
    </method>

    <method name="WriteHatchData" description="writes hatch data to the layer.">
      <param name="ProfileID" type="uint32" pass="in" description="The toolpath profile to use" />
      <param name="PartID" type="uint32" pass="in" description="The toolpath part to use" />
      <param name="PointData" type="structarray" class="Position2D" pass="in" description="The point data" />      
    </method>

    <method name="WriteLoop" description="writes loop data to the layer.">
      <param name="ProfileID" type="uint32" pass="in" description="The toolpath profile to use" />
      <param name="PartID" type="uint32" pass="in" description="The toolpath part to use" />
      <param name="PointData" type="structarray" class="Position2D" pass="in" description="The point data" />
    </method>

    <method name="WritePolyline" description="writes polyline data to the layer.">
      <param name="ProfileID" type="uint32" pass="in" description="The toolpath profile to use" />
      <param name="PartID" type="uint32" pass="in" description="The toolpath part to use" />
      <param name="PointData" type="structarray" class="Position2D" pass="in" description="The point data" />
    </method>	

	<method name="AddCustomData" description="Adds a custom data DOM tree to the layer. Layer MUST not be finished when changing the DOM tree.">
		<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree. MUST not be empty." />
		<param name="DataName" type="string" pass="in" description="Root name of the data tree. MUST not be empty. MUST be a valid XML name string." />
		<param name="Data" type="class" class="CustomDOMTree" pass="return" description="DOM Tree of the data." />
	</method>	

	<method name="Finish" description="finishes all writing of the layer and compresses toolpath data.">
    </method>

  </class>


  <class name="Toolpath" parent="Resource">

		<method name="GetUnits" description="Retrieves the unit factor">
			<param name="Units" type="double" pass="return" description="Returns the unit factor." />
		</method>

		<method name="GetLayerCount" description="Retrieves the count of layers">
			<param name="Count" type="uint32" pass="return" description="Returns the layer count" />
		</method>

		<method name="GetProfileCount" description="Retrieves the count of profiles">
			<param name="Count" type="uint32" pass="return" description="Returns the profile count" />
		</method>

		<method name="AddLayer" description = "Adds a new toolpath layer">
			<param name="ZMax" type="uint32" pass="in" description="ZMax value of the layer. MUST be larger than the last layer added, as well as larger as BottomZ." />
			<param name="Path" type="string" pass="in" description="Package Path" />
			<param name="ModelWriter" type="handle" class="Writer" pass="in" description="The model writer that writes out the 3MF." />
			<param name="LayerData" type="handle" class="ToolpathLayerData" pass="return" description="Returns the layerdata object to write the layer content into." />
		</method>

		<method name="GetBottomZ" description = "Returns the bottom Z Value of the toolpath.">
			<param name="BottomZ" type="uint32" pass="return" description="BottomZ value" />
		</method>

		<method name="SetBottomZ" description = "Sets the bottom Z Value of the toolpath. Will fail if a layer is already existing.">
			<param name="BottomZ" type="uint32" pass="in" description="BottomZ value" />
		</method>

		<method name="GetLayerAttachment" description = "Retrieves the Attachment of a layer">
		  <param name="Index" type="uint32" pass="in" description="Layer Index" />
		  <param name="Attachment" type="class" class="Attachment" pass="return" description="Attachment" />
		</method>

		<method name="ReadLayerData" description = "Reads the toolpath of a layer.">
		  <param name="Index" type="uint32" pass="in" description="Layer Index" />
		  <param name="ToolpathReader" type="class" class="ToolpathLayerReader" pass="return" description="Toolpath Reader Instance" />
		</method>
		

		<method name="GetLayerPath" description = "Retrieves the Path of a layer">
		  <param name="Index" type="uint32" pass="in" description="Layer Index" />
		  <param name="Path" type="string" pass="return" description="Package Path" />
		</method>

		<method name="GetLayerZMax" description = "Retrieves the ZMax of a layer">
		  <param name="Index" type="uint32" pass="in" description="Layer Index" />
		  <param name="ZMax" type="uint32" pass="return" description="ZMax value" />
		</method>

		<method name="GetLayerZ" description = "Return the z value of a layer in units.">
			<param name="LayerIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="ZValue" type="uint32" pass="return" description="Z Value in Units." />
		</method>

		<method name="AddProfile" description="Adds a new profile to the toolpath.">
			<param name="Name" type="string" pass="in" description="the name." />
			<param name="Profile" type="handle" class="ToolpathProfile" pass="return" description="Returns the profile." />
		</method>

		<method name="GetProfile" description="Returns a profile of the toolpath.">
			<param name="ProfileIndex" type="uint32" pass="in" description="Layer Index." />
			<param name="Profile" type="handle" class="ToolpathProfile" pass="return" description="Returns the profile." />
		</method>

		<method name="GetProfileUUID" description="Returns a profile of the toolpath by UUID. DEPRECIATED! Please use GetProfileByUUID instead.">
			<param name="ProfileUUID" type="string" pass="in" description="UUID string." />
			<param name="Profile" type="handle" class="ToolpathProfile" pass="return" description="Returns the profile." />
		</method>

		<method name="GetProfileByUUID" description="Returns a profile of the toolpath by UUID. Fails if profile does not exist.">
			<param name="ProfileUUID" type="string" pass="in" description="UUID string." />
			<param name="Profile" type="handle" class="ToolpathProfile" pass="return" description="Returns the profile." />
		</method>
		
		<method name="GetCustomDataCount" description="Retrieves the count of custom data elements.">
			<param name="Count" type="uint32" pass="return" description="Count" />
		</method>
		
		<method name="GetCustomData" description="Retrieves the custom data.">
			<param name="Index" type="uint32" pass="in" description="Index of the Custom Data. 0-based. MUST be smaller than Data Count" />
			<param name="Data" type="class" class="CustomDOMTree" pass="return" description="DOM Tree of the data." />
		</method>

		<method name="GetCustomDataName" description="Retrieves the node name of the custom data.">
			<param name="Index" type="uint32" pass="in" description="Index of the Custom Data. 0-based. MUST be smaller than Data Count" />
			<param name="NameSpace" type="string" pass="out" description="Namespace of the custom data tree." />
			<param name="DataName" type="string" pass="out" description="Root name of the data tree." />
		</method>

		<method name="HasUniqueCustomData" description="Retrieves if custom data with a specific namespace and name combination exists.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree." />
			<param name="DataName" type="string" pass="in" description="Root name of the data tree." />
			<param name="CustomDataExists" type="bool" pass="return" description="Returns true if DOM Tree Exists." />
		</method>

		<method name="FindUniqueCustomData" description="Retrieves the custom data with a specific namespace and name combination. Fails if combination is not unique.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree." />
			<param name="DataName" type="string" pass="in" description="Root name of the data tree." />
			<param name="Data" type="class" class="CustomDOMTree" pass="return" description="DOM Tree of the data." />
		</method>
		
		<method name="AddCustomData" description="Adds a custom data DOM tree to the toolpath.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree. MUST not be empty." />
			<param name="DataName" type="string" pass="in" description="Root name of the data tree. MUST not be empty. MUST be a valid XML name string." />
			<param name="Data" type="class" class="CustomDOMTree" pass="return" description="DOM Tree of the data." />
		</method>

		<method name="ClearCustomData" description="Deletes all custom data.">
			<param name="NumberOfDeletedItems" type="uint32" pass="return" description="Returns number of deleted items." />
		</method>
		
		<method name="DeleteCustomData" description="Deletes a custom data instance from the list.">
			<param name="Data" type="class" class="CustomDOMTree" pass="in" description="DOM Tree of the data." />
			<param name="Success" type="bool" pass="return" description="Returns if deletion was successful." />
		</method>

		<method name="RegisterCustomIntegerAttribute" description="Registers an Integer Attribute that each segment holds.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree. MUST not be empty." />
			<param name="AttributeName" type="string" pass="in" description="Attribute name. MUST not be empty." />
		</method>
		
		<method name="RegisterCustomDoubleAttribute" description="Registers a Double Attribute that each segment holds. Registering only applies to reader or writer objects created after the call.">
			<param name="NameSpace" type="string" pass="in" description="Namespace of the custom data tree. MUST not be empty." />
			<param name="AttributeName" type="string" pass="in" description="Attribute name. MUST not be empty." />
		</method>

	</class>	

	<class name="ToolpathIterator" parent="ResourceIterator">
		<method name="GetCurrentToolpath" description="Returns the Toolpath the iterator points at.">
			<param name="Resource" type="handle" class="Toolpath" pass="return" description="returns the Toolpath instance." />
		</method>
	</class>	

	<class name="SliceStack" parent="Resource">
		<method name="GetBottomZ" description="Get the lower Z-Coordinate of the slice stack.">
			<param name="ZBottom" type="double" pass="return" description="the lower Z-Coordinate the slice stack"/>
		</method>
		<method name="GetSliceCount" description="Returns the number of slices">
			<param name="Count" type="uint64" pass="return" description="the number of slices"/>
		</method>
		<method name="GetSlice" description="Query a slice from the slice stack">
			<param name="SliceIndex" type="uint64" pass="in" description="the index of the slice"/>
			<param name="TheSlice" type="handle" class="Slice" pass="return" description="the Slice instance"/>
		</method>
		<method name="AddSlice" description="Returns the number of slices">
			<param name="ZTop" type="double" pass="in" description="upper Z coordinate of the slice"/>
			<param name="TheSlice" type="handle" class="Slice" pass="return" description="a new Slice instance"/>
		</method>
		<method name="GetSliceRefCount" description="Returns the number of slice refs">
			<param name="Count" type="uint64" pass="return" description="the number of slicereferences"/>
		</method>
		<method name="AddSliceStackReference" description="Adds another existing slicestack as sliceref in this slicestack">
			<param name="TheSliceStack" type="handle" class="SliceStack" pass="in" description="the slicestack to use as sliceref"/>
		</method>
		<method name="GetSliceStackReference" description="Adds another existing slicestack as sliceref in this slicestack">
			<param name="SliceRefIndex" type="uint64" pass="in" description="the index of the slice ref"/>
			<param name="TheSliceStack" type="handle" class="SliceStack" pass="return" description="the slicestack that is used as sliceref"/>
		</method>
		<method name="CollapseSliceReferences" description="Removes the indirection of slices via slice-refs, i.e. creates the slices of all slice refs of this SliceStack as actual slices of this SliceStack. All previously existing slices or slicerefs will be removed.">
		</method>
		<method name="SetOwnPath" description="Sets the package path where this Slice should be stored. Input an empty string to reset the path">
			<param name="Path" type="string" pass="in" description="the package path where this Slice should be stored"/>
		</method>
		<method name="GetOwnPath" description="Obtains the package path where this Slice should be stored. Returns an empty string if the slicestack is stored within the root model.">
			<param name="Path" type="string" pass="return" description="the package path where this Slice will be stored"/>
		</method>
	</class>

	<class name="Consumer" parent="Base">
		<method name="GetConsumerID" description="Gets the consumerid">
			<param name="ConsumerID" type="string" pass="return" description="A unique identifier for the consumers"/>
		</method>
		<method name="GetKeyID" description="Getts the keyid">
			<param name="KeyID" type="string" pass="return" description="The identifier for the key of this consumer"/>
		</method>
		<method name="GetKeyValue" description="Gets the keyvalue associated with this consumer">
			<param name="KeyValue" type="string" pass="return" description="The public key, when available, of this consumer"/>
		</method>
	</class>
	
	<enum name="EncryptionAlgorithm">
		<option name="AES256_GCM" value="1" description="http://www.w3.org/2009/xmlenc11#aes256-gcm"/>
	</enum>

	<enum name="WrappingAlgorithm">
		<option name="RSA_OAEP" value="0" description="http://www.w3.org/2009/xmlenc11#rsa-oaep"/>
	</enum>

	<enum name="MgfAlgorithm">
		<option name="MGF1_SHA1" value="160" description="http://www.w3.org/2009/xmlenc11#mgf1sha1"/>
		<option name="MGF1_SHA224" value="224" description="http://www.w3.org/2009/xmlenc11#mgf1sha224"/>
		<option name="MGF1_SHA256" value="256" description="http://www.w3.org/2009/xmlenc11#mgf1sha256"/>
		<option name="MGF1_SHA384" value="384" description="http://www.w3.org/2009/xmlenc11#mgf1sha384"/>
		<option name="MGF1_SHA512" value="512" description="http://www.w3.org/2009/xmlenc11#mgf1sha512"/>
	</enum>

	<enum name="DigestMethod">
		<option name="SHA1" value="160" description="http://www.w3.org/2000/09/xmldsig#sha1"/>
		<option name="SHA256" value="256" description="http://www.w3.org/2001/04/xmlenc#sha256"/>
	</enum>
	
	<class name="AccessRight" parent="Base">
		<method name="GetConsumer" description="Gets the consumer associated with this access right">
			<param name="Consumer" type="class" class="Consumer" pass="return" description="The consumer instance"/>
		</method>
		<method name="GetWrappingAlgorithm" description="Gets the associated encryption algorithm">
			<param name="Algorithm" type="enum" class="WrappingAlgorithm" pass="return" description="The algorithm used for the key in this accessright"/>
		</method>
		<method name="GetMgfAlgorithm" description="Gets the associated mask generation function algorithm">
			<param name="Algorithm" type="enum" class="MgfAlgorithm" pass="return" description="The MFG1 algorithm" />
		</method>
		<method name="GetDigestMethod" description="Gets the digest method assoicated">
			<param name="Algorithm" type="enum" class="DigestMethod" pass="return" description="The digest method for this accessright" />
		</method>
	</class>
	
	<functiontype name="KeyWrappingCallback" description="A callback used to wrap (encrypt) the content key available in keystore resource group">
		<param name="KEKParams" type="class" class="AccessRight" pass="in" description="The information about the parameters used used to wrap the key to the contents"/>
		<param name="InBuffer" type="basicarray" class="uint8" pass="in" description="Buffer to the input value. When encrypting, this should be the plain key. When decrypting, this should be the key cipher."/>
		<param name="OutBuffer" type="basicarray" class="uint8" pass="out" description="Buffer where the data will be placed. When encrypting, this will be the key cipher. When decrypting, this will be the plain key. When buffer is null, neededBytes contains the required bytes to run."/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		<param name="Status" type="uint64" pass="return" description="The needed/encrypted/decrypted bytes when succeed or zero when error."/>
	</functiontype>

	<class name="ContentEncryptionParams" parent="Base">
		<method name="GetEncryptionAlgorithm" description="Returns the encryption method to be used in this encryption process">
			<param name="Algorithm" type="enum" class="EncryptionAlgorithm" pass="return" descripton="The encryption algorith"/>
		</method>
		<method name="GetKey" description="Gets the key for the resource associated">
			<param name="ByteData" type="basicarray" class="uint8" pass="out" description="Pointer to a buffer where to place the key."/>
		</method>
		<method name="GetInitializationVector" description="Gets the IV data">
			<param name="ByteData" type="basicarray" class="uint8" pass="out" description="Pointer to a buffer where to place the data."/>
		</method>
		<method name="GetAuthenticationTag" description="A handler descriptor that uniquely identifies the context of the resource. Each resource will be assigned a different value">
			<param name="ByteData" type="basicarray" class="uint8" pass="out" description="Pointer to a buffer where to place the data."/>
		</method>
		<method name="SetAuthenticationTag" description="Sets the authentication tag">
			<param name="ByteData" type="basicarray" class="uint8" pass="in" description="The authentication tag size"/>
		</method>
		<method name="GetAdditionalAuthenticationData" description="A handler descriptor that uniquely identifies the context of the resource. Each resource will be assigned a different value">
			<param name="ByteData" type="basicarray" class="uint8" pass="out" description="Buffer where the data will be placed"/>
		</method>
		<method name="GetDescriptor" description="A handler descriptor that uniquely identifies the context of the resource. Each resource will be assigned a different value">
			<param name="Descriptor" type="uint64" pass="return" descrption="The resource descriptor" />
		</method>
		<method name="GetKeyUUID" description="Gets the resourcedatagroup keyuuid">
			<param name="UUID" type="string" pass="return" description="The resourcedatagroup keyuuid that may be use to reference an external key"/>
		</method>		
	</class>

	<functiontype name="ContentEncryptionCallback" description="A callback to encrypt/decrypt content called on each resource encrypted. This might be called several times depending on content size. If Input is not available(either null or size is 0), clients must return the result of authenticated tag generation/validation.">
		<param name="CEKParams" type="class" class="ContentEncryptionParams" pass="in" description="The params of the encryption process. Client must set/check AuthenticationTag when closing the encryption/decryption process."/>
		<param name="Input" type="basicarray" class="uint8" pass="in" description="Buffer to the original data. In encrypting, this will be the plain data. If decrypting, this will be the cipher data"/>
		<param name="Output" type="basicarray" class="uint8" pass="out" description="Buffer to hold the transformed data. When encrypting, this will be the cipher data. When decrypting, this shall be the plain data. If buffer is null, neededBytes return the necessary amount of bytes."/>
		<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
		<param name="Status" type="uint64" pass="return" description="The needed/encrypted/decrypted/verified bytes when succeed or zero when error."/>	
	</functiontype>

	<enum name="Compression">
		<option name="NoCompression" value="0" description="No compression applied"/>
		<option name="Deflate" value="1" description="Deflate compression applied"/>
	</enum>
	
	<class name="ResourceData" parent="Base">
		<method name="GetPath" description="Gets the encrypted part path">
			<param name="Path" type="class" class="PackagePart" pass="return" description="The part path"/>
		</method>
		<method name="GetEncryptionAlgorithm" description="Gets the encryption algorithm used to encrypt this ResourceData">
			<param name="EncryptionAlgorithm" type="enum" class="EncryptionAlgorithm" pass="return" description="The encryption algorithm"/>
		</method>
		<method name="GetCompression" description="Tells whether this ResourceData is compressed or not">
			<param name="Compression" type="enum" class="Compression" pass="return" description="The compression method"/>
		</method>
		<method name="GetAdditionalAuthenticationData" description="Tells whether this ResourceData is compressed or not">
			<param name="ByteData" type="basicarray" class="uint8" pass="out" description="The compression method"/>
		</method>
	</class>

	<class name="ResourceDataGroup" parent="Base">
		<method name="GetKeyUUID" description="Sets the resourcedatagroup keyuuid">
			<param name="UUID" type="string" pass="return" description="The new resourcedatagroup keyuuid."/>
		</method>
		<method name="AddAccessRight" description="Add accessright to resourcedatagroup element">
			<param name="Consumer" type="class" class="Consumer" pass="in" description="The Consumer reference"/>
			<param name="WrappingAlgorithm" type="enum" class="WrappingAlgorithm" pass="in" description="The key wrapping algorithm to be used" />
			<param name="MgfAlgorithm" type="enum" class="MgfAlgorithm" pass="in" description="The mask generation function to be used" />
			<param name="DigestMethod" type="enum" class="DigestMethod" pass="in" description="The digest mechanism to be used"/>
			<param name="TheAccessRight" type="handle" class="AccessRight" pass="return" description="The acess right instance"/>
		</method>
		<method name="FindAccessRightByConsumer" description="Finds the AccessRight associated with a Consumer">
			<param name="Consumer" type="class" class="Consumer" pass="in" description="The Consumer instance"/>
			<param name="TheAccessRight" type="optionalclass" class="AccessRight" pass="return" description="The AcessRight instance"/>
		</method>
		<method name="RemoveAccessRight" description="Removes access from a Consumer on this resource data group">
			<param name="Consumer" type="class" class="Consumer" pass="in" description="The Consumer instance"/>
		</method>
	</class>
	<class name="KeyStore" parent="Base">
		<method name="AddConsumer" description="Adds a consumer to the keystore">
			<param name="ConsumerID" type="string" pass="in" description="A unique identifier for the consumer"/>
			<param name="KeyID" type="string" pass="in" description="The id of the key of the consumer"/>
			<param name="KeyValue" type="string" pass="in" description="The public key for this consumer in PEM format"/>
			<param name="Consumer" type="class" class="Consumer" pass="return" description="The consumer instance"/>
		</method> 
		<method name="GetConsumerCount" description="Gets the number of consumers in the keystore">
			<param name="Count" type="uint64" pass="return" description="The consumer count"/>
		</method>
		<method name="GetConsumer" description="Get a consumer from the keystore">
			<param name="ConsumerIndex" type="uint64" pass="in" description="The index of the consumer"/>
			<param name="Consumer" type="class" class="Consumer" pass="return" description="The consumer instance"/>
		</method>
		<method name="RemoveConsumer" description="Removes a consumer from the keystore">
			<param name="Consumer" type="class" class="Consumer" pass="in" description="The consumer instance to remove"/>
		</method>
		<method name="FindConsumer" description="Finds a consumer by ID">
			<param name="ConsumerID" type="string" pass="in" description="The ID of the consumer"/>
			<param name="Consumer" type="optionalclass" class="Consumer" pass="return" description="The consumer instance"/>
		</method>
		<method name="GetResourceDataGroupCount" description="Gets the number of resource data group in the keysore">
			<param name="Count" type="uint64" pass="return" description="The number of resource data available"/>
		</method>
		<method name="AddResourceDataGroup" description="Adds a resource data group into the keystore.">
			<param name="ResourceDataGroup" type="class" class="ResourceDataGroup" pass="return" description="The resource data group instance"/>
		</method>
		<method name="GetResourceDataGroup" description="Gets a resource data group">
			<param name="ResourceDataIndex" type="uint64" pass="in" description="The index of the resource data"/>
			<param name="ResourceDataGroup" type="class" class="ResourceDataGroup" pass="return" description="The resource data group instance"/>
		</method>
		<method name="RemoveResourceDataGroup" description="Removes a resource data group">
			<param name="ResourceDataGroup" type="class" class="ResourceDataGroup" pass="in" description="The resource data group instance"/>
		</method>
		<method name="FindResourceDataGroup" description="Finds a resource data group that contains a particular resourcedata">
			<param name="PartPath" type="class" class="PackagePart" pass="in" description="The target path for the resourcedata hold by the resource data group"/>
			<param name="ResourceDataGroup" type="optionalclass" class="ResourceDataGroup" pass="return" description="The data resource instance"/>
		</method>
		<method name="AddResourceData" description="Add resourcedata to resourcedatagroup element">
			<param name="ResourceDataGroup" type="class" class="ResourceDataGroup" pass="in" description="The resource data group where to add this resource data"/>
			<param name="PartPath" type="class" class="PackagePart" pass="in" description="The path of the part to be encrypted"/>
			<param name="Algorithm" type="enum" class="EncryptionAlgorithm" pass="in" description="The encryption algorithm to be used to encrypt this resource"/>
			<param name="Compression" type="enum" class="Compression" pass="in" description="Whether compression should be used prior to encryption"/>
			<param name="AdditionalAuthenticationData" type="basicarray" class="uint8" pass="in" description="Additional data to be encrypted along the contents for better security" />
			<param name="ResourceData" type="class" class="ResourceData" pass="return" description="The data resource instance"/>
		</method>
		<method name="RemoveResourceData" description="Removes a resource data">
			<param name="ResourceData" type="class" class="ResourceData" pass="in" description="The resource data to be removed"/>
		</method>
		<method name="FindResourceData" description="Finds a resource data on this resource group">
			<param name="ResourcePath" type="class" class="PackagePart" pass="in" description="The target path for the resourcedata"/>
			<param name="ResourceData" type="optionalclass" class="ResourceData" pass="return" description="The resource data instance"/>
		</method>
		<method name="GetResourceDataCount" description="Gets the number of resource data in the keysore">
			<param name="Count" type="uint64" pass="return" description="The number of resource data available"/>
		</method>
		<method name="GetResourceData" description="Gets a resource data">
			<param name="ResourceDataIndex" type="uint64" pass="in" description="The index of the resource data"/>
			<param name="ResourceData" type="class" class="ResourceData" pass="return" description="The data resource instance"/>
		</method>
		<method name="GetUUID" description="Gets the keystore UUID">
			<param name="HasUUID" type="bool" pass="out" description="flag whether the keystore has a UUID"/>
			<param name="UUID" type="string" pass="return" description="returns the keystore uuid."/>
		</method>
		<method name="SetUUID" description="Sets the keystore UUID">
			<param name="UUID" type="string" pass="in" description="The new keystore uuid."/>
		</method>
	</class>

	<class name="Model" parent="Base">
		<method name="RootModelPart" description="Returns the PackagePart within the OPC package that holds the root model.">
			<param name="RootModelPart" type="class" class="PackagePart" pass="return" description="the PackagePart within the OPC package that holds the model-file"/>
		</method>
		<method name="FindOrCreatePackagePart" description="Returns a new PackagePart for use within the OPC package.">
			<param name="AbsolutePath" type="string" pass="in" description="the absolute Path (physical location) within the OPC package"/>
			<param name="ModelPart" type="class" class="PackagePart" pass="return" description="the new PackagePart within the OPC package"/>
		</method>
		<method name="SetUnit" description="sets the units of a model.">
			<param name="Unit" type="enum" class="ModelUnit" pass="in" description="Unit enum value for the model unit"/>
		</method>
		<method name="GetUnit" description="returns the units of a model.">
			<param name="Unit" type="enum" class="ModelUnit" pass="return" description="Unit enum value for the model unit"/>
		</method> 
		<method name="GetLanguage" description="retrieves the language of a model">
			<param name="Language" type="string" pass="return" description="language identifier"/>
		</method>
		<method name="SetLanguage" description="sets the language of a model">
			<param name="Language" type="string" pass="in" description="language identifier"/>
		</method>
		<method name="QueryWriter" description="creates a model writer instance for a specific file type">
			<param name="WriterClass" type="string" pass="in" description=" string identifier for the file type"/>
			<param name="WriterInstance" type="handle" class="Writer" pass="return" description=" string identifier for the file type"/>
		</method>
		<method name="QueryReader" description="creates a model reader instance for a specific file type">
			<param name="ReaderClass" type="string" pass="in" description=" string identifier for the file type"/>
			<param name="ReaderInstance" type="handle" class="Reader" pass="return" description=" string identifier for the file type"/>
		</method>
		<method name="GetResourceByID" description="finds a model resource by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="Resource" type="handle" class="Resource" pass="return" description="returns the resource instance"/>
		</method>
		<method name="GetTexture2DByID" description="finds a model texture by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="TextureInstance" type="handle" class="Texture2D" pass="return" description="returns the texture2d instance"/>
		</method>
		<method name="GetPropertyTypeByID" description="returns a Property's type">
			<param name="UniqueResourceID" type="uint32" pass="in" description="Resource ID of the Property to Query"/>
			<param name="ThePropertyType" type="enum" class="PropertyType" pass="return" description="returns a Property's type"/>
		</method>
		<method name="GetBaseMaterialGroupByID" description="finds a model base material group by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="BaseMaterialGroupInstance" type="handle" class="BaseMaterialGroup" pass="return" description="returns the BaseMaterialGroup instance"/>
		</method>
		<method name="GetTexture2DGroupByID" description="finds a model texture2d group by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="Texture2DGroupInstance" type="handle" class="Texture2DGroup" pass="return" description="returns the Texture2DGroup instance"/>
		</method>
		<method name="GetCompositeMaterialsByID" description="finds a model CompositeMaterials by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="CompositeMaterialsInstance" type="handle" class="CompositeMaterials" pass="return" description="returns the CompositeMaterials instance"/>
		</method>
		<method name="GetMultiPropertyGroupByID" description="finds a model MultiPropertyGroup by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="MultiPropertyGroupInstance" type="handle" class="MultiPropertyGroup" pass="return" description="returns the MultiPropertyGroup instance"/>
		</method>
		<method name="GetMeshObjectByID" description="finds a mesh object by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="MeshObjectInstance" type="handle" class="MeshObject" pass="return" description="returns the mesh object instance"/>
		</method>
		<method name="GetComponentsObjectByID" description="finds a components object by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="ComponentsObjectInstance" type="handle" class="ComponentsObject" pass="return" description="returns the components object instance"/>
		</method>
		<method name="GetColorGroupByID" description="finds a model color group by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="ColorGroupInstance" type="handle" class="ColorGroup" pass="return" description="returns the ColorGroup instance"/>
		</method>
		<method name="GetSliceStackByID" description="finds a model slicestack by its UniqueResourceID">
			<param name="UniqueResourceID" type="uint32" pass="in" description="UniqueResourceID"/>
			<param name="SliceStacInstance" type="handle" class="SliceStack" pass="return" description="returns the slicestack instance"/>
		</method>
		<method name="GetBuildUUID" description="returns, whether a build has a UUID and, if true, the build's UUID">
			<param name="HasUUID" type="bool" pass="out" description="flag whether the build has a UUID"/>
			<param name="UUID" type="string" pass="return" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="SetBuildUUID" description="sets the build's UUID">
			<param name="UUID" type="string" pass="in" description="the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'"/>
		</method>
		<method name="GetBuildItems" description="creates a build item iterator instance with all build items.">
			<param name="BuildItemIterator" type="handle" class="BuildItemIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetOutbox" description="Returns the outbox of a Model">
			<param name="Outbox" type="struct" class="Box" pass="return" description="Outbox of this Model"/>
		</method>
		<method name="GetResources" description="creates a resource iterator instance with all resources.">
			<param name="ResourceIterator" type="handle" class="ResourceIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetObjects" description="creates a resource iterator instance with all object resources.">
			<param name="ResourceIterator" type="handle" class="ObjectIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetMeshObjects" description="creates a resource iterator instance with all mesh object resources.">
			<param name="ResourceIterator" type="handle" class="MeshObjectIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetComponentsObjects" description="creates a resource iterator instance with all components object resources.">
			<param name="ResourceIterator" type="handle" class="ComponentsObjectIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetTexture2Ds" description="creates a Texture2DIterator instance with all texture2d resources.">
			<param name="ResourceIterator" type="handle" class="Texture2DIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetBaseMaterialGroups" description="creates a BaseMaterialGroupIterator instance with all base material resources.">
			<param name="ResourceIterator" type="handle" class="BaseMaterialGroupIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetColorGroups" description="creates a ColorGroupIterator instance with all ColorGroup resources.">
			<param name="ResourceIterator" type="handle" class="ColorGroupIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetTexture2DGroups" description="creates a Texture2DGroupIterator instance with all base material resources.">
			<param name="ResourceIterator" type="handle" class="Texture2DGroupIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetCompositeMaterials" description="creates a CompositeMaterialsIterator instance with all CompositeMaterials resources.">
			<param name="ResourceIterator" type="handle" class="CompositeMaterialsIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetMultiPropertyGroups" description="creates a MultiPropertyGroupsIterator instance with all MultiPropertyGroup resources.">
			<param name="ResourceIterator" type="handle" class="MultiPropertyGroupIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="GetToolpaths" description="creates a Toolpath instance with all toolpath resources.">
			<param name="ResourceIterator" type="handle" class="ToolpathIterator" pass="return" description="returns the iterator instance." />
		</method>		
		
		<method name="GetSliceStacks" description="creates a resource iterator instance with all slice stack resources.">
			<param name="ResourceIterator" type="handle" class="SliceStackIterator" pass="return" description="returns the iterator instance."/>
		</method>
		<method name="MergeToModel" description="Merges all components and objects which are referenced by a build item into a mesh. The memory is duplicated and a new model is created.">
			<param name="MergedModelInstance" type="handle" class="Model" pass="return" description="returns the merged model instance"/>
		</method>
		<method name="AddMeshObject" description="adds an empty mesh object to the model.">
			<param name="MeshObjectInstance" type="handle" class="MeshObject" pass="return" description=" returns the mesh object instance"/>
		</method>
		<method name="AddComponentsObject" description="adds an empty component object to the model.">
			<param name="ComponentsObjectInstance" type="handle" class="ComponentsObject" pass="return" description=" returns the components object instance"/>
		</method>
		<method name="AddSliceStack" description="creates a new model slicestack by its id">
			<param name="ZBottom" type="double" pass="in" description="Bottom Z value of the slicestack"/>
			<param name="SliceStackInstance" type="handle" class="SliceStack" pass="return" description="returns the new slicestack instance"/>
		</method>
		<method name="AddTexture2DFromAttachment" description="adds a texture2d resource to the model. Its path is given by that of an existing attachment.">
			<param name="TextureAttachment" type="handle" class="Attachment" pass="in" description="attachment containing the image data."/>
			<param name="Texture2DInstance" type="handle" class="Texture2D" pass="return" description="returns the new texture instance."/>
		</method>
		<method name="AddBaseMaterialGroup" description="adds an empty BaseMaterialGroup resource to the model.">
			<param name="BaseMaterialGroupInstance" type="handle" class="BaseMaterialGroup" pass="return" description="returns the new base material instance."/>
		</method>
		<method name="AddColorGroup" description="adds an empty ColorGroup resource to the model.">
			<param name="ColorGroupInstance" type="handle" class="ColorGroup" pass="return" description="returns the new ColorGroup instance."/>
		</method>
		<method name="AddTexture2DGroup" description="adds an empty Texture2DGroup resource to the model.">
			<param name="Texture2DInstance" type="handle" class="Texture2D" pass="in" description="The texture2D instance of the created Texture2DGroup."/>
			<param name="Texture2DGroupInstance" type="handle" class="Texture2DGroup" pass="return" description="returns the new Texture2DGroup instance."/>
		</method>
		<method name="AddCompositeMaterials" description="adds an empty CompositeMaterials resource to the model.">
			<param name="BaseMaterialGroupInstance" type="handle" class="BaseMaterialGroup" pass="in" description="The BaseMaterialGroup instance of the created CompositeMaterials."/>
			<param name="CompositeMaterialsInstance" type="handle" class="CompositeMaterials" pass="return" description="returns the new CompositeMaterials instance."/>
		</method>
		<method name="AddMultiPropertyGroup" description="adds an empty MultiPropertyGroup resource to the model.">
			<param name="MultiPropertyGroupInstance" type="handle" class="MultiPropertyGroup" pass="return" description="returns the new MultiPropertyGroup instance."/>
		</method>
		<method name="AddBuildItem" description="adds a build item to the model.">
			<param name="Object" type="handle" class="Object" pass="in" description="Object instance."/>
			<param name="Transform" type="struct" class="Transform" pass="in" description="Transformation matrix."/>
			<param name="BuildItemInstance" type="handle" class="BuildItem" pass="return" description="returns the build item instance."/>
		</method>
		<method name="RemoveBuildItem" description="removes a build item from the model">
			<param name="BuildItemInstance" type="handle" class="BuildItem" pass="in" description="Build item to remove."/>
		</method>
		<method name="AddToolpath" description = "adds an empty Toolpath resource to the model. Bottom Z will be 0 in this case.">
			<param name="UnitFactor" type="double" pass="in" description="A factor that transforms document units into toolpath units." />
			<param name="ToolpathInstance" type="handle" class="Toolpath" pass="return" description="The toolpath instance of the created Toolpath." />
		</method>

		<method name="AddToolpathWithBottomZ" description = "adds an empty Toolpath resource to the model, with a non-standard Bottom Z value.">
			<param name="UnitFactor" type="double" pass="in" description="A factor that transforms document units into toolpath units." />
			<param name="BottomZ" type="uint32" pass="in" description="The bottom Z value to be used in the toolpath." />
			<param name="ToolpathInstance" type="handle" class="Toolpath" pass="return" description="The toolpath instance of the created Toolpath." />
		</method>
		
		<method name="GetMetaDataGroup" description="Returns the metadata of the model as MetaDataGroup">
			<param name="TheMetaDataGroup" type="handle" class="MetaDataGroup" pass="return" description="returns an Instance of the metadatagroup of the model"/>
		</method>
		<method name="AddAttachment" description="adds an attachment stream to the model. The OPC part will be related to the model stream with a certain relationship type.">
			<param name="URI" type="string" pass="in" description="Path of the attachment"/>
			<param name="RelationShipType" type="string" pass="in" description="Relationship type of the attachment"/>
			<param name="AttachmentInstance" type="handle" class="Attachment" pass="return" description="Instance of the attachment object"/>
		</method>
		<method name="RemoveAttachment" description="Removes attachment from the model.">
			<param name="AttachmentInstance" type="handle" class="Attachment" pass="in" description="Attachment instance to remove"/>
		</method>
		<method name="GetAttachment" description="retrieves an attachment stream object from the model..">
			<param name="Index" type="uint32" pass="in" description="Index of the attachment stream"/>
			<param name="AttachmentInstance" type="handle" class="Attachment" pass="return" description="Instance of the attachment object"/>
		</method>
		<method name="FindAttachment" description="retrieves an attachment stream object from the model.">
			<param name="URI" type="string" pass="in" description="Path URI in the package"/>
			<param name="AttachmentInstance" type="handle" class="Attachment" pass="return" description="Instance of the attachment object"/>
		</method>
		<method name="GetAttachmentCount" description="retrieves the number of attachments of the model.">
			<param name="AttachmentCount" type="uint32" pass="return" description="Returns the number of attachments."/>
		</method>
		<method name="HasPackageThumbnailAttachment" description="Retrieve whether the OPC package contains a package thumbnail.">
			<param name="HasThumbnail" type="bool" pass="return" description="returns whether the OPC package contains a package thumbnail"/>
		</method>
		<method name="CreatePackageThumbnailAttachment" description="Create a new or the existing package thumbnail for the OPC package.">
			<param name="Attachment" type="handle" class="Attachment" pass="return" description="Instance of a new or the existing thumbnailattachment object."/>
		</method>
		<method name="GetPackageThumbnailAttachment" description="Get the attachment to the OPC package containing the package thumbnail.">
			<param name="Attachment" type="optionalclass" class="Attachment" pass="return" description="Instance of the thumbnailattachment object or NULL."/>
		</method>
		<method name="RemovePackageThumbnailAttachment" description="Remove the attachment to the OPC package containing the package thumbnail.">
		</method>
		<method name="AddCustomContentType" description="Adds a new Content Type to the model.">
			<param name="Extension" type="string" pass="in" description="File Extension"/>
			<param name="ContentType" type="string" pass="in" description="Content Type Identifier"/>
		</method>
		<method name="RemoveCustomContentType" description="Removes a custom Content Type from the model (UTF8 version).">
			<param name="Extension" type="string" pass="in" description="File Extension"/>
		</method>
		<method name="SetRandomNumberCallback" description="Sets the random number generator callback for use in the library">
			<param name="TheCallback" type="functiontype" class="RandomNumberCallback" pass="in" description="The callback used to generate random numbers"/>
			<param name="UserData" type="pointer" pass="in" description="Userdata to be passed to the callback function"/>
		</method>
		<method name="GetKeyStore" description="Gets the keystore associated with this model">
			<param name="KeyStore" type="handle" class="KeyStore" pass="return" description="The package keystore"/>
		</method>
		
		<method name="CreatePersistentSourceFromFile" description="Creates an OPC Reader Source from a file.">
			<param name="Filename" type="string" pass="in" description="Filename to read from"/>				
			<param name="Instance" type="class" class="PersistentReaderSource" pass="return" description="The instance of the created reader source"/>
		</method>
		<method name="CreatePersistentSourceFromBuffer" description="Creates an OPC Reader Source from a memory buffer. The memory buffer MUST exist as long as the Source object exists.">
			<param name="Buffer" type="basicarray" class="uint8" pass="in" description="Buffer to read from"/>				
			<param name="Instance" type="class" class="PersistentReaderSource" pass="return" description="The instance of the created reader source"/>
		</method>
		<method name="CreatePersistentSourceFromCallback" description="Creates an OPC Reader Source from a data provided by a callback function. The callbacks MUST exist as long as the source object exists.">
			<param name="TheReadCallback" type="functiontype" class="ReadCallback" pass="in" description="Callback to call for reading a data chunk"/>
			<param name="StreamSize" type="uint64" pass="in" description="number of bytes the callback returns"/>
			<param name="TheSeekCallback" type="functiontype" class="SeekCallback" pass="in" description="Callback to call for seeking in the stream."/>
			<param name="UserData" type="pointer" pass="in" description="Userdata that is passed to the callback function"/>
			<param name="Instance" type="class" class="PersistentReaderSource" pass="return" description="The instance of the created reader source"/>
		</method>
		
	</class>

	<global baseclassname="Base" stringoutclassname="Base"  releasemethod="Release" acquiremethod="Acquire" journalmethod="SetJournal" versionmethod="GetLibraryVersion" errormethod="GetLastError" prereleasemethod="GetPrereleaseInformation" buildinfomethod="GetBuildInformation" symbollookupmethod="GetSymbolLookupMethod" classtypeidmethod="ClassTypeId">
		<method name="GetLibraryVersion" description="retrieves the binary version of this library.">
			<param name="Major" type="uint32" pass="out" description="returns the major version of this library"/>
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of this library"/>
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of this library"/>
		</method>
		<method name="GetPrereleaseInformation" description="retrieves prerelease information of this library." disablestringoutcache="1">
			<param name="HasPrereleaseInfo" type="bool" pass="return" description="Does the library provide prerelease version?"/>
			<param name="PrereleaseInfo" type="string" pass="out" description="retrieves prerelease information of this library."/>
		</method>
		<method name="GetBuildInformation" description="retrieves build information of this library." disablestringoutcache="1">
			<param name="HasBuildInfo" type="bool" pass="return" description="Does the library provide build version?"/>
			<param name="BuildInformation" type="string" pass="out" description="retrieves build information of this library."/>
		</method>
		<method name="GetSpecificationVersion" description="retrieves whether a specification is supported, and if so, which version.">
			<param name="SpecificationURL" type="string" pass="in" description="URL of extension to check"/>
			<param name="IsSupported" type="bool" pass="out" description="returns whether this specification is supported"/>
			<param name="Major" type="uint32" pass="out" description="returns the major version of the extension (if IsSupported)"/>
			<param name="Minor" type="uint32" pass="out" description="returns the minor version of the extension (if IsSupported)"/>
			<param name="Micro" type="uint32" pass="out" description="returns the micro version of the extension (if IsSupported)"/>
		</method>
		<method name="CreateModel" description="creates an empty model instance.">
			<param name="Model" type="handle" class="Model" pass="return" description="returns an empty model instance"/>
		</method>
		<method name="Release" description="releases shared ownership of an object instance">
			<param name="Instance" type="handle" class="Base" pass="in" description="the object instance to release"/>
		</method>
		<method name="Acquire" description="acquires shared ownership of an object instance">
			<param name="Instance" type="handle" class="Base" pass="in" description="the object instance to acquire"/>
		</method>
		<method name="SetJournal" description="Sets the journal file path">
			<param name="JournalPath" type="string" pass="in" description="File name of the journal file"/>
		</method>
		<method name="GetLastError" description="Retrieves the last error string of an instance">
			<param name="Instance" type="handle" class="Base" pass="in" description="Object where the error occured."/>
			<param name="LastErrorString" type="string" pass="out" description="Last Error String"/>
			<param name="HasLastError" type="bool" pass="return" description="Returns if the instance has a last error."/>
		</method>
		<method name="GetSymbolLookupMethod" description="Returns the address of the SymbolLookupMethod">
			<param name="SymbolLookupMethod" type="pointer" pass="return" description="Address of the SymbolAddressMethod" />
		</method>
		<method name="RetrieveProgressMessage" description="Return an English text for a progress identifier.|Note: this is the only function you can call from your callback function."  disablestringoutcache="1">
			<param name="TheProgressIdentifier" type="enum" class="ProgressIdentifier" pass="in" description="the progress identifier that is passed to the callback function"/>
			<param name="ProgressMessage" type="string" pass="out" description="English text for the progress identifier"/>
		</method>
		<method name="RGBAToColor" description="Creates a Color from uint8 RGBA values">
			<param name="Red" type="uint8" pass="in" description="Red value of color (0-255)"/>
			<param name="Green" type="uint8" pass="in" description="Green value of color (0-255)"/>
			<param name="Blue" type="uint8" pass="in" description="Blue value of color (0-255)"/>
			<param name="Alpha" type="uint8" pass="in" description="Alpha value of color (0-255)"/>
			<param name="TheColor" type="struct" class="Color" pass="return" description="Assembled color"/>
		</method>
		<method name="FloatRGBAToColor" description="Creates a Color from uint8 RGBA values">
			<param name="Red" type="single" pass="in" description="Red value of color (0-1)"/>
			<param name="Green" type="single" pass="in" description="Green value of color (0-1)"/>
			<param name="Blue" type="single" pass="in" description="Blue value of color (0-1)"/>
			<param name="Alpha" type="single" pass="in" description="Alpha value of color (0-1)"/>
			<param name="TheColor" type="struct" class="Color" pass="return" description="Assembled color"/>
		</method>
		<method name="ColorToRGBA" description="Calculates uint8-RGBA-values from a Color">
			<param name="TheColor" type="struct" class="Color" pass="in" description="Color to handle"/>
			<param name="Red" type="uint8" pass="out" description="Red value of color (0-255)"/>
			<param name="Green" type="uint8" pass="out" description="Green value of color (0-255)"/>
			<param name="Blue" type="uint8" pass="out" description="Blue value of color (0-255)"/>
			<param name="Alpha" type="uint8" pass="out" description="Alpha value of color (0-255)"/>
		</method>
		<method name="ColorToFloatRGBA" description="Calculates float-RGBA-values from a Color">
			<param name="TheColor" type="struct" class="Color" pass="in" description="Color to handle"/>
			<param name="Red" type="single" pass="out" description="Red value of color (0-1)"/>
			<param name="Green" type="single" pass="out" description="Green value of color (0-1)"/>
			<param name="Blue" type="single" pass="out" description="Blue value of color (0-1)"/>
			<param name="Alpha" type="single" pass="out" description="Alpha value of color (0-1)"/>
		</method>
		<method name="GetIdentityTransform" description="Creates an identity transform">
			<param name="Transform" type="struct" class="Transform" pass="return" description="Transformation matrix."/>
		</method>
		<method name="GetUniformScaleTransform" description="Creates a uniform scale transform">
			<param name="Factor" type="single" pass="in" description="Factor in X, Y and Z"/>
			<param name="Transform" type="struct" class="Transform" pass="return" description="Transformation matrix."/>
		</method>
		<method name="GetScaleTransform" description="Creates a scale transform">
			<param name="FactorX" type="single" pass="in" description="Factor in X"/>
			<param name="FactorY" type="single" pass="in" description="Factor in Y"/>
			<param name="FactorZ" type="single" pass="in" description="Factor in Z"/>
			<param name="Transform" type="struct" class="Transform" pass="return" description="Transformation matrix."/>
		</method>
		<method name="GetTranslationTransform" description="Creates an translation transform">
			<param name="VectorX" type="single" pass="in" description="Translation in X"/>
			<param name="VectorY" type="single" pass="in" description="Translation in Y"/>
			<param name="VectorZ" type="single" pass="in" description="Translation in Z"/>
			<param name="Transform" type="struct" class="Transform" pass="return" description="Transformation matrix."/>
		</method>
	</global>

</component>
