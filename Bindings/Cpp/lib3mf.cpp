/*++

Copyright (C) 2018 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Abstract: This is an autogenerated C++ Wrapper Implementation file in order to allow 
an easy use of the 3MF Library
Interface version: 1.2.2

*/

#include "lib3mf.hpp"

#include <vector>

namespace Lib3MF {

/*************************************************************************************************************************
 Class ELib3MFException 
**************************************************************************************************************************/
    ELib3MFException::ELib3MFException(Lib3MFResult errorcode)
       : std::runtime_error ("Lib3MF Error " + std::to_string (errorcode))
    {
        m_errorcode = errorcode;
    }

    Lib3MFResult ELib3MFException::getErrorCode ()
    {
        return m_errorcode;
    }

/*************************************************************************************************************************
 Class CLib3MFBaseClass 
**************************************************************************************************************************/

    CLib3MFBaseClass::CLib3MFBaseClass(Lib3MFHandle pHandle)
    {
        m_pHandle = pHandle;
    }

    CLib3MFBaseClass::~CLib3MFBaseClass()
    {
        CLib3MFWrapper::Release(this);
    }

    void CLib3MFBaseClass::CheckError(Lib3MFResult nResult)
    {
        CLib3MFWrapper::CheckError(m_pHandle, nResult);
    }

    Lib3MFHandle CLib3MFBaseClass::GetHandle()
    {
        return m_pHandle;
    }

     
/*************************************************************************************************************************
 Class CLib3MFWriter 
**************************************************************************************************************************/
    /**
    * CLib3MFWriter::CLib3MFWriter - Constructor for Writer class.
    */
    CLib3MFWriter::CLib3MFWriter (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFWriter::WriteToFile - Writes out the model as file. The file type is specified by the Model Writer class.
    * @param[in] sFilename - Filename to write into
    */
    void CLib3MFWriter::WriteToFile (const std::string & sFilename)
    {
        CheckError ( lib3mf_writer_writetofileutf8 (m_pHandle, sFilename.c_str()) );
    }
    
    /**
    * CLib3MFWriter::GetStreamSize - Retrieves the size of the full 3MF file stream.
    * @param[out] nStreamSize - the stream size
    */
    void CLib3MFWriter::GetStreamSize (unsigned long long & nStreamSize)
    {
        CheckError ( lib3mf_writer_getstreamsize (m_pHandle, &nStreamSize) );
    }
    
    /**
    * CLib3MFWriter::WriteToBuffer - Writes out the 3MF file into a memory buffer
    * @param[out] BufferBuffer - buffer to write into
    */
    void CLib3MFWriter::WriteToBuffer (std::vector<unsigned char> & BufferBuffer)
    {
        unsigned int elementsNeededBuffer = 0;
        unsigned int elementsWrittenBuffer = 0;
        CheckError ( lib3mf_writer_writetobuffer (m_pHandle, 0, &elementsNeededBuffer, nullptr) );
        BufferBuffer.resize(elementsNeededBuffer);
        CheckError ( lib3mf_writer_writetobuffer (m_pHandle, elementsNeededBuffer, &elementsWrittenBuffer, BufferBuffer.data()) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFReader 
**************************************************************************************************************************/
    /**
    * CLib3MFReader::CLib3MFReader - Constructor for Reader class.
    */
    CLib3MFReader::CLib3MFReader (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFReader::ReadFromFile - Reads a model from a file. The file type is specified by the Model Reader class
    * @param[in] sFilename - Filename to read from
    */
    void CLib3MFReader::ReadFromFile (const std::string & sFilename)
    {
        CheckError ( lib3mf_reader_readfromfileutf8 (m_pHandle, sFilename.c_str()) );
    }
    
    /**
    * CLib3MFReader::ReadFromBuffer - Reads a model from a memory buffer.
    * @param[in] BufferBuffer - Buffer to read from
    */
    void CLib3MFReader::ReadFromBuffer (const std::vector<unsigned char> & BufferBuffer)
    {
        CheckError ( lib3mf_reader_readfrombuffer (m_pHandle, (unsigned int)BufferBuffer.size(), BufferBuffer.data()) );
    }
    
    /**
    * CLib3MFReader::AddRelationToRead - Adds a relationship type which shall be read as attachment in memory while loading
    * @param[in] sRelationShipType - String of the relationship type
    */
    void CLib3MFReader::AddRelationToRead (const std::string & sRelationShipType)
    {
        CheckError ( lib3mf_reader_addrelationtoreadutf8 (m_pHandle, sRelationShipType.c_str()) );
    }
    
    /**
    * CLib3MFReader::RemoveRelationToRead - Removes a relationship type which shall be read as attachment in memory while loading
    * @param[in] sRelationShipType - String of the relationship type
    */
    void CLib3MFReader::RemoveRelationToRead (const std::string & sRelationShipType)
    {
        CheckError ( lib3mf_reader_removerelationtoreadutf8 (m_pHandle, sRelationShipType.c_str()) );
    }
    
    /**
    * CLib3MFReader::SetStrictModeActive - Activates (deactivates) the strict mode of the reader.
    * @param[in] bStrictModeActive - flag whether strict mode is active or not.
    */
    void CLib3MFReader::SetStrictModeActive (const bool bStrictModeActive)
    {
        CheckError ( lib3mf_reader_setstrictmodeactive (m_pHandle, bStrictModeActive) );
    }
    
    /**
    * CLib3MFReader::GetStrictModeActive - Queries whether the strict mode of the reader is active or not
    * @return returns flag whether strict mode is active or not.
    */
    bool CLib3MFReader::GetStrictModeActive ()
    {
        bool resultStrictModeActive = 0;
        CheckError ( lib3mf_reader_getstrictmodeactive (m_pHandle, &resultStrictModeActive) );
        return resultStrictModeActive;
    }
    
    /**
    * CLib3MFReader::GetWarning - Returns Warning and Error Information of the read process
    * @param[in] nIndex - Index of the Warning. Valid values are 0 to WarningCount - 1
    * @param[out] nErrorCode - filled with the error code of the warning
    * @return the message of the warning
    */
    std::string CLib3MFReader::GetWarning (const unsigned int nIndex, unsigned int & nErrorCode)
    {
        unsigned int bytesNeededWarning = 0;
        unsigned int bytesWrittenWarning = 0;
        CheckError ( lib3mf_reader_getwarningutf8 (m_pHandle, nIndex, &nErrorCode, 0, &bytesNeededWarning, nullptr) );
        std::vector<char> bufferWarning;
        bufferWarning.resize(bytesNeededWarning + 2);
        CheckError ( lib3mf_reader_getwarningutf8 (m_pHandle, nIndex, &nErrorCode, bytesNeededWarning, &bytesWrittenWarning, &bufferWarning[0]) );
        bufferWarning[bytesNeededWarning + 1] = 0;
        return std::string(&bufferWarning[0]);
    }
    
    /**
    * CLib3MFReader::GetWarningCount - Returns Warning and Error Count of the read process
    * @return filled with the count of the occurred warnings.
    */
    unsigned int CLib3MFReader::GetWarningCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_reader_getwarningcount (m_pHandle, &resultCount) );
        return resultCount;
    }
     
/*************************************************************************************************************************
 Class CLib3MFResource 
**************************************************************************************************************************/
    /**
    * CLib3MFResource::CLib3MFResource - Constructor for Resource class.
    */
    CLib3MFResource::CLib3MFResource (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFResource::GetResourceID - Retrieves the resource id of the resource instance.
    * @return Retrieves the ID of a Model Resource Instance.
    */
    unsigned int CLib3MFResource::GetResourceID ()
    {
        unsigned int resultId = 0;
        CheckError ( lib3mf_resource_getresourceid (m_pHandle, &resultId) );
        return resultId;
    }
     
/*************************************************************************************************************************
 Class CLib3MFResourceIterator 
**************************************************************************************************************************/
    /**
    * CLib3MFResourceIterator::CLib3MFResourceIterator - Constructor for ResourceIterator class.
    */
    CLib3MFResourceIterator::CLib3MFResourceIterator (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFResourceIterator::MoveNext - Iterates to the next resource in the list.
    * @return Iterates to the next resource in the list.
    */
    bool CLib3MFResourceIterator::MoveNext ()
    {
        bool resultHasNext = 0;
        CheckError ( lib3mf_resourceiterator_movenext (m_pHandle, &resultHasNext) );
        return resultHasNext;
    }
    
    /**
    * CLib3MFResourceIterator::MovePrevious - Iterates to the previous resource in the list.
    * @return Iterates to the previous resource in the list.
    */
    bool CLib3MFResourceIterator::MovePrevious ()
    {
        bool resultHasPrevious = 0;
        CheckError ( lib3mf_resourceiterator_moveprevious (m_pHandle, &resultHasPrevious) );
        return resultHasPrevious;
    }
    
    /**
    * CLib3MFResourceIterator::GetCurrent - Returns the resource the iterator points at.
    * @return returns the resource instance.
    */
    PLib3MFResource CLib3MFResourceIterator::GetCurrent ()
    {
        Lib3MFHandle hResource = nullptr;
        CheckError ( lib3mf_resourceiterator_getcurrent (m_pHandle, &hResource) );
        return std::make_shared<CLib3MFResource> (hResource);
    }
    
    /**
    * CLib3MFResourceIterator::Clone - Creates a new resource iterator with the same resource list.
    * @return returns the cloned Iterator instance
    */
    PLib3MFResourceIterator CLib3MFResourceIterator::Clone ()
    {
        Lib3MFHandle hOutResourceIterator = nullptr;
        CheckError ( lib3mf_resourceiterator_clone (m_pHandle, &hOutResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hOutResourceIterator);
    }
     
/*************************************************************************************************************************
 Class CLib3MFPropertyHandler 
**************************************************************************************************************************/
    /**
    * CLib3MFPropertyHandler::CLib3MFPropertyHandler - Constructor for PropertyHandler class.
    */
    CLib3MFPropertyHandler::CLib3MFPropertyHandler (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFPropertyHandler::RemoveProperty - Removes all properties of a specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    */
    void CLib3MFPropertyHandler::RemoveProperty (const unsigned int nIndex)
    {
        CheckError ( lib3mf_propertyhandler_removeproperty (m_pHandle, nIndex) );
    }
    
    /**
    * CLib3MFPropertyHandler::RemoveAllProperties - Removes all properties of the triangle mesh.
    */
    void CLib3MFPropertyHandler::RemoveAllProperties ()
    {
        CheckError ( lib3mf_propertyhandler_removeallproperties (m_pHandle) );
    }
    
    /**
    * CLib3MFPropertyHandler::GetPropertyType - Returns the property type of the specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return property type of the triangle.
    */
    eLib3MFPropertyType CLib3MFPropertyHandler::GetPropertyType (const unsigned int nIndex)
    {
        eLib3MFPropertyType resultPropertyType = (eLib3MFPropertyType) 0;
        CheckError ( lib3mf_propertyhandler_getpropertytype (m_pHandle, nIndex, &resultPropertyType) );
        return resultPropertyType;
    }
    
    /**
    * CLib3MFPropertyHandler::GetBaseMaterial - Returns the base material of a specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
    * @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
    */
    void CLib3MFPropertyHandler::GetBaseMaterial (const unsigned int nIndex, unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex)
    {
        CheckError ( lib3mf_propertyhandler_getbasematerial (m_pHandle, nIndex, &nMaterialGroupId, &nMaterialIndex) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetBaseMaterial - Sets the material of a triangle to a specific single value. All other Triangle properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nMaterialGroupId - Group ID of the Material Group
    * @param[in] nMaterialIndex - Index of the Material in the Group
    */
    void CLib3MFPropertyHandler::SetBaseMaterial (const unsigned int nIndex, const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex)
    {
        CheckError ( lib3mf_propertyhandler_setbasematerial (m_pHandle, nIndex, nMaterialGroupId, nMaterialIndex) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetBaseMaterialArray - Sets the materials of all triangles to specific values.
    * @param[in] MaterialGroupIdsBuffer - array of the material Group IDs. Must have trianglecount entries.
    * @param[in] MaterialIndicesBuffer - array of the corresponding material indices. Must have trianglecount entries.
    */
    void CLib3MFPropertyHandler::SetBaseMaterialArray (const std::vector<unsigned int> & MaterialGroupIdsBuffer, const std::vector<unsigned int> & MaterialIndicesBuffer)
    {
        CheckError ( lib3mf_propertyhandler_setbasematerialarray (m_pHandle, (unsigned int)MaterialGroupIdsBuffer.size(), MaterialGroupIdsBuffer.data(), (unsigned int)MaterialIndicesBuffer.size(), MaterialIndicesBuffer.data()) );
    }
    
    /**
    * CLib3MFPropertyHandler::GetBaseMaterialArray - Gets the materials of all triangles.
    * @param[out] MaterialGroupIdsBuffer - array of the material Group IDs. Must have trianglecount entries.
    * @param[out] MaterialIndicesBuffer - array of the corresponding material indices. Must have trianglecount entries.
    */
    void CLib3MFPropertyHandler::GetBaseMaterialArray (std::vector<unsigned int> & MaterialGroupIdsBuffer, std::vector<unsigned int> & MaterialIndicesBuffer)
    {
        unsigned int elementsNeededMaterialGroupIds = 0;
        unsigned int elementsWrittenMaterialGroupIds = 0;
        unsigned int elementsNeededMaterialIndices = 0;
        unsigned int elementsWrittenMaterialIndices = 0;
        CheckError ( lib3mf_propertyhandler_getbasematerialarray (m_pHandle, 0, &elementsNeededMaterialGroupIds, nullptr, 0, &elementsNeededMaterialIndices, nullptr) );
        MaterialGroupIdsBuffer.resize(elementsNeededMaterialGroupIds);
        MaterialIndicesBuffer.resize(elementsNeededMaterialIndices);
        CheckError ( lib3mf_propertyhandler_getbasematerialarray (m_pHandle, elementsNeededMaterialGroupIds, &elementsWrittenMaterialGroupIds, MaterialGroupIdsBuffer.data(), elementsNeededMaterialIndices, &elementsWrittenMaterialIndices, MaterialIndicesBuffer.data()) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetSingleColor - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] Color - new color value of the triangle. (#00000000) means no color property.
    */
    void CLib3MFPropertyHandler::SetSingleColor (const unsigned int nIndex, const sLib3MFColorRGBA & Color)
    {
        CheckError ( lib3mf_propertyhandler_setsinglecolor (m_pHandle, nIndex, &Color) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    */
    void CLib3MFPropertyHandler::SetSingleColorRGB (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue)
    {
        CheckError ( lib3mf_propertyhandler_setsinglecolorrgb (m_pHandle, nIndex, nRed, nGreen, nBlue) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorRGBA - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    * @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
    */
    void CLib3MFPropertyHandler::SetSingleColorRGBA (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha)
    {
        CheckError ( lib3mf_propertyhandler_setsinglecolorrgba (m_pHandle, nIndex, nRed, nGreen, nBlue, nAlpha) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorFloatRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    */
    void CLib3MFPropertyHandler::SetSingleColorFloatRGB (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue)
    {
        CheckError ( lib3mf_propertyhandler_setsinglecolorfloatrgb (m_pHandle, nIndex, fRed, fGreen, fBlue) );
    }
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorFloatRGBA - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    * @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
    */
    void CLib3MFPropertyHandler::SetSingleColorFloatRGBA (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha)
    {
        CheckError ( lib3mf_propertyhandler_setsinglecolorfloatrgba (m_pHandle, nIndex, fRed, fGreen, fBlue, fAlpha) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFDefaultPropertyHandler 
**************************************************************************************************************************/
    /**
    * CLib3MFDefaultPropertyHandler::CLib3MFDefaultPropertyHandler - Constructor for DefaultPropertyHandler class.
    */
    CLib3MFDefaultPropertyHandler::CLib3MFDefaultPropertyHandler (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFDefaultPropertyHandler::RemoveProperty - Removes the default property of the object.
    */
    void CLib3MFDefaultPropertyHandler::RemoveProperty ()
    {
        CheckError ( lib3mf_defaultpropertyhandler_removeproperty (m_pHandle) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::GetPropertyType - Returns the default property type of the object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return property type of the triangle.
    */
    eLib3MFPropertyType CLib3MFDefaultPropertyHandler::GetPropertyType (const unsigned int nIndex)
    {
        eLib3MFPropertyType resultPropertyType = (eLib3MFPropertyType) 0;
        CheckError ( lib3mf_defaultpropertyhandler_getpropertytype (m_pHandle, nIndex, &resultPropertyType) );
        return resultPropertyType;
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::GetBaseMaterial - Returns the base material the object.
    * @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
    * @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
    */
    void CLib3MFDefaultPropertyHandler::GetBaseMaterial (unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex)
    {
        CheckError ( lib3mf_defaultpropertyhandler_getbasematerial (m_pHandle, &nMaterialGroupId, &nMaterialIndex) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetBaseMaterial - Sets the material of an object to a specific single value. This must be a base material.
    * @param[in] nMaterialGroupId - Group ID of the Material Group
    * @param[in] nMaterialIndex - Index of the Material in the Group
    */
    void CLib3MFDefaultPropertyHandler::SetBaseMaterial (const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex)
    {
        CheckError ( lib3mf_defaultpropertyhandler_setbasematerial (m_pHandle, nMaterialGroupId, nMaterialIndex) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetColorRGB - Sets the default property of an object to a single color.
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    */
    void CLib3MFDefaultPropertyHandler::SetColorRGB (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue)
    {
        CheckError ( lib3mf_defaultpropertyhandler_setcolorrgb (m_pHandle, nRed, nGreen, nBlue) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetColorRGBA - Sets the default property of an object to a single color.
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    * @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
    */
    void CLib3MFDefaultPropertyHandler::SetColorRGBA (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha)
    {
        CheckError ( lib3mf_defaultpropertyhandler_setcolorrgba (m_pHandle, nRed, nGreen, nBlue, nAlpha) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetFloatColorRGB - Sets the default property of an object to a single color.
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    */
    void CLib3MFDefaultPropertyHandler::SetFloatColorRGB (const float fRed, const float fGreen, const float fBlue)
    {
        CheckError ( lib3mf_defaultpropertyhandler_setfloatcolorrgb (m_pHandle, fRed, fGreen, fBlue) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetFloatColorRGBA - Sets the default property of an object to a single color.
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    * @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
    */
    void CLib3MFDefaultPropertyHandler::SetFloatColorRGBA (const float fRed, const float fGreen, const float fBlue, const float fAlpha)
    {
        CheckError ( lib3mf_defaultpropertyhandler_setfloatcolorrgba (m_pHandle, fRed, fGreen, fBlue, fAlpha) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::GetTexture - Returns the default 2D texture information of an object.
    * @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
    * @param[out] fU - Returns the default U value of the object.
    * @param[out] fV - Returns the default V value of the object.
    */
    void CLib3MFDefaultPropertyHandler::GetTexture (unsigned int & nTextureID, float & fU, float & fV)
    {
        CheckError ( lib3mf_defaultpropertyhandler_gettexture (m_pHandle, &nTextureID, &fU, &fV) );
    }
    
    /**
    * CLib3MFDefaultPropertyHandler::SetTexture - Sets the default 2D texture information of an object.
    * @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
    * @param[out] fU - Returns the default U value of the object.
    * @param[out] fV - Returns the default V value of the object.
    */
    void CLib3MFDefaultPropertyHandler::SetTexture (unsigned int & nTextureID, float & fU, float & fV)
    {
        CheckError ( lib3mf_defaultpropertyhandler_settexture (m_pHandle, &nTextureID, &fU, &fV) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFMetaData 
**************************************************************************************************************************/
    /**
    * CLib3MFMetaData::CLib3MFMetaData - Constructor for MetaData class.
    */
    CLib3MFMetaData::CLib3MFMetaData (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFMetaData::GetNameSpace - returns the namespace URL of the metadata
    * @return the namespace URL of the metadata
    */
    std::string CLib3MFMetaData::GetNameSpace ()
    {
        unsigned int bytesNeededNameSpace = 0;
        unsigned int bytesWrittenNameSpace = 0;
        CheckError ( lib3mf_metadata_getnamespaceutf8 (m_pHandle, 0, &bytesNeededNameSpace, nullptr) );
        std::vector<char> bufferNameSpace;
        bufferNameSpace.resize(bytesNeededNameSpace + 2);
        CheckError ( lib3mf_metadata_getnamespaceutf8 (m_pHandle, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0]) );
        bufferNameSpace[bytesNeededNameSpace + 1] = 0;
        return std::string(&bufferNameSpace[0]);
    }
    
    /**
    * CLib3MFMetaData::SetNameSpace - sets a new namespace URL of the metadata
    * @param[in] sNameSpace - the new namespace URL of the metadata
    */
    void CLib3MFMetaData::SetNameSpace (const std::string & sNameSpace)
    {
        CheckError ( lib3mf_metadata_setnamespaceutf8 (m_pHandle, sNameSpace.c_str()) );
    }
    
    /**
    * CLib3MFMetaData::GetName - returns the name of a metadata
    * @return the name of the metadata
    */
    std::string CLib3MFMetaData::GetName ()
    {
        unsigned int bytesNeededName = 0;
        unsigned int bytesWrittenName = 0;
        CheckError ( lib3mf_metadata_getnameutf8 (m_pHandle, 0, &bytesNeededName, nullptr) );
        std::vector<char> bufferName;
        bufferName.resize(bytesNeededName + 2);
        CheckError ( lib3mf_metadata_getnameutf8 (m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]) );
        bufferName[bytesNeededName + 1] = 0;
        return std::string(&bufferName[0]);
    }
    
    /**
    * CLib3MFMetaData::SetName - sets a new name of a metadata
    * @param[in] sName - the new name of the metadata
    */
    void CLib3MFMetaData::SetName (const std::string & sName)
    {
        CheckError ( lib3mf_metadata_setnameutf8 (m_pHandle, sName.c_str()) );
    }
    
    /**
    * CLib3MFMetaData::GetMustPreserve - returns, whether a metadata must be preserved
    * @return returns, whether a metadata must be preserved
    */
    bool CLib3MFMetaData::GetMustPreserve ()
    {
        bool resultMustPreserve = 0;
        CheckError ( lib3mf_metadata_getmustpreserveutf8 (m_pHandle, &resultMustPreserve) );
        return resultMustPreserve;
    }
    
    /**
    * CLib3MFMetaData::SetMustPreserve - sets whether a metadata must be preserved
    * @param[in] bMustPreserve - a new value whether a metadata must be preserved
    */
    void CLib3MFMetaData::SetMustPreserve (const bool bMustPreserve)
    {
        CheckError ( lib3mf_metadata_setmustpreserveutf8 (m_pHandle, bMustPreserve) );
    }
    
    /**
    * CLib3MFMetaData::GetType - returns the type of a metadata
    * @return the type of the metadata
    */
    std::string CLib3MFMetaData::GetType ()
    {
        unsigned int bytesNeededType = 0;
        unsigned int bytesWrittenType = 0;
        CheckError ( lib3mf_metadata_gettypeutf8 (m_pHandle, 0, &bytesNeededType, nullptr) );
        std::vector<char> bufferType;
        bufferType.resize(bytesNeededType + 2);
        CheckError ( lib3mf_metadata_gettypeutf8 (m_pHandle, bytesNeededType, &bytesWrittenType, &bufferType[0]) );
        bufferType[bytesNeededType + 1] = 0;
        return std::string(&bufferType[0]);
    }
    
    /**
    * CLib3MFMetaData::SetType - sets a new type of a metadata. This must be a simple XML type
    * @param[in] sType - a new type of the metadata
    */
    void CLib3MFMetaData::SetType (const std::string & sType)
    {
        CheckError ( lib3mf_metadata_settypeutf8 (m_pHandle, sType.c_str()) );
    }
    
    /**
    * CLib3MFMetaData::GetValue - returns the value of the metadata
    * @return the value of the metadata
    */
    std::string CLib3MFMetaData::GetValue ()
    {
        unsigned int bytesNeededValue = 0;
        unsigned int bytesWrittenValue = 0;
        CheckError ( lib3mf_metadata_getvalueutf8 (m_pHandle, 0, &bytesNeededValue, nullptr) );
        std::vector<char> bufferValue;
        bufferValue.resize(bytesNeededValue + 2);
        CheckError ( lib3mf_metadata_getvalueutf8 (m_pHandle, bytesNeededValue, &bytesWrittenValue, &bufferValue[0]) );
        bufferValue[bytesNeededValue + 1] = 0;
        return std::string(&bufferValue[0]);
    }
    
    /**
    * CLib3MFMetaData::SetValue - sets a new value of the metadata
    * @param[in] sValue - a new value of the metadata
    */
    void CLib3MFMetaData::SetValue (const std::string & sValue)
    {
        CheckError ( lib3mf_metadata_setvalueutf8 (m_pHandle, sValue.c_str()) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFMetaDataGroup 
**************************************************************************************************************************/
    /**
    * CLib3MFMetaDataGroup::CLib3MFMetaDataGroup - Constructor for MetaDataGroup class.
    */
    CLib3MFMetaDataGroup::CLib3MFMetaDataGroup (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataCount - returns the number of metadata in this metadatagroup
    * @return returns the number metadata
    */
    unsigned int CLib3MFMetaDataGroup::GetMetaDataCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_metadatagroup_getmetadatacount (m_pHandle, &resultCount) );
        return resultCount;
    }
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataKey - returns a metadata key within this metadatagroup
    * @param[in] nIndex - Index of the metadata.
    * @param[out] sNameSpace - the namespace of the metadata
    * @param[out] sName - the name of the metadata
    */
    void CLib3MFMetaDataGroup::GetMetaDataKey (const unsigned int nIndex, std::string & sNameSpace, std::string & sName)
    {
        unsigned int bytesNeededNameSpace = 0;
        unsigned int bytesWrittenNameSpace = 0;
        unsigned int bytesNeededName = 0;
        unsigned int bytesWrittenName = 0;
        CheckError ( lib3mf_metadatagroup_getmetadatakeyutf8 (m_pHandle, nIndex, 0, &bytesNeededNameSpace, nullptr, 0, &bytesNeededName, nullptr) );
        std::vector<char> bufferNameSpace;
        bufferNameSpace.resize(bytesNeededNameSpace + 2);
        std::vector<char> bufferName;
        bufferName.resize(bytesNeededName + 2);
        CheckError ( lib3mf_metadatagroup_getmetadatakeyutf8 (m_pHandle, nIndex, bytesNeededNameSpace, &bytesWrittenNameSpace, &bufferNameSpace[0], bytesNeededName, &bytesWrittenName, &bufferName[0]) );
        bufferNameSpace[bytesNeededNameSpace + 1] = 0;
        sNameSpace = std::string(&bufferNameSpace[0]);
        bufferName[bytesNeededName + 1] = 0;
        sName = std::string(&bufferName[0]);
    }
    
    /**
    * CLib3MFMetaDataGroup::GetMetaData - returns a metadata value within this metadatagroup
    * @param[in] nIndex - Index of the Metadata.
    * @return an instance of the metadata
    */
    PLib3MFMetaData CLib3MFMetaDataGroup::GetMetaData (const unsigned int nIndex)
    {
        Lib3MFHandle hMetaData = nullptr;
        CheckError ( lib3mf_metadatagroup_getmetadatautf8 (m_pHandle, nIndex, &hMetaData) );
        return std::make_shared<CLib3MFMetaData> (hMetaData);
    }
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataByKey - returns a metadata value within this metadatagroup
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the Metadata
    * @return an instance of the metadata
    */
    PLib3MFMetaData CLib3MFMetaDataGroup::GetMetaDataByKey (const std::string & sNameSpace, const std::string & sName)
    {
        Lib3MFHandle hMetaData = nullptr;
        CheckError ( lib3mf_metadatagroup_getmetadatabykeyutf8 (m_pHandle, sNameSpace.c_str(), sName.c_str(), &hMetaData) );
        return std::make_shared<CLib3MFMetaData> (hMetaData);
    }
    
    /**
    * CLib3MFMetaDataGroup::RemoveMetaData - removes metadata pair from the model.
    * @param[in] nIndex -  Index of the metadata
    */
    void CLib3MFMetaDataGroup::RemoveMetaData (const unsigned int nIndex)
    {
        CheckError ( lib3mf_metadatagroup_removemetadata (m_pHandle, nIndex) );
    }
    
    /**
    * CLib3MFMetaDataGroup::RemoveMetaDataByKey - removes metadata pair from the model.
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the metadata
    */
    void CLib3MFMetaDataGroup::RemoveMetaDataByKey (const std::string & sNameSpace, const std::string & sName)
    {
        CheckError ( lib3mf_metadatagroup_removemetadatabykey (m_pHandle, sNameSpace.c_str(), sName.c_str()) );
    }
    
    /**
    * CLib3MFMetaDataGroup::AddMetaData - adds a new metadata to this metadatagroup
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the metadata
    * @return an instance of the metadata
    */
    PLib3MFMetaData CLib3MFMetaDataGroup::AddMetaData (const std::string & sNameSpace, const std::string & sName)
    {
        Lib3MFHandle hMetaData = nullptr;
        CheckError ( lib3mf_metadatagroup_addmetadatautf8 (m_pHandle, sNameSpace.c_str(), sName.c_str(), &hMetaData) );
        return std::make_shared<CLib3MFMetaData> (hMetaData);
    }
     
/*************************************************************************************************************************
 Class CLib3MFObject 
**************************************************************************************************************************/
    /**
    * CLib3MFObject::CLib3MFObject - Constructor for Object class.
    */
    CLib3MFObject::CLib3MFObject (Lib3MFHandle pHandle)
     : CLib3MFResource (pHandle)
    { }
    
    /**
    * CLib3MFObject::GetType - Retrieves a object's type
    * @return returns object type enum.
    */
    eLib3MFObjectType CLib3MFObject::GetType ()
    {
        eLib3MFObjectType resultObjectType = (eLib3MFObjectType) 0;
        CheckError ( lib3mf_object_gettype (m_pHandle, &resultObjectType) );
        return resultObjectType;
    }
    
    /**
    * CLib3MFObject::SetType - Sets an object's type
    * @param[in] eObjectType - object type enum.
    */
    void CLib3MFObject::SetType (const eLib3MFObjectType eObjectType)
    {
        CheckError ( lib3mf_object_settype (m_pHandle, eObjectType) );
    }
    
    /**
    * CLib3MFObject::GetName - Retrieves an object's name
    * @return returns object name.
    */
    std::string CLib3MFObject::GetName ()
    {
        unsigned int bytesNeededName = 0;
        unsigned int bytesWrittenName = 0;
        CheckError ( lib3mf_object_getnameutf8 (m_pHandle, 0, &bytesNeededName, nullptr) );
        std::vector<char> bufferName;
        bufferName.resize(bytesNeededName + 2);
        CheckError ( lib3mf_object_getnameutf8 (m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]) );
        bufferName[bytesNeededName + 1] = 0;
        return std::string(&bufferName[0]);
    }
    
    /**
    * CLib3MFObject::SetName - Sets an object's name string
    * @param[in] sName - new object name.
    */
    void CLib3MFObject::SetName (const std::string & sName)
    {
        CheckError ( lib3mf_object_setnameutf8 (m_pHandle, sName.c_str()) );
    }
    
    /**
    * CLib3MFObject::GetPartNumber - Retrieves an object's part number
    * @return returns object part number.
    */
    std::string CLib3MFObject::GetPartNumber ()
    {
        unsigned int bytesNeededPartNumber = 0;
        unsigned int bytesWrittenPartNumber = 0;
        CheckError ( lib3mf_object_getpartnumberutf8 (m_pHandle, 0, &bytesNeededPartNumber, nullptr) );
        std::vector<char> bufferPartNumber;
        bufferPartNumber.resize(bytesNeededPartNumber + 2);
        CheckError ( lib3mf_object_getpartnumberutf8 (m_pHandle, bytesNeededPartNumber, &bytesWrittenPartNumber, &bufferPartNumber[0]) );
        bufferPartNumber[bytesNeededPartNumber + 1] = 0;
        return std::string(&bufferPartNumber[0]);
    }
    
    /**
    * CLib3MFObject::SetPartNumber - Sets an object's partnumber string
    * @param[in] sPartNumber - new object part number.
    */
    void CLib3MFObject::SetPartNumber (const std::string & sPartNumber)
    {
        CheckError ( lib3mf_object_setpartnumberutf8 (m_pHandle, sPartNumber.c_str()) );
    }
    
    /**
    * CLib3MFObject::IsMeshObject - Retrieves, if an object is a mesh object
    * @return returns, whether the object is a mesh object
    */
    bool CLib3MFObject::IsMeshObject ()
    {
        bool resultIsMeshObject = 0;
        CheckError ( lib3mf_object_ismeshobject (m_pHandle, &resultIsMeshObject) );
        return resultIsMeshObject;
    }
    
    /**
    * CLib3MFObject::IsComponentsObject - Retrieves, if an object is a components object
    * @return returns, whether the object is a components object
    */
    bool CLib3MFObject::IsComponentsObject ()
    {
        bool resultIsComponentsObject = 0;
        CheckError ( lib3mf_object_iscomponentsobject (m_pHandle, &resultIsComponentsObject) );
        return resultIsComponentsObject;
    }
    
    /**
    * CLib3MFObject::IsValid - Retrieves, if the object is valid according to the core spec.|For mesh objects, we distinguish between the type attribute of the object:|In case of object type 'other', this always means 'false'.|In case of object type 'model' or 'solidsupport', this means, if the mesh suffices all requirements of the core spec chapter 4.1.|In case of object type 'support' or 'surface', this always means 'true'.|A component objects is valid if and only if it contains at least one component and all child components are valid objects.
    * @return returns, whether the object is a valid object description
    */
    bool CLib3MFObject::IsValid ()
    {
        bool resultIsValid = 0;
        CheckError ( lib3mf_object_isvalid (m_pHandle, &resultIsValid) );
        return resultIsValid;
    }
    
    /**
    * CLib3MFObject::HasMetaDataGroup - Returns whether the object has a metadatagroup
    * @return returns whether the object has a metadatagroup
    */
    bool CLib3MFObject::HasMetaDataGroup ()
    {
        bool resultHasMetaDataGroup = 0;
        CheckError ( lib3mf_object_hasmetadatagroup (m_pHandle, &resultHasMetaDataGroup) );
        return resultHasMetaDataGroup;
    }
    
    /**
    * CLib3MFObject::GetMetaDataGroup - Returns the metadatagroup of this object
    * @return returns an Instance of the metadatagroup of this object
    */
    PLib3MFMetaDataGroup CLib3MFObject::GetMetaDataGroup ()
    {
        Lib3MFHandle hMetaDataGroup = nullptr;
        CheckError ( lib3mf_object_getmetadatagroup (m_pHandle, &hMetaDataGroup) );
        return std::make_shared<CLib3MFMetaDataGroup> (hMetaDataGroup);
    }
    
    /**
    * CLib3MFObject::CreateMetaDataGroup - Creates a new metadatagroup for this object
    * @return returns an Instance of a new metadatagroup for this object
    */
    PLib3MFMetaDataGroup CLib3MFObject::CreateMetaDataGroup ()
    {
        Lib3MFHandle hMetaDataGroup = nullptr;
        CheckError ( lib3mf_object_createmetadatagroup (m_pHandle, &hMetaDataGroup) );
        return std::make_shared<CLib3MFMetaDataGroup> (hMetaDataGroup);
    }
    
    /**
    * CLib3MFObject::RemoveMetaDataGroup - Removes the object's metadatagroup
    */
    void CLib3MFObject::RemoveMetaDataGroup ()
    {
        CheckError ( lib3mf_object_removemetadatagroup (m_pHandle) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFMeshObject 
**************************************************************************************************************************/
    /**
    * CLib3MFMeshObject::CLib3MFMeshObject - Constructor for MeshObject class.
    */
    CLib3MFMeshObject::CLib3MFMeshObject (Lib3MFHandle pHandle)
     : CLib3MFObject (pHandle)
    { }
    
    /**
    * CLib3MFMeshObject::GetVertexCount - Returns the vertex count of a mesh object.
    * @return filled with the vertex count.
    */
    unsigned int CLib3MFMeshObject::GetVertexCount ()
    {
        unsigned int resultVertexCount = 0;
        CheckError ( lib3mf_meshobject_getvertexcount (m_pHandle, &resultVertexCount) );
        return resultVertexCount;
    }
    
    /**
    * CLib3MFMeshObject::GetTriangleCount - Returns the triangle count of a mesh object.
    * @return filled with the triangle count.
    */
    unsigned int CLib3MFMeshObject::GetTriangleCount ()
    {
        unsigned int resultVertexCount = 0;
        CheckError ( lib3mf_meshobject_gettrianglecount (m_pHandle, &resultVertexCount) );
        return resultVertexCount;
    }
    
    /**
    * CLib3MFMeshObject::SetVertex - Sets the coordinates of a single vertex of a mesh object
    * @param[in] nIndex - Index of the vertex (0 to vertexcount - 1)
    * @param[in] Coordinates - contains the vertex coordinates.
    */
    void CLib3MFMeshObject::SetVertex (const unsigned int nIndex, const sLib3MFPosition & Coordinates)
    {
        CheckError ( lib3mf_meshobject_setvertex (m_pHandle, nIndex, &Coordinates) );
    }
    
    /**
    * CLib3MFMeshObject::AddVertex - Adds a single vertex to a mesh object
    * @param[in] Coordinates - contains the vertex coordinates.
    * @return Index of the new vertex
    */
    unsigned int CLib3MFMeshObject::AddVertex (const sLib3MFPosition & Coordinates)
    {
        unsigned int resultNewIndex = 0;
        CheckError ( lib3mf_meshobject_addvertex (m_pHandle, &Coordinates, &resultNewIndex) );
        return resultNewIndex;
    }
    
    /**
    * CLib3MFMeshObject::GetTriangle - Returns indices of a single triangle of a mesh object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return filled with the triangle indices.
    */
    sLib3MFTriangle CLib3MFMeshObject::GetTriangle (const unsigned int nIndex)
    {
        sLib3MFTriangle resultIndices;
        CheckError ( lib3mf_meshobject_gettriangle (m_pHandle, nIndex, &resultIndices) );
        return resultIndices;
    }
    
    /**
    * CLib3MFMeshObject::SetTriangle - Sets the indices of a single triangle of a mesh object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] Indices - contains the triangle indices.
    */
    void CLib3MFMeshObject::SetTriangle (const unsigned int nIndex, const sLib3MFTriangle & Indices)
    {
        CheckError ( lib3mf_meshobject_settriangle (m_pHandle, nIndex, &Indices) );
    }
    
    /**
    * CLib3MFMeshObject::AddTriangle - Adds a single triangle to a mesh object
    * @param[in] Indices - contains the triangle indices.
    * @return Index of the new triangle
    */
    unsigned int CLib3MFMeshObject::AddTriangle (const sLib3MFTriangle & Indices)
    {
        unsigned int resultNewIndex = 0;
        CheckError ( lib3mf_meshobject_addtriangle (m_pHandle, &Indices, &resultNewIndex) );
        return resultNewIndex;
    }
    
    /**
    * CLib3MFMeshObject::GetTriangleIndices - Get all triangles of a mesh object
    * @param[out] IndicesBuffer - contains the triangle indices.
    */
    void CLib3MFMeshObject::GetTriangleIndices (std::vector<sLib3MFTriangle> & IndicesBuffer)
    {
        unsigned int elementsNeededIndices = 0;
        unsigned int elementsWrittenIndices = 0;
        CheckError ( lib3mf_meshobject_gettriangleindices (m_pHandle, 0, &elementsNeededIndices, nullptr) );
        IndicesBuffer.resize(elementsNeededIndices);
        CheckError ( lib3mf_meshobject_gettriangleindices (m_pHandle, elementsNeededIndices, &elementsWrittenIndices, IndicesBuffer.data()) );
    }
    
    /**
    * CLib3MFMeshObject::SetTriangleIndices - Set all triangles of a mesh object
    * @param[in] IndicesBuffer - contains the triangle indices.
    */
    void CLib3MFMeshObject::SetTriangleIndices (const std::vector<sLib3MFTriangle> & IndicesBuffer)
    {
        CheckError ( lib3mf_meshobject_settriangleindices (m_pHandle, (unsigned int)IndicesBuffer.size(), IndicesBuffer.data()) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_MinLength - Returns the minimal length of beams for the beamlattice.
    * @return minimal length of beams for the beamlattice
    */
    double CLib3MFMeshObject::GetBeamLattice_MinLength ()
    {
        double resultMinLength = 0;
        CheckError ( lib3mf_meshobject_getbeamlattice_minlength (m_pHandle, &resultMinLength) );
        return resultMinLength;
    }
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_MinLength - Sets the minimal length of beams for the beamlattice.
    * @param[in] dMinLength - minimal length of beams for the beamlattice
    */
    void CLib3MFMeshObject::SetBeamLattice_MinLength (const double dMinLength)
    {
        CheckError ( lib3mf_meshobject_setbeamlattice_minlength (m_pHandle, dMinLength) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Radius - Returns the default radius for the beamlattice.
    * @return default radius of the beams in the beamlattice
    */
    double CLib3MFMeshObject::GetBeamLattice_Radius ()
    {
        double resultRadius = 0;
        CheckError ( lib3mf_meshobject_getbeamlattice_radius (m_pHandle, &resultRadius) );
        return resultRadius;
    }
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Radius - Sets the default radius for the beamlattice.
    * @param[in] dRadius - default radius of the beams in the beamlattice
    */
    void CLib3MFMeshObject::SetBeamLattice_Radius (const double dRadius)
    {
        CheckError ( lib3mf_meshobject_setbeamlattice_radius (m_pHandle, dRadius) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_CapMode - Returns the default capping mode for the beamlattice.
    * @return default cap mode of the beamlattice
    */
    eLib3MFBeamLatticeCapMode CLib3MFMeshObject::GetBeamLattice_CapMode ()
    {
        eLib3MFBeamLatticeCapMode resultCapMode = (eLib3MFBeamLatticeCapMode) 0;
        CheckError ( lib3mf_meshobject_getbeamlattice_capmode (m_pHandle, &resultCapMode) );
        return resultCapMode;
    }
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_CapMode - Sets the default capping mode for the beamlattice.
    * @param[in] eCapMode - default cap mode of the beamlattice
    */
    void CLib3MFMeshObject::SetBeamLattice_CapMode (const eLib3MFBeamLatticeCapMode eCapMode)
    {
        CheckError ( lib3mf_meshobject_setbeamlattice_capmode (m_pHandle, eCapMode) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Clipping - Returns the clipping mode and the clipping-mesh for the beamlattice of this mesh.
    * @param[out] eClipMode - contains the clip mode of this mesh
    * @param[out] nResourceID - filled with the resourceID of the clipping mesh-object or an undefined value if pClipMode is MODELBEAMLATTICECLIPMODE_NONE
    */
    void CLib3MFMeshObject::GetBeamLattice_Clipping (eLib3MFBeamLatticeClipMode & eClipMode, unsigned int & nResourceID)
    {
        CheckError ( lib3mf_meshobject_getbeamlattice_clipping (m_pHandle, &eClipMode, &nResourceID) );
    }
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Clipping - Sets the clipping mode and the clipping-mesh for the beamlattice of this mesh.
    * @param[in] eClipMode - contains the clip mode of this mesh
    * @param[in] nResourceID - the resourceID of the clipping mesh-object. This mesh-object has to be defined before setting the Clipping.
    */
    void CLib3MFMeshObject::SetBeamLattice_Clipping (const eLib3MFBeamLatticeClipMode eClipMode, const unsigned int nResourceID)
    {
        CheckError ( lib3mf_meshobject_setbeamlattice_clipping (m_pHandle, eClipMode, nResourceID) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Representation - Returns the representation-mesh for the beamlattice of this mesh.
    * @param[out] bHasRepresentation - flag whether the beamlattice has a representation mesh.
    * @param[out] nResourceID - filled with the resourceID of the clipping mesh-object.
    */
    void CLib3MFMeshObject::GetBeamLattice_Representation (bool & bHasRepresentation, unsigned int & nResourceID)
    {
        CheckError ( lib3mf_meshobject_getbeamlattice_representation (m_pHandle, &bHasRepresentation, &nResourceID) );
    }
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Representation - Sets the representation-mesh for the beamlattice of this mesh.
    * @param[in] nResourceID - the resourceID of the representation mesh-object. This mesh-object has to be defined before setting the representation.
    */
    void CLib3MFMeshObject::SetBeamLattice_Representation (const unsigned int nResourceID)
    {
        CheckError ( lib3mf_meshobject_setbeamlattice_representation (m_pHandle, nResourceID) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamCount - Returns the beam count of a mesh object.
    * @return filled with the beam count.
    */
    unsigned int CLib3MFMeshObject::GetBeamCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_meshobject_getbeamcount (m_pHandle, &resultCount) );
        return resultCount;
    }
    
    /**
    * CLib3MFMeshObject::AddBeam - Adds a single beam to a mesh object.
    * @param[in] BeamInfo - contains the node indices, radii and capmodes.
    * @return filled with the new Index of the beam.
    */
    unsigned int CLib3MFMeshObject::AddBeam (const sLib3MFBeam & BeamInfo)
    {
        unsigned int resultIndex = 0;
        CheckError ( lib3mf_meshobject_addbeam (m_pHandle, &BeamInfo, &resultIndex) );
        return resultIndex;
    }
    
    /**
    * CLib3MFMeshObject::SetBeam - Sets the indices, radii and capmodes of a single beam of a mesh object.
    * @param[in] nIndex - Index of the beam (0 to beamcount - 1).
    * @param[in] BeamInfo - filled with the beam indices, radii and capmodes.
    */
    void CLib3MFMeshObject::SetBeam (const unsigned int nIndex, const sLib3MFBeam & BeamInfo)
    {
        CheckError ( lib3mf_meshobject_setbeam (m_pHandle, nIndex, &BeamInfo) );
    }
    
    /**
    * CLib3MFMeshObject::GetBeamSetCount - Returns the number of beamsets of a mesh object.
    * @return filled with the beamset count.
    */
    unsigned int CLib3MFMeshObject::GetBeamSetCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_meshobject_getbeamsetcount (m_pHandle, &resultCount) );
        return resultCount;
    }
    
    /**
    * CLib3MFMeshObject::AddBeamSet - Adds an empty beamset to a mesh object
    * @return the new beamset
    */
    PLib3MFBeamSet CLib3MFMeshObject::AddBeamSet ()
    {
        Lib3MFHandle hBeamSet = nullptr;
        CheckError ( lib3mf_meshobject_addbeamset (m_pHandle, &hBeamSet) );
        return std::make_shared<CLib3MFBeamSet> (hBeamSet);
    }
    
    /**
    * CLib3MFMeshObject::GetBeamSet - Returns a beamset of a mesh object
    * @param[in] nIndex - index of the requested beamset (0 ... beamsetcount-1).
    * @return the requested beamset
    */
    PLib3MFBeamSet CLib3MFMeshObject::GetBeamSet (const unsigned int nIndex)
    {
        Lib3MFHandle hBeamSet = nullptr;
        CheckError ( lib3mf_meshobject_getbeamset (m_pHandle, nIndex, &hBeamSet) );
        return std::make_shared<CLib3MFBeamSet> (hBeamSet);
    }
    
    /**
    * CLib3MFMeshObject::IsManifoldAndOriented - Retrieves, if an object describes a topologically oriented and manifold mesh, according to the core spec.
    * @return returns, if the object is oriented and manifold.
    */
    bool CLib3MFMeshObject::IsManifoldAndOriented ()
    {
        bool resultIsManifoldAndOriented = 0;
        CheckError ( lib3mf_meshobject_ismanifoldandoriented (m_pHandle, &resultIsManifoldAndOriented) );
        return resultIsManifoldAndOriented;
    }
     
/*************************************************************************************************************************
 Class CLib3MFComponent 
**************************************************************************************************************************/
    /**
    * CLib3MFComponent::CLib3MFComponent - Constructor for Component class.
    */
    CLib3MFComponent::CLib3MFComponent (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFComponent::GetObjectResource - Returns the Resource Instance of the component..
    * @return filled with the Resource Instance.
    */
    PLib3MFObject CLib3MFComponent::GetObjectResource ()
    {
        Lib3MFHandle hObjectResource = nullptr;
        CheckError ( lib3mf_component_getobjectresource (m_pHandle, &hObjectResource) );
        return std::make_shared<CLib3MFObject> (hObjectResource);
    }
    
    /**
    * CLib3MFComponent::GetObjectResourceID - Returns the Resource ID of the component.
    * @return returns the Resource ID.
    */
    unsigned int CLib3MFComponent::GetObjectResourceID ()
    {
        unsigned int resultObjectResourceID = 0;
        CheckError ( lib3mf_component_getobjectresourceid (m_pHandle, &resultObjectResourceID) );
        return resultObjectResourceID;
    }
    
    /**
    * CLib3MFComponent::GetUUID - returns, whether a component has a UUID and, if true, the component's UUID
    * @param[out] bHasUUID - flag whether the component has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string CLib3MFComponent::GetUUID (bool & bHasUUID)
    {
        unsigned int bytesNeededUUID = 0;
        unsigned int bytesWrittenUUID = 0;
        CheckError ( lib3mf_component_getuuidutf8 (m_pHandle, &bHasUUID, 0, &bytesNeededUUID, nullptr) );
        std::vector<char> bufferUUID;
        bufferUUID.resize(bytesNeededUUID + 2);
        CheckError ( lib3mf_component_getuuidutf8 (m_pHandle, &bHasUUID, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]) );
        bufferUUID[bytesNeededUUID + 1] = 0;
        return std::string(&bufferUUID[0]);
    }
    
    /**
    * CLib3MFComponent::SetUUID - sets the component's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void CLib3MFComponent::SetUUID (const std::string & sUUID)
    {
        CheckError ( lib3mf_component_setuuidutf8 (m_pHandle, sUUID.c_str()) );
    }
    
    /**
    * CLib3MFComponent::HasTransform - Returns, if the component has a different transformation than the identity matrix
    * @return if true is returned, the transformation is not equal than the identity
    */
    bool CLib3MFComponent::HasTransform ()
    {
        bool resultHasTransform = 0;
        CheckError ( lib3mf_component_hastransform (m_pHandle, &resultHasTransform) );
        return resultHasTransform;
    }
    
    /**
    * CLib3MFComponent::SetTransform - Sets the transformation matrix of the component.
    * @param[in] Transform - new transformation matrix
    */
    void CLib3MFComponent::SetTransform (const sLib3MFTransform & Transform)
    {
        CheckError ( lib3mf_component_settransform (m_pHandle, &Transform) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFComponentsObject 
**************************************************************************************************************************/
    /**
    * CLib3MFComponentsObject::CLib3MFComponentsObject - Constructor for ComponentsObject class.
    */
    CLib3MFComponentsObject::CLib3MFComponentsObject (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFComponentsObject::AddComponent - Adds a new component to a component object.
    * @param[in] pObjectResource - object to add as component. May not lead to circular references!
    * @param[in] Transform - optional transform matrix for the component.
    * @return new component instance
    */
    PLib3MFComponentsObject CLib3MFComponentsObject::AddComponent (CLib3MFObject * pObjectResource, const sLib3MFTransform & Transform)
    {
        Lib3MFHandle hComponentInstance = nullptr;
        Lib3MFHandle hObjectResource = nullptr;
        if (pObjectResource != nullptr) {
            hObjectResource = pObjectResource->GetHandle ();
        };
        CheckError ( lib3mf_componentsobject_addcomponent (m_pHandle, hObjectResource, &Transform, &hComponentInstance) );
        return std::make_shared<CLib3MFComponentsObject> (hComponentInstance);
    }
    
    /**
    * CLib3MFComponentsObject::GetComponent - Retrieves a component from a component object.
    * @param[in] nIndex - index of the component to retrieve (0 to componentcount - 1)
    * @return component instance
    */
    PLib3MFComponentsObject CLib3MFComponentsObject::GetComponent (const unsigned int nIndex)
    {
        Lib3MFHandle hComponentInstance = nullptr;
        CheckError ( lib3mf_componentsobject_getcomponent (m_pHandle, nIndex, &hComponentInstance) );
        return std::make_shared<CLib3MFComponentsObject> (hComponentInstance);
    }
    
    /**
    * CLib3MFComponentsObject::GetComponentCount -  Retrieves a component count of a component object.
    * @return returns the component count
    */
    unsigned int CLib3MFComponentsObject::GetComponentCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_componentsobject_getcomponentcount (m_pHandle, &resultCount) );
        return resultCount;
    }
     
/*************************************************************************************************************************
 Class CLib3MFBeamSet 
**************************************************************************************************************************/
    /**
    * CLib3MFBeamSet::CLib3MFBeamSet - Constructor for BeamSet class.
    */
    CLib3MFBeamSet::CLib3MFBeamSet (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFBeamSet::SetName - Sets a beamset's name string
    * @param[in] sName - new name of the beamset.
    */
    void CLib3MFBeamSet::SetName (const std::string & sName)
    {
        CheckError ( lib3mf_beamset_setnameutf8 (m_pHandle, sName.c_str()) );
    }
    
    /**
    * CLib3MFBeamSet::GetName - Retrieves a beamset's name string
    * @return returns the name of the beamset.
    */
    std::string CLib3MFBeamSet::GetName ()
    {
        unsigned int bytesNeededName = 0;
        unsigned int bytesWrittenName = 0;
        CheckError ( lib3mf_beamset_getnameutf8 (m_pHandle, 0, &bytesNeededName, nullptr) );
        std::vector<char> bufferName;
        bufferName.resize(bytesNeededName + 2);
        CheckError ( lib3mf_beamset_getnameutf8 (m_pHandle, bytesNeededName, &bytesWrittenName, &bufferName[0]) );
        bufferName[bytesNeededName + 1] = 0;
        return std::string(&bufferName[0]);
    }
    
    /**
    * CLib3MFBeamSet::SetIdentifier - Sets a beamset's identifier string
    * @param[in] sIdentifier - new name of the beamset.
    */
    void CLib3MFBeamSet::SetIdentifier (const std::string & sIdentifier)
    {
        CheckError ( lib3mf_beamset_setidentifierutf8 (m_pHandle, sIdentifier.c_str()) );
    }
    
    /**
    * CLib3MFBeamSet::GetIdentifier - Retrieves a beamset's identifier string
    * @return returns the identifier of the beamset.
    */
    std::string CLib3MFBeamSet::GetIdentifier ()
    {
        unsigned int bytesNeededIdentifier = 0;
        unsigned int bytesWrittenIdentifier = 0;
        CheckError ( lib3mf_beamset_getidentifierutf8 (m_pHandle, 0, &bytesNeededIdentifier, nullptr) );
        std::vector<char> bufferIdentifier;
        bufferIdentifier.resize(bytesNeededIdentifier + 2);
        CheckError ( lib3mf_beamset_getidentifierutf8 (m_pHandle, bytesNeededIdentifier, &bytesWrittenIdentifier, &bufferIdentifier[0]) );
        bufferIdentifier[bytesNeededIdentifier + 1] = 0;
        return std::string(&bufferIdentifier[0]);
    }
    
    /**
    * CLib3MFBeamSet::GetReferenceCount - Retrieves the reference count of a beamset
    * @return returns the reference count
    */
    unsigned int CLib3MFBeamSet::GetReferenceCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_beamset_getreferencecount (m_pHandle, &resultCount) );
        return resultCount;
    }
    
    /**
    * CLib3MFBeamSet::SetReferences - Sets the references of a beamset
    * @param[in] ReferencesBuffer - the new indices of all beams in this beamset
    */
    void CLib3MFBeamSet::SetReferences (const std::vector<unsigned int> & ReferencesBuffer)
    {
        CheckError ( lib3mf_beamset_setreferences (m_pHandle, (unsigned int)ReferencesBuffer.size(), ReferencesBuffer.data()) );
    }
    
    /**
    * CLib3MFBeamSet::GetReferences - Retrieves the references of a beamset
    * @param[out] ReferencesBuffer - retrieves the indices of all beams in this beamset
    */
    void CLib3MFBeamSet::GetReferences (std::vector<unsigned int> & ReferencesBuffer)
    {
        unsigned int elementsNeededReferences = 0;
        unsigned int elementsWrittenReferences = 0;
        CheckError ( lib3mf_beamset_getreferences (m_pHandle, 0, &elementsNeededReferences, nullptr) );
        ReferencesBuffer.resize(elementsNeededReferences);
        CheckError ( lib3mf_beamset_getreferences (m_pHandle, elementsNeededReferences, &elementsWrittenReferences, ReferencesBuffer.data()) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFBaseMaterial 
**************************************************************************************************************************/
    /**
    * CLib3MFBaseMaterial::CLib3MFBaseMaterial - Constructor for BaseMaterial class.
    */
    CLib3MFBaseMaterial::CLib3MFBaseMaterial (Lib3MFHandle pHandle)
     : CLib3MFResource (pHandle)
    { }
    
    /**
    * CLib3MFBaseMaterial::GetCount - Retrieves the count of base materials in the material group.
    * @return returns the count of base materials.
    */
    unsigned int CLib3MFBaseMaterial::GetCount ()
    {
        unsigned int resultCount = 0;
        CheckError ( lib3mf_basematerial_getcount (m_pHandle, &resultCount) );
        return resultCount;
    }
    
    /**
    * CLib3MFBaseMaterial::GetResourceID - Retrieves the resource id of the material group.
    * @return returns the id of the material group.
    */
    unsigned int CLib3MFBaseMaterial::GetResourceID ()
    {
        unsigned int resultResourceID = 0;
        CheckError ( lib3mf_basematerial_getresourceid (m_pHandle, &resultResourceID) );
        return resultResourceID;
    }
    
    /**
    * CLib3MFBaseMaterial::AddMaterial - Adds a new material to the material group
    * @param[in] sName - new name of the base material.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    * @return returns new Index of the material in the material group.
    */
    unsigned int CLib3MFBaseMaterial::AddMaterial (const std::string & sName, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue)
    {
        unsigned int resultResourceIndex = 0;
        CheckError ( lib3mf_basematerial_addmaterialutf8 (m_pHandle, sName.c_str(), nRed, nGreen, nBlue, &resultResourceIndex) );
        return resultResourceIndex;
    }
    
    /**
    * CLib3MFBaseMaterial::RemoveMaterial - Removes a material from the material group.
    * @param[in] nResourceIndex - Index of the material in the material group.
    */
    void CLib3MFBaseMaterial::RemoveMaterial (const unsigned int nResourceIndex)
    {
        CheckError ( lib3mf_basematerial_removematerial (m_pHandle, nResourceIndex) );
    }
    
    /**
    * CLib3MFBaseMaterial::GetName - Returns the base material's name
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @return returns the name of the base material.
    */
    std::string CLib3MFBaseMaterial::GetName (const unsigned int nResourceIndex)
    {
        unsigned int bytesNeededName = 0;
        unsigned int bytesWrittenName = 0;
        CheckError ( lib3mf_basematerial_getnameutf8 (m_pHandle, nResourceIndex, 0, &bytesNeededName, nullptr) );
        std::vector<char> bufferName;
        bufferName.resize(bytesNeededName + 2);
        CheckError ( lib3mf_basematerial_getnameutf8 (m_pHandle, nResourceIndex, bytesNeededName, &bytesWrittenName, &bufferName[0]) );
        bufferName[bytesNeededName + 1] = 0;
        return std::string(&bufferName[0]);
    }
    
    /**
    * CLib3MFBaseMaterial::SetName - Sets a base material's name
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] sName - new name of the base material.
    */
    void CLib3MFBaseMaterial::SetName (const unsigned int nResourceIndex, const std::string & sName)
    {
        CheckError ( lib3mf_basematerial_setnameutf8 (m_pHandle, nResourceIndex, sName.c_str()) );
    }
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorRGB - Sets a base material's display color. Alpha is set to 255.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    */
    void CLib3MFBaseMaterial::SetDisplayColorRGB (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue)
    {
        CheckError ( lib3mf_basematerial_setdisplaycolorrgb (m_pHandle, nResourceIndex, nRed, nGreen, nBlue) );
    }
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorRGBA - Sets a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    * @param[in] nAlpha - New alpha value of display color (0-255)
    */
    void CLib3MFBaseMaterial::SetDisplayColorRGBA (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha)
    {
        CheckError ( lib3mf_basematerial_setdisplaycolorrgba (m_pHandle, nResourceIndex, nRed, nGreen, nBlue, nAlpha) );
    }
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorFloatRGB - Sets a base material's display color. Alpha is set to 1.0.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] fRed - New red value of display color (0-1)
    * @param[in] fGreen - New green value of display color (0-1)
    * @param[in] fBlue - New blue value of display color (0-1)
    */
    void CLib3MFBaseMaterial::SetDisplayColorFloatRGB (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue)
    {
        CheckError ( lib3mf_basematerial_setdisplaycolorfloatrgb (m_pHandle, nResourceIndex, fRed, fGreen, fBlue) );
    }
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorFloatRGBA - Sets a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] fRed - New red value of display color (0-1)
    * @param[in] fGreen - New green value of display color (0-1)
    * @param[in] fBlue - New blue value of display color (0-1)
    * @param[in] fAlpha - New alpha value of display color (0-1)
    */
    void CLib3MFBaseMaterial::SetDisplayColorFloatRGBA (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha)
    {
        CheckError ( lib3mf_basematerial_setdisplaycolorfloatrgba (m_pHandle, nResourceIndex, fRed, fGreen, fBlue, fAlpha) );
    }
    
    /**
    * CLib3MFBaseMaterial::GetDisplayColor - Returns a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[out] nRed - Returns red value of display color (0-255)
    * @param[out] nGreen - Returns green value of display color (0-255)
    * @param[out] nBlue - Returns blue value of display color (0-255)
    * @param[out] nAlpha - Returns blue value of display color (0-255)
    */
    void CLib3MFBaseMaterial::GetDisplayColor (const unsigned int nResourceIndex, unsigned char & nRed, unsigned char & nGreen, unsigned char & nBlue, unsigned char & nAlpha)
    {
        CheckError ( lib3mf_basematerial_getdisplaycolor (m_pHandle, nResourceIndex, &nRed, &nGreen, &nBlue, &nAlpha) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFAttachment 
**************************************************************************************************************************/
    /**
    * CLib3MFAttachment::CLib3MFAttachment - Constructor for Attachment class.
    */
    CLib3MFAttachment::CLib3MFAttachment (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFAttachment::GetPath - Retrieves an attachment's package path.
    * @return returns the attachment's package path string
    */
    std::string CLib3MFAttachment::GetPath ()
    {
        unsigned int bytesNeededPath = 0;
        unsigned int bytesWrittenPath = 0;
        CheckError ( lib3mf_attachment_getpathutf8 (m_pHandle, 0, &bytesNeededPath, nullptr) );
        std::vector<char> bufferPath;
        bufferPath.resize(bytesNeededPath + 2);
        CheckError ( lib3mf_attachment_getpathutf8 (m_pHandle, bytesNeededPath, &bytesWrittenPath, &bufferPath[0]) );
        bufferPath[bytesNeededPath + 1] = 0;
        return std::string(&bufferPath[0]);
    }
    
    /**
    * CLib3MFAttachment::SetPath - Sets an attachment's package path.
    * @param[in] sPath - new path of the attachment.
    */
    void CLib3MFAttachment::SetPath (const std::string & sPath)
    {
        CheckError ( lib3mf_attachment_setpathutf8 (m_pHandle, sPath.c_str()) );
    }
    
    /**
    * CLib3MFAttachment::GetRelationShipType - Retrieves an attachment's relationship type
    * @return returns the attachment's package relationship type string
    */
    std::string CLib3MFAttachment::GetRelationShipType ()
    {
        unsigned int bytesNeededPath = 0;
        unsigned int bytesWrittenPath = 0;
        CheckError ( lib3mf_attachment_getrelationshiptypeutf8 (m_pHandle, 0, &bytesNeededPath, nullptr) );
        std::vector<char> bufferPath;
        bufferPath.resize(bytesNeededPath + 2);
        CheckError ( lib3mf_attachment_getrelationshiptypeutf8 (m_pHandle, bytesNeededPath, &bytesWrittenPath, &bufferPath[0]) );
        bufferPath[bytesNeededPath + 1] = 0;
        return std::string(&bufferPath[0]);
    }
    
    /**
    * CLib3MFAttachment::SetRelationShipType - Sets an attachment's relationship type.
    * @param[in] sPath - new relationship type string.
    */
    void CLib3MFAttachment::SetRelationShipType (const std::string & sPath)
    {
        CheckError ( lib3mf_attachment_setrelationshiptypeutf8 (m_pHandle, sPath.c_str()) );
    }
    
    /**
    * CLib3MFAttachment::WriteToFile - Writes out the attachment as file.
    * @param[in] sFileName - file to write into.
    */
    void CLib3MFAttachment::WriteToFile (const std::string & sFileName)
    {
        CheckError ( lib3mf_attachment_writetofileutf8 (m_pHandle, sFileName.c_str()) );
    }
    
    /**
    * CLib3MFAttachment::ReadFromFile - Reads an attachment from a file.
    * @param[in] sFileName - file to read from.
    */
    void CLib3MFAttachment::ReadFromFile (const std::string & sFileName)
    {
        CheckError ( lib3mf_attachment_readfromfileutf8 (m_pHandle, sFileName.c_str()) );
    }
    
    /**
    * CLib3MFAttachment::GetStreamSize - Retrieves the size of the attachment stream
    * @return the stream size
    */
    unsigned long long CLib3MFAttachment::GetStreamSize ()
    {
        unsigned long long resultStreamSize = 0;
        CheckError ( lib3mf_attachment_getstreamsize (m_pHandle, &resultStreamSize) );
        return resultStreamSize;
    }
    
    /**
    * CLib3MFAttachment::WriteToBuffer - Writes out the attachment into a buffer
    * @param[out] BufferBuffer - Buffer to write into
    */
    void CLib3MFAttachment::WriteToBuffer (std::vector<unsigned char> & BufferBuffer)
    {
        unsigned int elementsNeededBuffer = 0;
        unsigned int elementsWrittenBuffer = 0;
        CheckError ( lib3mf_attachment_writetobuffer (m_pHandle, 0, &elementsNeededBuffer, nullptr) );
        BufferBuffer.resize(elementsNeededBuffer);
        CheckError ( lib3mf_attachment_writetobuffer (m_pHandle, elementsNeededBuffer, &elementsWrittenBuffer, BufferBuffer.data()) );
    }
    
    /**
    * CLib3MFAttachment::ReadFromBuffer - Reads an attachment from a memory buffer
    * @param[out] BufferBuffer - Buffer to read from
    */
    void CLib3MFAttachment::ReadFromBuffer (std::vector<unsigned char> & BufferBuffer)
    {
        unsigned int elementsNeededBuffer = 0;
        unsigned int elementsWrittenBuffer = 0;
        CheckError ( lib3mf_attachment_readfrombuffer (m_pHandle, 0, &elementsNeededBuffer, nullptr) );
        BufferBuffer.resize(elementsNeededBuffer);
        CheckError ( lib3mf_attachment_readfrombuffer (m_pHandle, elementsNeededBuffer, &elementsWrittenBuffer, BufferBuffer.data()) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFTexture2D 
**************************************************************************************************************************/
    /**
    * CLib3MFTexture2D::CLib3MFTexture2D - Constructor for Texture2D class.
    */
    CLib3MFTexture2D::CLib3MFTexture2D (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFTexture2D::GetAttachment - Retrieves the attachment located at the path of the texture.
    * @return attachment that holds the texture's image information.
    */
    PLib3MFAttachment CLib3MFTexture2D::GetAttachment ()
    {
        Lib3MFHandle hAttachment = nullptr;
        CheckError ( lib3mf_texture2d_getattachment (m_pHandle, &hAttachment) );
        return std::make_shared<CLib3MFAttachment> (hAttachment);
    }
    
    /**
    * CLib3MFTexture2D::SetAttachment - Sets the texture's package path to the path of the attachment.
    * @param[in] pAttachment - attachment that holds the texture's image information.
    */
    void CLib3MFTexture2D::SetAttachment (CLib3MFAttachment * pAttachment)
    {
        Lib3MFHandle hAttachment = nullptr;
        if (pAttachment != nullptr) {
            hAttachment = pAttachment->GetHandle ();
        };
        CheckError ( lib3mf_texture2d_setattachment (m_pHandle, hAttachment) );
    }
    
    /**
    * CLib3MFTexture2D::GetContentType - Retrieves a texture's content type.
    * @return returns content type enum.
    */
    eLib3MFTextureType CLib3MFTexture2D::GetContentType ()
    {
        eLib3MFTextureType resultContentType = (eLib3MFTextureType) 0;
        CheckError ( lib3mf_texture2d_getcontenttype (m_pHandle, &resultContentType) );
        return resultContentType;
    }
    
    /**
    * CLib3MFTexture2D::SetContentType - Retrieves a texture's content type.
    * @param[in] eContentType - new Content Type
    */
    void CLib3MFTexture2D::SetContentType (const eLib3MFTextureType eContentType)
    {
        CheckError ( lib3mf_texture2d_setcontenttype (m_pHandle, eContentType) );
    }
    
    /**
    * CLib3MFTexture2D::GetTileStyleUV - Retrieves a texture's tilestyle type.
    * @param[out] eTileStyleU - returns tilestyle type enum.
    * @param[out] eTileStyleV - returns tilestyle type enum.
    */
    void CLib3MFTexture2D::GetTileStyleUV (eLib3MFTextureTileStyle & eTileStyleU, eLib3MFTextureTileStyle & eTileStyleV)
    {
        CheckError ( lib3mf_texture2d_gettilestyleuv (m_pHandle, &eTileStyleU, &eTileStyleV) );
    }
    
    /**
    * CLib3MFTexture2D::SetTileStyleUV - Sets a texture's tilestyle type.
    * @param[in] eTileStyleU - new tilestyle type enum.
    * @param[in] eTileStyleV - new tilestyle type enum.
    */
    void CLib3MFTexture2D::SetTileStyleUV (const eLib3MFTextureTileStyle eTileStyleU, const eLib3MFTextureTileStyle eTileStyleV)
    {
        CheckError ( lib3mf_texture2d_settilestyleuv (m_pHandle, eTileStyleU, eTileStyleV) );
    }
    
    /**
    * CLib3MFTexture2D::GetFilter - Retrieves a texture's filter type.
    * @return returns filter type enum.
    */
    eLib3MFTextureFilter CLib3MFTexture2D::GetFilter ()
    {
        eLib3MFTextureFilter resultFilter = (eLib3MFTextureFilter) 0;
        CheckError ( lib3mf_texture2d_getfilter (m_pHandle, &resultFilter) );
        return resultFilter;
    }
    
    /**
    * CLib3MFTexture2D::SetFilter - Sets a texture's filter type.
    * @param[in] eFilter - sets new filter type enum.
    */
    void CLib3MFTexture2D::SetFilter (const eLib3MFTextureFilter eFilter)
    {
        CheckError ( lib3mf_texture2d_setfilter (m_pHandle, eFilter) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFBuildItem 
**************************************************************************************************************************/
    /**
    * CLib3MFBuildItem::CLib3MFBuildItem - Constructor for BuildItem class.
    */
    CLib3MFBuildItem::CLib3MFBuildItem (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFBuildItem::GetObjectResource - Retrieves the object resource associated to a build item
    * @return returns the associated resource instance
    */
    PLib3MFResource CLib3MFBuildItem::GetObjectResource ()
    {
        Lib3MFHandle hObjectResource = nullptr;
        CheckError ( lib3mf_builditem_getobjectresource (m_pHandle, &hObjectResource) );
        return std::make_shared<CLib3MFResource> (hObjectResource);
    }
    
    /**
    * CLib3MFBuildItem::GetUUID - returns, whether a build item has a UUID and, if true, the build item's UUID
    * @param[out] bHasUUID - flag whether the build item has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string CLib3MFBuildItem::GetUUID (bool & bHasUUID)
    {
        unsigned int bytesNeededUUID = 0;
        unsigned int bytesWrittenUUID = 0;
        CheckError ( lib3mf_builditem_getuuidutf8 (m_pHandle, &bHasUUID, 0, &bytesNeededUUID, nullptr) );
        std::vector<char> bufferUUID;
        bufferUUID.resize(bytesNeededUUID + 2);
        CheckError ( lib3mf_builditem_getuuidutf8 (m_pHandle, &bHasUUID, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]) );
        bufferUUID[bytesNeededUUID + 1] = 0;
        return std::string(&bufferUUID[0]);
    }
    
    /**
    * CLib3MFBuildItem::SetUUID - sets the build item's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void CLib3MFBuildItem::SetUUID (const std::string & sUUID)
    {
        CheckError ( lib3mf_builditem_setuuidutf8 (m_pHandle, sUUID.c_str()) );
    }
    
    /**
    * CLib3MFBuildItem::GetObjectResourceID - Retrieves the object resource id associated to a build item
    * @return  eturns the ID of the object
    */
    unsigned int CLib3MFBuildItem::GetObjectResourceID ()
    {
        unsigned int resultId = 0;
        CheckError ( lib3mf_builditem_getobjectresourceid (m_pHandle, &resultId) );
        return resultId;
    }
    
    /**
    * CLib3MFBuildItem::HasObjectTransform - Checks, if a build item has a non-identity transformation matrix
    * @return returns true, if the transformation matrix is not the identity
    */
    bool CLib3MFBuildItem::HasObjectTransform ()
    {
        bool resultHasTransform = 0;
        CheckError ( lib3mf_builditem_hasobjecttransform (m_pHandle, &resultHasTransform) );
        return resultHasTransform;
    }
    
    /**
    * CLib3MFBuildItem::GetObjectTransform - Retrieves a build item's transformation matrix.
    * @return returns the transformation matrix
    */
    sLib3MFTransform CLib3MFBuildItem::GetObjectTransform ()
    {
        sLib3MFTransform resultTransform;
        CheckError ( lib3mf_builditem_getobjecttransform (m_pHandle, &resultTransform) );
        return resultTransform;
    }
    
    /**
    * CLib3MFBuildItem::SetObjectTransform - Sets a build item's transformation matrix.
    * @param[in] Transform - new transformation matrix
    */
    void CLib3MFBuildItem::SetObjectTransform (const sLib3MFTransform & Transform)
    {
        CheckError ( lib3mf_builditem_setobjecttransform (m_pHandle, &Transform) );
    }
    
    /**
    * CLib3MFBuildItem::GetPartNumber - Retrieves a build item's part number string
    * @return Returns a build item's part number string
    */
    std::string CLib3MFBuildItem::GetPartNumber ()
    {
        unsigned int bytesNeededPartNumber = 0;
        unsigned int bytesWrittenPartNumber = 0;
        CheckError ( lib3mf_builditem_getpartnumberutf8 (m_pHandle, 0, &bytesNeededPartNumber, nullptr) );
        std::vector<char> bufferPartNumber;
        bufferPartNumber.resize(bytesNeededPartNumber + 2);
        CheckError ( lib3mf_builditem_getpartnumberutf8 (m_pHandle, bytesNeededPartNumber, &bytesWrittenPartNumber, &bufferPartNumber[0]) );
        bufferPartNumber[bytesNeededPartNumber + 1] = 0;
        return std::string(&bufferPartNumber[0]);
    }
    
    /**
    * CLib3MFBuildItem::SetPartNumber - Sets a build item's part number string
    * @param[in] sSetPartnumber - new part number string for referencing parts from the outside world
    */
    void CLib3MFBuildItem::SetPartNumber (const std::string & sSetPartnumber)
    {
        CheckError ( lib3mf_builditem_setpartnumberutf8 (m_pHandle, sSetPartnumber.c_str()) );
    }
    
    /**
    * CLib3MFBuildItem::HasMetaDataGroup - Returns whether the build item has a metadatagroup
    * @return returns whether the build item has a metadatagroup
    */
    bool CLib3MFBuildItem::HasMetaDataGroup ()
    {
        bool resultHasMetaDataGroup = 0;
        CheckError ( lib3mf_builditem_hasmetadatagroup (m_pHandle, &resultHasMetaDataGroup) );
        return resultHasMetaDataGroup;
    }
    
    /**
    * CLib3MFBuildItem::GetMetaDataGroup - Returns the metadatagroup of this build item
    * @return returns an Instance of the metadatagroup of this build item
    */
    PLib3MFMetaDataGroup CLib3MFBuildItem::GetMetaDataGroup ()
    {
        Lib3MFHandle hMetaDataGroup = nullptr;
        CheckError ( lib3mf_builditem_getmetadatagroup (m_pHandle, &hMetaDataGroup) );
        return std::make_shared<CLib3MFMetaDataGroup> (hMetaDataGroup);
    }
    
    /**
    * CLib3MFBuildItem::CreateMetaDataGroup - Creates a new metadatagroup for this build item
    * @return returns an Instance of a new metadatagroup for this build item
    */
    PLib3MFMetaDataGroup CLib3MFBuildItem::CreateMetaDataGroup ()
    {
        Lib3MFHandle hMetaDataGroup = nullptr;
        CheckError ( lib3mf_builditem_createmetadatagroup (m_pHandle, &hMetaDataGroup) );
        return std::make_shared<CLib3MFMetaDataGroup> (hMetaDataGroup);
    }
    
    /**
    * CLib3MFBuildItem::RemoveMetaDataGroup - Removes the build item's metadatagroup
    */
    void CLib3MFBuildItem::RemoveMetaDataGroup ()
    {
        CheckError ( lib3mf_builditem_removemetadatagroup (m_pHandle) );
    }
     
/*************************************************************************************************************************
 Class CLib3MFBuildItemIterator 
**************************************************************************************************************************/
    /**
    * CLib3MFBuildItemIterator::CLib3MFBuildItemIterator - Constructor for BuildItemIterator class.
    */
    CLib3MFBuildItemIterator::CLib3MFBuildItemIterator (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFBuildItemIterator::MoveNext - Iterates to the next build item in the list.
    * @return Iterates to the next build item in the list.
    */
    bool CLib3MFBuildItemIterator::MoveNext ()
    {
        bool resultHasNext = 0;
        CheckError ( lib3mf_builditemiterator_movenext (m_pHandle, &resultHasNext) );
        return resultHasNext;
    }
    
    /**
    * CLib3MFBuildItemIterator::MovePrevious - Iterates to the previous build item in the list.
    * @return Iterates to the previous build item in the list.
    */
    bool CLib3MFBuildItemIterator::MovePrevious ()
    {
        bool resultHasPrevious = 0;
        CheckError ( lib3mf_builditemiterator_moveprevious (m_pHandle, &resultHasPrevious) );
        return resultHasPrevious;
    }
    
    /**
    * CLib3MFBuildItemIterator::GetCurrent - Returns the build item the iterator points at.
    * @return returns the build item instance.
    */
    PLib3MFBuildItem CLib3MFBuildItemIterator::GetCurrent ()
    {
        Lib3MFHandle hBuildItem = nullptr;
        CheckError ( lib3mf_builditemiterator_getcurrent (m_pHandle, &hBuildItem) );
        return std::make_shared<CLib3MFBuildItem> (hBuildItem);
    }
    
    /**
    * CLib3MFBuildItemIterator::Clone - Creates a new build item iterator with the same build item list.
    * @return returns the cloned Iterator instance
    */
    PLib3MFBuildItemIterator CLib3MFBuildItemIterator::Clone ()
    {
        Lib3MFHandle hOutBuildItemIterator = nullptr;
        CheckError ( lib3mf_builditemiterator_clone (m_pHandle, &hOutBuildItemIterator) );
        return std::make_shared<CLib3MFBuildItemIterator> (hOutBuildItemIterator);
    }
     
/*************************************************************************************************************************
 Class CLib3MFModel 
**************************************************************************************************************************/
    /**
    * CLib3MFModel::CLib3MFModel - Constructor for Model class.
    */
    CLib3MFModel::CLib3MFModel (Lib3MFHandle pHandle)
     : CLib3MFBaseClass (pHandle)
    { }
    
    /**
    * CLib3MFModel::SetUnit - sets the units of a model.
    * @param[in] eUnit - Unit enum value for the model unit
    */
    void CLib3MFModel::SetUnit (const eLib3MFModelUnit eUnit)
    {
        CheckError ( lib3mf_model_setunit (m_pHandle, eUnit) );
    }
    
    /**
    * CLib3MFModel::GetUnit - returns the units of a model.
    * @return Unit enum value for the model unit
    */
    eLib3MFModelUnit CLib3MFModel::GetUnit ()
    {
        eLib3MFModelUnit resultUnit = (eLib3MFModelUnit) 0;
        CheckError ( lib3mf_model_getunit (m_pHandle, &resultUnit) );
        return resultUnit;
    }
    
    /**
    * CLib3MFModel::GetLanguage - retrieves the language of a model
    * @return language identifier
    */
    std::string CLib3MFModel::GetLanguage ()
    {
        unsigned int bytesNeededLanguage = 0;
        unsigned int bytesWrittenLanguage = 0;
        CheckError ( lib3mf_model_getlanguageutf8 (m_pHandle, 0, &bytesNeededLanguage, nullptr) );
        std::vector<char> bufferLanguage;
        bufferLanguage.resize(bytesNeededLanguage + 2);
        CheckError ( lib3mf_model_getlanguageutf8 (m_pHandle, bytesNeededLanguage, &bytesWrittenLanguage, &bufferLanguage[0]) );
        bufferLanguage[bytesNeededLanguage + 1] = 0;
        return std::string(&bufferLanguage[0]);
    }
    
    /**
    * CLib3MFModel::SetLanguage - sets the language of a model
    * @param[in] sLanguage - language identifier
    */
    void CLib3MFModel::SetLanguage (const std::string & sLanguage)
    {
        CheckError ( lib3mf_model_setlanguageutf8 (m_pHandle, sLanguage.c_str()) );
    }
    
    /**
    * CLib3MFModel::QueryWriter - creates a model writer instance for a specific file type
    * @param[in] sWriterClass -  string identifier for the file type
    * @return  string identifier for the file type
    */
    PLib3MFWriter CLib3MFModel::QueryWriter (const std::string & sWriterClass)
    {
        Lib3MFHandle hWriterInstance = nullptr;
        CheckError ( lib3mf_model_querywriter (m_pHandle, sWriterClass.c_str(), &hWriterInstance) );
        return std::make_shared<CLib3MFWriter> (hWriterInstance);
    }
    
    /**
    * CLib3MFModel::QueryReader - creates a model reader instance for a specific file type
    * @param[in] sReaderClass -  string identifier for the file type
    * @return  string identifier for the file type
    */
    PLib3MFReader CLib3MFModel::QueryReader (const std::string & sReaderClass)
    {
        Lib3MFHandle hReaderInstance = nullptr;
        CheckError ( lib3mf_model_queryreader (m_pHandle, sReaderClass.c_str(), &hReaderInstance) );
        return std::make_shared<CLib3MFReader> (hReaderInstance);
    }
    
    /**
    * CLib3MFModel::GetResourceByID - finds a model resource by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the resource instance
    */
    PLib3MFResource CLib3MFModel::GetResourceByID (const unsigned int nResourceID)
    {
        Lib3MFHandle hResourceInstance = nullptr;
        CheckError ( lib3mf_model_getresourcebyid (m_pHandle, nResourceID, &hResourceInstance) );
        return std::make_shared<CLib3MFResource> (hResourceInstance);
    }
    
    /**
    * CLib3MFModel::GetTexture2DByID - finds a model texture by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the texture2d instance
    */
    PLib3MFTexture2D CLib3MFModel::GetTexture2DByID (const unsigned int nResourceID)
    {
        Lib3MFHandle hTextureInstance = nullptr;
        CheckError ( lib3mf_model_gettexture2dbyid (m_pHandle, nResourceID, &hTextureInstance) );
        return std::make_shared<CLib3MFTexture2D> (hTextureInstance);
    }
    
    /**
    * CLib3MFModel::GetBaseMaterialByID - finds a model base material by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the basematerial instance
    */
    PLib3MFBaseMaterial CLib3MFModel::GetBaseMaterialByID (const unsigned int nResourceID)
    {
        Lib3MFHandle hBaseMaterialInstance = nullptr;
        CheckError ( lib3mf_model_getbasematerialbyid (m_pHandle, nResourceID, &hBaseMaterialInstance) );
        return std::make_shared<CLib3MFBaseMaterial> (hBaseMaterialInstance);
    }
    
    /**
    * CLib3MFModel::GetMeshObjectByID - finds a mesh object by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the mesh object instance
    */
    PLib3MFMeshObject CLib3MFModel::GetMeshObjectByID (const unsigned int nResourceID)
    {
        Lib3MFHandle hMeshObjectInstance = nullptr;
        CheckError ( lib3mf_model_getmeshobjectbyid (m_pHandle, nResourceID, &hMeshObjectInstance) );
        return std::make_shared<CLib3MFMeshObject> (hMeshObjectInstance);
    }
    
    /**
    * CLib3MFModel::GetComponentsObjectByID - finds a components object by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the components object instance
    */
    PLib3MFComponentsObject CLib3MFModel::GetComponentsObjectByID (const unsigned int nResourceID)
    {
        Lib3MFHandle hComponentsObjectInstance = nullptr;
        CheckError ( lib3mf_model_getcomponentsobjectbyid (m_pHandle, nResourceID, &hComponentsObjectInstance) );
        return std::make_shared<CLib3MFComponentsObject> (hComponentsObjectInstance);
    }
    
    /**
    * CLib3MFModel::GetBuildUUID - returns, whether a build has a UUID and, if true, the build's UUID
    * @param[out] bHasUUID - flag whether the build has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string CLib3MFModel::GetBuildUUID (bool & bHasUUID)
    {
        unsigned int bytesNeededUUID = 0;
        unsigned int bytesWrittenUUID = 0;
        CheckError ( lib3mf_model_getbuilduuidutf8 (m_pHandle, &bHasUUID, 0, &bytesNeededUUID, nullptr) );
        std::vector<char> bufferUUID;
        bufferUUID.resize(bytesNeededUUID + 2);
        CheckError ( lib3mf_model_getbuilduuidutf8 (m_pHandle, &bHasUUID, bytesNeededUUID, &bytesWrittenUUID, &bufferUUID[0]) );
        bufferUUID[bytesNeededUUID + 1] = 0;
        return std::string(&bufferUUID[0]);
    }
    
    /**
    * CLib3MFModel::SetBuildUUID - sets the build's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void CLib3MFModel::SetBuildUUID (const std::string & sUUID)
    {
        CheckError ( lib3mf_model_setbuilduuidutf8 (m_pHandle, sUUID.c_str()) );
    }
    
    /**
    * CLib3MFModel::GetBuildItems - creates a build item iterator instance with all build items.
    * @return returns the iterator instance.
    */
    PLib3MFBuildItemIterator CLib3MFModel::GetBuildItems ()
    {
        Lib3MFHandle hBuildItemIterator = nullptr;
        CheckError ( lib3mf_model_getbuilditems (m_pHandle, &hBuildItemIterator) );
        return std::make_shared<CLib3MFBuildItemIterator> (hBuildItemIterator);
    }
    
    /**
    * CLib3MFModel::GetResources - creates a resource iterator instance with all resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::GetResources ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_getresources (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::GetObjects - creates a resource iterator instance with all object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::GetObjects ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_getobjects (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::GetMeshObjects - creates a resource iterator instance with all mesh object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::GetMeshObjects ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_getmeshobjects (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::GetComponentsObjects - creates a resource iterator instance with all components object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::GetComponentsObjects ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_getcomponentsobjects (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::Get2DTextures - creates a resource iterator instance with all texture2d resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::Get2DTextures ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_get2dtextures (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::GetBaseMaterials - creates a resource iterator instance with all base material resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator CLib3MFModel::GetBaseMaterials ()
    {
        Lib3MFHandle hResourceIterator = nullptr;
        CheckError ( lib3mf_model_getbasematerials (m_pHandle, &hResourceIterator) );
        return std::make_shared<CLib3MFResourceIterator> (hResourceIterator);
    }
    
    /**
    * CLib3MFModel::MergeToModel - Merges all components and objects which are referenced by a build item. The memory is duplicated and a new model is created.
    * @return returns the merged model instance
    */
    PLib3MFModel CLib3MFModel::MergeToModel ()
    {
        Lib3MFHandle hMergedModelInstance = nullptr;
        CheckError ( lib3mf_model_mergetomodel (m_pHandle, &hMergedModelInstance) );
        return std::make_shared<CLib3MFModel> (hMergedModelInstance);
    }
    
    /**
    * CLib3MFModel::AddMeshObject - adds an empty mesh object to the model.
    * @return  returns the mesh object instance
    */
    PLib3MFMeshObject CLib3MFModel::AddMeshObject ()
    {
        Lib3MFHandle hMeshObjectInstance = nullptr;
        CheckError ( lib3mf_model_addmeshobject (m_pHandle, &hMeshObjectInstance) );
        return std::make_shared<CLib3MFMeshObject> (hMeshObjectInstance);
    }
    
    /**
    * CLib3MFModel::AddComponentsObject - adds an empty component object to the model.
    * @return  returns the components object instance
    */
    PLib3MFComponentsObject CLib3MFModel::AddComponentsObject ()
    {
        Lib3MFHandle hComponentsObjectInstance = nullptr;
        CheckError ( lib3mf_model_addcomponentsobject (m_pHandle, &hComponentsObjectInstance) );
        return std::make_shared<CLib3MFComponentsObject> (hComponentsObjectInstance);
    }
    
    /**
    * CLib3MFModel::AddTexture2DFromAttachment - adds a texture2d resource to the model. Its path is given by that of an existing attachment.
    * @param[in] pTextureAttachment - attachment containing the image data.
    * @return returns the new texture instance.
    */
    PLib3MFTexture2D CLib3MFModel::AddTexture2DFromAttachment (CLib3MFAttachment * pTextureAttachment)
    {
        Lib3MFHandle hTexture2DInstance = nullptr;
        Lib3MFHandle hTextureAttachment = nullptr;
        if (pTextureAttachment != nullptr) {
            hTextureAttachment = pTextureAttachment->GetHandle ();
        };
        CheckError ( lib3mf_model_addtexture2dfromattachment (m_pHandle, hTextureAttachment, &hTexture2DInstance) );
        return std::make_shared<CLib3MFTexture2D> (hTexture2DInstance);
    }
    
    /**
    * CLib3MFModel::AddBaseMaterialGroup - adds an empty basematerials resource to the model.
    * @return returns the new base material instance.
    */
    PLib3MFBaseMaterial CLib3MFModel::AddBaseMaterialGroup ()
    {
        Lib3MFHandle hBaseMaterialGroupInstance = nullptr;
        CheckError ( lib3mf_model_addbasematerialgroup (m_pHandle, &hBaseMaterialGroupInstance) );
        return std::make_shared<CLib3MFBaseMaterial> (hBaseMaterialGroupInstance);
    }
    
    /**
    * CLib3MFModel::AddBuildItem - adds a build item to the model.
    * @param[in] pObject - Object instance.
    * @param[in] Transform - Transformation matrix.
    * @return returns the build item instance.
    */
    PLib3MFBuildItem CLib3MFModel::AddBuildItem (CLib3MFObject * pObject, const sLib3MFTransform & Transform)
    {
        Lib3MFHandle hBuildItemInstance = nullptr;
        Lib3MFHandle hObject = nullptr;
        if (pObject != nullptr) {
            hObject = pObject->GetHandle ();
        };
        CheckError ( lib3mf_model_addbuilditem (m_pHandle, hObject, &Transform, &hBuildItemInstance) );
        return std::make_shared<CLib3MFBuildItem> (hBuildItemInstance);
    }
    
    /**
    * CLib3MFModel::RemoveBuildItem - removes a build item from the model
    * @param[in] pBuildItemInstance - Build item to remove.
    */
    void CLib3MFModel::RemoveBuildItem (CLib3MFBuildItem * pBuildItemInstance)
    {
        Lib3MFHandle hBuildItemInstance = nullptr;
        if (pBuildItemInstance != nullptr) {
            hBuildItemInstance = pBuildItemInstance->GetHandle ();
        };
        CheckError ( lib3mf_model_removebuilditem (m_pHandle, hBuildItemInstance) );
    }
    
    /**
    * CLib3MFModel::GetMetaDataGroup - Returns the metadatagroup of the model
    * @return returns an Instance of the metadatagroup of the model
    */
    PLib3MFMetaDataGroup CLib3MFModel::GetMetaDataGroup ()
    {
        Lib3MFHandle hMetaDataGroup = nullptr;
        CheckError ( lib3mf_model_getmetadatagroup (m_pHandle, &hMetaDataGroup) );
        return std::make_shared<CLib3MFMetaDataGroup> (hMetaDataGroup);
    }
    
    /**
    * CLib3MFModel::AddAttachment - adds an attachment stream to the model. The OPC part will be related to the model stream with a certain relationship type..
    * @param[in] sURI - Path of the attachment
    * @param[in] sRelationShipType - Relationship type of the attachment
    * @return Instance of the attachment object
    */
    PLib3MFAttachment CLib3MFModel::AddAttachment (const std::string & sURI, const std::string & sRelationShipType)
    {
        Lib3MFHandle hAttachmentInstance = nullptr;
        CheckError ( lib3mf_model_addattachmentutf8 (m_pHandle, sURI.c_str(), sRelationShipType.c_str(), &hAttachmentInstance) );
        return std::make_shared<CLib3MFAttachment> (hAttachmentInstance);
    }
    
    /**
    * CLib3MFModel::GetAttachment - retrieves an attachment stream object from the model..
    * @param[in] nIndex - Index of the attachment stream
    * @return Instance of the attachment object
    */
    PLib3MFAttachment CLib3MFModel::GetAttachment (const unsigned int nIndex)
    {
        Lib3MFHandle hAttachmentInstance = nullptr;
        CheckError ( lib3mf_model_getattachment (m_pHandle, nIndex, &hAttachmentInstance) );
        return std::make_shared<CLib3MFAttachment> (hAttachmentInstance);
    }
    
    /**
    * CLib3MFModel::FindAttachment - retrieves an attachment stream object from the model.
    * @param[in] sURI - Path URI in the package
    * @return Instance of the attachment object
    */
    PLib3MFAttachment CLib3MFModel::FindAttachment (const std::string & sURI)
    {
        Lib3MFHandle hAttachmentInstance = nullptr;
        CheckError ( lib3mf_model_findattachmentutf8 (m_pHandle, sURI.c_str(), &hAttachmentInstance) );
        return std::make_shared<CLib3MFAttachment> (hAttachmentInstance);
    }
    
    /**
    * CLib3MFModel::GetAttachmentCount - retrieves the number of attachments of the model.
    * @return Returns the number of attachments.
    */
    unsigned int CLib3MFModel::GetAttachmentCount ()
    {
        unsigned int resultAttachmentCount = 0;
        CheckError ( lib3mf_model_getattachmentcount (m_pHandle, &resultAttachmentCount) );
        return resultAttachmentCount;
    }
    
    /**
    * CLib3MFModel::GetAttachmentSize - retrieves the size of an attachment in bytes.
    * @param[in] nIndex - Index of the attachment stream
    * @return  Returns the size of the attachment in bytes.
    */
    unsigned long long CLib3MFModel::GetAttachmentSize (const unsigned int nIndex)
    {
        unsigned long long resultAttachmentSize = 0;
        CheckError ( lib3mf_model_getattachmentsize (m_pHandle, nIndex, &resultAttachmentSize) );
        return resultAttachmentSize;
    }
    
    /**
    * CLib3MFModel::GetAttachmentPath - retrieves the path URI of an attachment.
    * @param[in] nIndex - Index of the attachment stream
    * @return Attachment URI
    */
    std::string CLib3MFModel::GetAttachmentPath (const unsigned int nIndex)
    {
        unsigned int bytesNeededAttachmentURI = 0;
        unsigned int bytesWrittenAttachmentURI = 0;
        CheckError ( lib3mf_model_getattachmentpathutf8 (m_pHandle, nIndex, 0, &bytesNeededAttachmentURI, nullptr) );
        std::vector<char> bufferAttachmentURI;
        bufferAttachmentURI.resize(bytesNeededAttachmentURI + 2);
        CheckError ( lib3mf_model_getattachmentpathutf8 (m_pHandle, nIndex, bytesNeededAttachmentURI, &bytesWrittenAttachmentURI, &bufferAttachmentURI[0]) );
        bufferAttachmentURI[bytesNeededAttachmentURI + 1] = 0;
        return std::string(&bufferAttachmentURI[0]);
    }
    
    /**
    * CLib3MFModel::HasPackageThumbnailAttachment - Retrieve whether the OPC package contains a package thumbnail.
    * @return returns whether the OPC package contains a package thumbnail
    */
    bool CLib3MFModel::HasPackageThumbnailAttachment ()
    {
        bool resultHasThumbnail = 0;
        CheckError ( lib3mf_model_haspackagethumbnailattachment (m_pHandle, &resultHasThumbnail) );
        return resultHasThumbnail;
    }
    
    /**
    * CLib3MFModel::CreatePackageThumbnailAttachment - Create a new a package thumbnail for the OPC package.
    * @return Instance of a new thumbnailattachment object.
    */
    PLib3MFAttachment CLib3MFModel::CreatePackageThumbnailAttachment ()
    {
        Lib3MFHandle hAttachment = nullptr;
        CheckError ( lib3mf_model_createpackagethumbnailattachment (m_pHandle, &hAttachment) );
        return std::make_shared<CLib3MFAttachment> (hAttachment);
    }
    
    /**
    * CLib3MFModel::GetPackageThumbnailAttachment - Get the attachment to the OPC package containing the package thumbnail.
    * @return Instance of the thumbnailattachment object.
    */
    PLib3MFAttachment CLib3MFModel::GetPackageThumbnailAttachment ()
    {
        Lib3MFHandle hAttachment = nullptr;
        CheckError ( lib3mf_model_getpackagethumbnailattachment (m_pHandle, &hAttachment) );
        return std::make_shared<CLib3MFAttachment> (hAttachment);
    }
    
    /**
    * CLib3MFModel::RemovePackageThumbnailAttachment - Remove the attachment to the OPC package containing the package thumbnail.
    */
    void CLib3MFModel::RemovePackageThumbnailAttachment ()
    {
        CheckError ( lib3mf_model_removepackagethumbnailattachment (m_pHandle) );
    }
    
    /**
    * CLib3MFModel::AddCustomContentType - adds a new Content Type to the model.
    * @param[in] sExtension - File Extension
    * @param[in] sContentType - Content Type Identifier
    */
    void CLib3MFModel::AddCustomContentType (const std::string & sExtension, const std::string & sContentType)
    {
        CheckError ( lib3mf_model_addcustomcontenttypeutf8 (m_pHandle, sExtension.c_str(), sContentType.c_str()) );
    }
    
    /**
    * CLib3MFModel::RemoveCustomContentType - removes a custom Content Type from the model (UTF8 version).
    * @param[in] sExtension - File Extension
    */
    void CLib3MFModel::RemoveCustomContentType (const std::string & sExtension)
    {
        CheckError ( lib3mf_model_removecustomcontenttypeutf8 (m_pHandle, sExtension.c_str()) );
    }
    
    /**
    * CLib3MFWrapper::GetLibraryVersion - retrieves the current version of the library.
    * @param[out] nMajor - returns the major version of the library
    * @param[out] nMinor - returns the minor version of the library
    * @param[out] nMicro - returns the micro version of the library
    */
    void CLib3MFWrapper::GetLibraryVersion (unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro)
    {
        CheckError (nullptr, lib3mf_getlibraryversion (&nMajor, &nMinor, &nMicro) );
    }
    
    /**
    * CLib3MFWrapper::GetSpecificationVersion - retrieves whether a specification is supported, and if so, which version.
    * @param[in] sSpecificationURL - URL of extension to check
    * @param[out] bIsSupported - returns whether this specification is supported
    * @param[out] nMajor - returns the major version of the extension (if IsSupported)
    * @param[out] nMinor - returns the minor version of the extension (if IsSupported)
    * @param[out] nMicro - returns the micro version of the extension (if IsSupported)
    */
    void CLib3MFWrapper::GetSpecificationVersion (const std::string & sSpecificationURL, bool & bIsSupported, unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro)
    {
        CheckError (nullptr, lib3mf_getspecificationversion (sSpecificationURL.c_str(), &bIsSupported, &nMajor, &nMinor, &nMicro) );
    }
    
    /**
    * CLib3MFWrapper::CreateModel - creates an empty model instance.
    * @return returns an empty model instance
    */
    PLib3MFModel CLib3MFWrapper::CreateModel ()
    {
        Lib3MFHandle hModel = nullptr;
        CheckError (nullptr, lib3mf_createmodel (&hModel) );
        return std::make_shared<CLib3MFModel> (hModel);
    }
    
    /**
    * CLib3MFWrapper::Release - releases an object instance
    * @param[in] pInstance - releases the memory of the passed object.
    */
    void CLib3MFWrapper::Release (CLib3MFBaseClass * pInstance)
    {
        Lib3MFHandle hInstance = nullptr;
        if (pInstance != nullptr) {
            hInstance = pInstance->GetHandle ();
        };
        CheckError (nullptr, lib3mf_release (hInstance) );
    }
    
    /**
    * CLib3MFWrapper::SetJournal - Sets the journal file path
    * @param[in] sJournalPath - File name of the journal file
    */
    void CLib3MFWrapper::SetJournal (const std::string & sJournalPath)
    {
        CheckError (nullptr, lib3mf_setjournal (sJournalPath.c_str()) );
    }

    void CLib3MFWrapper::CheckError(Lib3MFHandle handle, Lib3MFResult nResult)
    {
        if (nResult != 0) 
            throw ELib3MFException (nResult);
    }


};

