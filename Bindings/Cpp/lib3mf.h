/*++

Copyright (C) 2018 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Abstract: This is an autogenerated plain C Header file in order to allow an easy
 use of the 3MF Library
Interface version: 1.2.2

*/

#ifndef __LIB3MF_HEADER
#define __LIB3MF_HEADER

#ifdef __LIB3MF_DLL
#define LIB3MF_DECLSPEC __declspec (dllexport)
#else // __LIB3MF_DLL
#define LIB3MF_DECLSPEC
#endif // __LIB3MF_DLL

#include "lib3mf_types.h"

extern "C" {

/*************************************************************************************************************************
 Class definition for Writer
**************************************************************************************************************************/

/**
* Writes out the model as file. The file type is specified by the Model Writer class.
*
* @param[in] pWriter - Writer instance.
* @param[in] pFilename - Filename to write into
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_writetofileutf8 (Lib3MF_Writer pWriter, const char * pFilename);

/**
* Retrieves the size of the full 3MF file stream.
*
* @param[in] pWriter - Writer instance.
* @param[out] pStreamSize - the stream size
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_getstreamsize (Lib3MF_Writer pWriter, unsigned long long * pStreamSize);

/**
* Writes out the 3MF file into a memory buffer
*
* @param[in] pWriter - Writer instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8 buffer of buffer to write into
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_writetobuffer (Lib3MF_Writer pWriter, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for Reader
**************************************************************************************************************************/

/**
* Reads a model from a file. The file type is specified by the Model Reader class
*
* @param[in] pReader - Reader instance.
* @param[in] pFilename - Filename to read from
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_readfromfileutf8 (Lib3MF_Reader pReader, const char * pFilename);

/**
* Reads a model from a memory buffer.
*
* @param[in] pReader - Reader instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[in] pBufferBuffer - uint8 buffer of Buffer to read from
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_readfrombuffer (Lib3MF_Reader pReader, const unsigned int nBufferBufferSize, const unsigned char * pBufferBuffer);

/**
* Adds a relationship type which shall be read as attachment in memory while loading
*
* @param[in] pReader - Reader instance.
* @param[in] pRelationShipType - String of the relationship type
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_addrelationtoreadutf8 (Lib3MF_Reader pReader, const char * pRelationShipType);

/**
* Removes a relationship type which shall be read as attachment in memory while loading
*
* @param[in] pReader - Reader instance.
* @param[in] pRelationShipType - String of the relationship type
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_removerelationtoreadutf8 (Lib3MF_Reader pReader, const char * pRelationShipType);

/**
* Activates (deactivates) the strict mode of the reader.
*
* @param[in] pReader - Reader instance.
* @param[in] bStrictModeActive - flag whether strict mode is active or not.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_setstrictmodeactive (Lib3MF_Reader pReader, bool bStrictModeActive);

/**
* Queries whether the strict mode of the reader is active or not
*
* @param[in] pReader - Reader instance.
* @param[out] pStrictModeActive - returns flag whether strict mode is active or not.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getstrictmodeactive (Lib3MF_Reader pReader, bool * pStrictModeActive);

/**
* Returns Warning and Error Information of the read process
*
* @param[in] pReader - Reader instance.
* @param[in] nIndex - Index of the Warning. Valid values are 0 to WarningCount - 1
* @param[out] pErrorCode - filled with the error code of the warning
* @param[in] nWarningBufferSize - size of the buffer (including trailing 0)
* @param[out] pWarningNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pWarningBuffer -  buffer of the message of the warning, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getwarningutf8 (Lib3MF_Reader pReader, unsigned int nIndex, unsigned int * pErrorCode, const unsigned int nWarningBufferSize, unsigned int * pWarningNeededChars, char * pWarningBuffer);

/**
* Returns Warning and Error Count of the read process
*
* @param[in] pReader - Reader instance.
* @param[out] pCount - filled with the count of the occurred warnings.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getwarningcount (Lib3MF_Reader pReader, unsigned int * pCount);

/*************************************************************************************************************************
 Class definition for Resource
**************************************************************************************************************************/

/**
* Retrieves the resource id of the resource instance.
*
* @param[in] pResource - Resource instance.
* @param[out] pId - Retrieves the ID of a Model Resource Instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resource_getresourceid (Lib3MF_Resource pResource, unsigned int * pId);

/*************************************************************************************************************************
 Class definition for ResourceIterator
**************************************************************************************************************************/

/**
* Iterates to the next resource in the list.
*
* @param[in] pResourceIterator - ResourceIterator instance.
* @param[out] pHasNext - Iterates to the next resource in the list.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_movenext (Lib3MF_ResourceIterator pResourceIterator, bool * pHasNext);

/**
* Iterates to the previous resource in the list.
*
* @param[in] pResourceIterator - ResourceIterator instance.
* @param[out] pHasPrevious - Iterates to the previous resource in the list.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_moveprevious (Lib3MF_ResourceIterator pResourceIterator, bool * pHasPrevious);

/**
* Returns the resource the iterator points at.
*
* @param[in] pResourceIterator - ResourceIterator instance.
* @param[out] pResource - returns the resource instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_getcurrent (Lib3MF_ResourceIterator pResourceIterator, Lib3MF_Resource * pResource);

/**
* Creates a new resource iterator with the same resource list.
*
* @param[in] pResourceIterator - ResourceIterator instance.
* @param[out] pOutResourceIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_clone (Lib3MF_ResourceIterator pResourceIterator, Lib3MF_ResourceIterator * pOutResourceIterator);

/*************************************************************************************************************************
 Class definition for PropertyHandler
**************************************************************************************************************************/

/**
* Removes all properties of a specific triangle.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_removeproperty (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex);

/**
* Removes all properties of the triangle mesh.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_removeallproperties (Lib3MF_PropertyHandler pPropertyHandler);

/**
* Returns the property type of the specific triangle.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[out] pPropertyType - property type of the triangle.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getpropertytype (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, eLib3MFPropertyType * pPropertyType);

/**
* Returns the base material of a specific triangle.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[out] pMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
* @param[out] pMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getbasematerial (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned int * pMaterialGroupId, unsigned int * pMaterialIndex);

/**
* Sets the material of a triangle to a specific single value. All other Triangle properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] nMaterialGroupId - Group ID of the Material Group
* @param[in] nMaterialIndex - Index of the Material in the Group
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setbasematerial (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned int nMaterialGroupId, unsigned int nMaterialIndex);

/**
* Sets the materials of all triangles to specific values.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nMaterialGroupIdsBufferSize - Number of elements in buffer
* @param[in] pMaterialGroupIdsBuffer - uint32 buffer of array of the material Group IDs. Must have trianglecount entries.
* @param[in] nMaterialIndicesBufferSize - Number of elements in buffer
* @param[in] pMaterialIndicesBuffer - uint32 buffer of array of the corresponding material indices. Must have trianglecount entries.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setbasematerialarray (Lib3MF_PropertyHandler pPropertyHandler, const unsigned int nMaterialGroupIdsBufferSize, const unsigned int * pMaterialGroupIdsBuffer, const unsigned int nMaterialIndicesBufferSize, const unsigned int * pMaterialIndicesBuffer);

/**
* Gets the materials of all triangles.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nMaterialGroupIdsBufferSize - Number of elements in buffer
* @param[out] pMaterialGroupIdsNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pMaterialGroupIdsBuffer - uint32 buffer of array of the material Group IDs. Must have trianglecount entries.
* @param[in] nMaterialIndicesBufferSize - Number of elements in buffer
* @param[out] pMaterialIndicesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pMaterialIndicesBuffer - uint32 buffer of array of the corresponding material indices. Must have trianglecount entries.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getbasematerialarray (Lib3MF_PropertyHandler pPropertyHandler, const unsigned int nMaterialGroupIdsBufferSize, unsigned int * pMaterialGroupIdsNeededCount, unsigned int * pMaterialGroupIdsBuffer, const unsigned int nMaterialIndicesBufferSize, unsigned int * pMaterialIndicesNeededCount, unsigned int * pMaterialIndicesBuffer);

/**
* Sets the specific triangle to a single color. All other properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] pColor - new color value of the triangle. (#00000000) means no color property.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolor (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, const sLib3MFColorRGBA * pColor);

/**
* Sets the specific triangle to a single color with alpha 255. All other properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] nRed - New red value of the color of the triangle (0-255)
* @param[in] nGreen - New green value of the color of the triangle (0-255)
* @param[in] nBlue - New blue value of the color of the triangle (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorrgb (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue);

/**
* Sets the specific triangle to a single color. All other properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] nRed - New red value of the color of the triangle (0-255)
* @param[in] nGreen - New green value of the color of the triangle (0-255)
* @param[in] nBlue - New blue value of the color of the triangle (0-255)
* @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorrgba (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha);

/**
* Sets the specific triangle to a single color with alpha 255. All other properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] fRed - New red value of the color of the triangle (0-1)
* @param[in] fGreen - New green value of the color of the triangle (0-1)
* @param[in] fBlue - New blue value of the color of the triangle (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorfloatrgb (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, float fRed, float fGreen, float fBlue);

/**
* Sets the specific triangle to a single color. All other properties are removed.
*
* @param[in] pPropertyHandler - PropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] fRed - New red value of the color of the triangle (0-1)
* @param[in] fGreen - New green value of the color of the triangle (0-1)
* @param[in] fBlue - New blue value of the color of the triangle (0-1)
* @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorfloatrgba (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, float fRed, float fGreen, float fBlue, float fAlpha);

/*************************************************************************************************************************
 Class definition for DefaultPropertyHandler
**************************************************************************************************************************/

/**
* Removes the default property of the object.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_removeproperty (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler);

/**
* Returns the default property type of the object.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[out] pPropertyType - property type of the triangle.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_getpropertytype (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int nIndex, eLib3MFPropertyType * pPropertyType);

/**
* Returns the base material the object.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[out] pMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
* @param[out] pMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_getbasematerial (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pMaterialGroupId, unsigned int * pMaterialIndex);

/**
* Sets the material of an object to a specific single value. This must be a base material.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] nMaterialGroupId - Group ID of the Material Group
* @param[in] nMaterialIndex - Index of the Material in the Group
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setbasematerial (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int nMaterialGroupId, unsigned int nMaterialIndex);

/**
* Sets the default property of an object to a single color.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] nRed - New red value of the color of the triangle (0-255)
* @param[in] nGreen - New green value of the color of the triangle (0-255)
* @param[in] nBlue - New blue value of the color of the triangle (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setcolorrgb (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned char nRed, unsigned char nGreen, unsigned char nBlue);

/**
* Sets the default property of an object to a single color.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] nRed - New red value of the color of the triangle (0-255)
* @param[in] nGreen - New green value of the color of the triangle (0-255)
* @param[in] nBlue - New blue value of the color of the triangle (0-255)
* @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setcolorrgba (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha);

/**
* Sets the default property of an object to a single color.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] fRed - New red value of the color of the triangle (0-1)
* @param[in] fGreen - New green value of the color of the triangle (0-1)
* @param[in] fBlue - New blue value of the color of the triangle (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setfloatcolorrgb (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, float fRed, float fGreen, float fBlue);

/**
* Sets the default property of an object to a single color.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[in] fRed - New red value of the color of the triangle (0-1)
* @param[in] fGreen - New green value of the color of the triangle (0-1)
* @param[in] fBlue - New blue value of the color of the triangle (0-1)
* @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setfloatcolorrgba (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, float fRed, float fGreen, float fBlue, float fAlpha);

/**
* Returns the default 2D texture information of an object.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[out] pTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
* @param[out] pU - Returns the default U value of the object.
* @param[out] pV - Returns the default V value of the object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_gettexture (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pTextureID, float * pU, float * pV);

/**
* Sets the default 2D texture information of an object.
*
* @param[in] pDefaultPropertyHandler - DefaultPropertyHandler instance.
* @param[out] pTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
* @param[out] pU - Returns the default U value of the object.
* @param[out] pV - Returns the default V value of the object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_settexture (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pTextureID, float * pU, float * pV);

/*************************************************************************************************************************
 Class definition for MetaData
**************************************************************************************************************************/

/**
* returns the namespace URL of the metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of the namespace URL of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getnamespaceutf8 (Lib3MF_MetaData pMetaData, const unsigned int nNameSpaceBufferSize, unsigned int * pNameSpaceNeededChars, char * pNameSpaceBuffer);

/**
* sets a new namespace URL of the metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] pNameSpace - the new namespace URL of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setnamespaceutf8 (Lib3MF_MetaData pMetaData, const char * pNameSpace);

/**
* returns the name of a metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of the name of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getnameutf8 (Lib3MF_MetaData pMetaData, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer);

/**
* sets a new name of a metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] pName - the new name of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setnameutf8 (Lib3MF_MetaData pMetaData, const char * pName);

/**
* returns, whether a metadata must be preserved
*
* @param[in] pMetaData - MetaData instance.
* @param[out] pMustPreserve - returns, whether a metadata must be preserved
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getmustpreserveutf8 (Lib3MF_MetaData pMetaData, bool * pMustPreserve);

/**
* sets whether a metadata must be preserved
*
* @param[in] pMetaData - MetaData instance.
* @param[in] bMustPreserve - a new value whether a metadata must be preserved
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setmustpreserveutf8 (Lib3MF_MetaData pMetaData, bool bMustPreserve);

/**
* returns the type of a metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] nTypeBufferSize - size of the buffer (including trailing 0)
* @param[out] pTypeNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pTypeBuffer -  buffer of the type of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_gettypeutf8 (Lib3MF_MetaData pMetaData, const unsigned int nTypeBufferSize, unsigned int * pTypeNeededChars, char * pTypeBuffer);

/**
* sets a new type of a metadata. This must be a simple XML type
*
* @param[in] pMetaData - MetaData instance.
* @param[in] pType - a new type of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_settypeutf8 (Lib3MF_MetaData pMetaData, const char * pType);

/**
* returns the value of the metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] nValueBufferSize - size of the buffer (including trailing 0)
* @param[out] pValueNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pValueBuffer -  buffer of the value of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getvalueutf8 (Lib3MF_MetaData pMetaData, const unsigned int nValueBufferSize, unsigned int * pValueNeededChars, char * pValueBuffer);

/**
* sets a new value of the metadata
*
* @param[in] pMetaData - MetaData instance.
* @param[in] pValue - a new value of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setvalueutf8 (Lib3MF_MetaData pMetaData, const char * pValue);

/*************************************************************************************************************************
 Class definition for MetaDataGroup
**************************************************************************************************************************/

/**
* returns the number of metadata in this metadatagroup
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[out] pCount - returns the number metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatacount (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int * pCount);

/**
* returns a metadata key within this metadatagroup
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] nIndex - Index of the metadata.
* @param[in] nNameSpaceBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameSpaceNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameSpaceBuffer -  buffer of the namespace of the metadata, may be NULL
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of the name of the metadata, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatakeyutf8 (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex, const unsigned int nNameSpaceBufferSize, unsigned int * pNameSpaceNeededChars, char * pNameSpaceBuffer, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer);

/**
* returns a metadata value within this metadatagroup
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] nIndex - Index of the Metadata.
* @param[out] pMetaData - an instance of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatautf8 (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex, Lib3MF_MetaData * pMetaData);

/**
* returns a metadata value within this metadatagroup
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] pNameSpace - the namespace of the metadata
* @param[in] pName - the name of the Metadata
* @param[out] pMetaData - an instance of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatabykeyutf8 (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName, Lib3MF_MetaData * pMetaData);

/**
* removes metadata pair from the model.
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] nIndex -  Index of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_removemetadata (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex);

/**
* removes metadata pair from the model.
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] pNameSpace - the namespace of the metadata
* @param[in] pName - the name of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_removemetadatabykey (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName);

/**
* adds a new metadata to this metadatagroup
*
* @param[in] pMetaDataGroup - MetaDataGroup instance.
* @param[in] pNameSpace - the namespace of the metadata
* @param[in] pName - the name of the metadata
* @param[out] pMetaData - an instance of the metadata
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_addmetadatautf8 (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName, Lib3MF_MetaData * pMetaData);

/*************************************************************************************************************************
 Class definition for Object
**************************************************************************************************************************/

/**
* Retrieves a object's type
*
* @param[in] pObject - Object instance.
* @param[out] pObjectType - returns object type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_gettype (Lib3MF_Object pObject, eLib3MFObjectType * pObjectType);

/**
* Sets an object's type
*
* @param[in] pObject - Object instance.
* @param[in] eObjectType - object type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_settype (Lib3MF_Object pObject, eLib3MFObjectType eObjectType);

/**
* Retrieves an object's name
*
* @param[in] pObject - Object instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns object name., may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getnameutf8 (Lib3MF_Object pObject, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer);

/**
* Sets an object's name string
*
* @param[in] pObject - Object instance.
* @param[in] pName - new object name.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_setnameutf8 (Lib3MF_Object pObject, const char * pName);

/**
* Retrieves an object's part number
*
* @param[in] pObject - Object instance.
* @param[in] nPartNumberBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartNumberNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartNumberBuffer -  buffer of returns object part number., may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getpartnumberutf8 (Lib3MF_Object pObject, const unsigned int nPartNumberBufferSize, unsigned int * pPartNumberNeededChars, char * pPartNumberBuffer);

/**
* Sets an object's partnumber string
*
* @param[in] pObject - Object instance.
* @param[in] pPartNumber - new object part number.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_setpartnumberutf8 (Lib3MF_Object pObject, const char * pPartNumber);

/**
* Retrieves, if an object is a mesh object
*
* @param[in] pObject - Object instance.
* @param[out] pIsMeshObject - returns, whether the object is a mesh object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_ismeshobject (Lib3MF_Object pObject, bool * pIsMeshObject);

/**
* Retrieves, if an object is a components object
*
* @param[in] pObject - Object instance.
* @param[out] pIsComponentsObject - returns, whether the object is a components object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_iscomponentsobject (Lib3MF_Object pObject, bool * pIsComponentsObject);

/**
* Retrieves, if the object is valid according to the core spec.|For mesh objects, we distinguish between the type attribute of the object:|In case of object type 'other', this always means 'false'.|In case of object type 'model' or 'solidsupport', this means, if the mesh suffices all requirements of the core spec chapter 4.1.|In case of object type 'support' or 'surface', this always means 'true'.|A component objects is valid if and only if it contains at least one component and all child components are valid objects.
*
* @param[in] pObject - Object instance.
* @param[out] pIsValid - returns, whether the object is a valid object description
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_isvalid (Lib3MF_Object pObject, bool * pIsValid);

/**
* Returns whether the object has a metadatagroup
*
* @param[in] pObject - Object instance.
* @param[out] pHasMetaDataGroup - returns whether the object has a metadatagroup
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_hasmetadatagroup (Lib3MF_Object pObject, bool * pHasMetaDataGroup);

/**
* Returns the metadatagroup of this object
*
* @param[in] pObject - Object instance.
* @param[out] pMetaDataGroup - returns an Instance of the metadatagroup of this object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getmetadatagroup (Lib3MF_Object pObject, Lib3MF_MetaDataGroup * pMetaDataGroup);

/**
* Creates a new metadatagroup for this object
*
* @param[in] pObject - Object instance.
* @param[out] pMetaDataGroup - returns an Instance of a new metadatagroup for this object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_createmetadatagroup (Lib3MF_Object pObject, Lib3MF_MetaDataGroup * pMetaDataGroup);

/**
* Removes the object's metadatagroup
*
* @param[in] pObject - Object instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_removemetadatagroup (Lib3MF_Object pObject);

/*************************************************************************************************************************
 Class definition for MeshObject
**************************************************************************************************************************/

/**
* Returns the vertex count of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pVertexCount - filled with the vertex count.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getvertexcount (Lib3MF_MeshObject pMeshObject, unsigned int * pVertexCount);

/**
* Returns the triangle count of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pVertexCount - filled with the triangle count.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettrianglecount (Lib3MF_MeshObject pMeshObject, unsigned int * pVertexCount);

/**
* Sets the coordinates of a single vertex of a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndex - Index of the vertex (0 to vertexcount - 1)
* @param[in] pCoordinates - contains the vertex coordinates.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setvertex (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFPosition * pCoordinates);

/**
* Adds a single vertex to a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] pCoordinates - contains the vertex coordinates.
* @param[out] pNewIndex - Index of the new vertex
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addvertex (Lib3MF_MeshObject pMeshObject, const sLib3MFPosition * pCoordinates, unsigned int * pNewIndex);

/**
* Returns indices of a single triangle of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[out] pIndices - filled with the triangle indices.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettriangle (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, sLib3MFTriangle * pIndices);

/**
* Sets the indices of a single triangle of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
* @param[in] pIndices - contains the triangle indices.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_settriangle (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFTriangle * pIndices);

/**
* Adds a single triangle to a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] pIndices - contains the triangle indices.
* @param[out] pNewIndex - Index of the new triangle
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addtriangle (Lib3MF_MeshObject pMeshObject, const sLib3MFTriangle * pIndices, unsigned int * pNewIndex);

/**
* Get all triangles of a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndicesBufferSize - Number of elements in buffer
* @param[out] pIndicesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pIndicesBuffer - Triangle buffer of contains the triangle indices.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettriangleindices (Lib3MF_MeshObject pMeshObject, const unsigned int nIndicesBufferSize, unsigned int * pIndicesNeededCount, sLib3MFTriangle * pIndicesBuffer);

/**
* Set all triangles of a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndicesBufferSize - Number of elements in buffer
* @param[in] pIndicesBuffer - Triangle buffer of contains the triangle indices.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_settriangleindices (Lib3MF_MeshObject pMeshObject, const unsigned int nIndicesBufferSize, const sLib3MFTriangle * pIndicesBuffer);

/**
* Returns the minimal length of beams for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pMinLength - minimal length of beams for the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_minlength (Lib3MF_MeshObject pMeshObject, double * pMinLength);

/**
* Sets the minimal length of beams for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] dMinLength - minimal length of beams for the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_minlength (Lib3MF_MeshObject pMeshObject, double dMinLength);

/**
* Returns the default radius for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pRadius - default radius of the beams in the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_radius (Lib3MF_MeshObject pMeshObject, double * pRadius);

/**
* Sets the default radius for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] dRadius - default radius of the beams in the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_radius (Lib3MF_MeshObject pMeshObject, double dRadius);

/**
* Returns the default capping mode for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pCapMode - default cap mode of the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_capmode (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeCapMode * pCapMode);

/**
* Sets the default capping mode for the beamlattice.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] eCapMode - default cap mode of the beamlattice
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_capmode (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeCapMode eCapMode);

/**
* Returns the clipping mode and the clipping-mesh for the beamlattice of this mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pClipMode - contains the clip mode of this mesh
* @param[out] pResourceID - filled with the resourceID of the clipping mesh-object or an undefined value if pClipMode is MODELBEAMLATTICECLIPMODE_NONE
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_clipping (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeClipMode * pClipMode, unsigned int * pResourceID);

/**
* Sets the clipping mode and the clipping-mesh for the beamlattice of this mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] eClipMode - contains the clip mode of this mesh
* @param[in] nResourceID - the resourceID of the clipping mesh-object. This mesh-object has to be defined before setting the Clipping.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_clipping (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeClipMode eClipMode, unsigned int nResourceID);

/**
* Returns the representation-mesh for the beamlattice of this mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pHasRepresentation - flag whether the beamlattice has a representation mesh.
* @param[out] pResourceID - filled with the resourceID of the clipping mesh-object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_representation (Lib3MF_MeshObject pMeshObject, bool * pHasRepresentation, unsigned int * pResourceID);

/**
* Sets the representation-mesh for the beamlattice of this mesh.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nResourceID - the resourceID of the representation mesh-object. This mesh-object has to be defined before setting the representation.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_representation (Lib3MF_MeshObject pMeshObject, unsigned int nResourceID);

/**
* Returns the beam count of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pCount - filled with the beam count.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamcount (Lib3MF_MeshObject pMeshObject, unsigned int * pCount);

/**
* Adds a single beam to a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] pBeamInfo - contains the node indices, radii and capmodes.
* @param[out] pIndex - filled with the new Index of the beam.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addbeam (Lib3MF_MeshObject pMeshObject, const sLib3MFBeam * pBeamInfo, unsigned int * pIndex);

/**
* Sets the indices, radii and capmodes of a single beam of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndex - Index of the beam (0 to beamcount - 1).
* @param[in] pBeamInfo - filled with the beam indices, radii and capmodes.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeam (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFBeam * pBeamInfo);

/**
* Returns the number of beamsets of a mesh object.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pCount - filled with the beamset count.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamsetcount (Lib3MF_MeshObject pMeshObject, unsigned int * pCount);

/**
* Adds an empty beamset to a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pBeamSet - the new beamset
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addbeamset (Lib3MF_MeshObject pMeshObject, Lib3MF_BeamSet * pBeamSet);

/**
* Returns a beamset of a mesh object
*
* @param[in] pMeshObject - MeshObject instance.
* @param[in] nIndex - index of the requested beamset (0 ... beamsetcount-1).
* @param[out] pBeamSet - the requested beamset
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamset (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, Lib3MF_BeamSet * pBeamSet);

/**
* Retrieves, if an object describes a topologically oriented and manifold mesh, according to the core spec.
*
* @param[in] pMeshObject - MeshObject instance.
* @param[out] pIsManifoldAndOriented - returns, if the object is oriented and manifold.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_ismanifoldandoriented (Lib3MF_MeshObject pMeshObject, bool * pIsManifoldAndOriented);

/*************************************************************************************************************************
 Class definition for Component
**************************************************************************************************************************/

/**
* Returns the Resource Instance of the component..
*
* @param[in] pComponent - Component instance.
* @param[out] pObjectResource - filled with the Resource Instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getobjectresource (Lib3MF_Component pComponent, Lib3MF_Object * pObjectResource);

/**
* Returns the Resource ID of the component.
*
* @param[in] pComponent - Component instance.
* @param[out] pObjectResourceID - returns the Resource ID.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getobjectresourceid (Lib3MF_Component pComponent, unsigned int * pObjectResourceID);

/**
* returns, whether a component has a UUID and, if true, the component's UUID
*
* @param[in] pComponent - Component instance.
* @param[out] pHasUUID - flag whether the component has a UUID
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx', may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getuuidutf8 (Lib3MF_Component pComponent, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer);

/**
* sets the component's UUID
*
* @param[in] pComponent - Component instance.
* @param[in] pUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_setuuidutf8 (Lib3MF_Component pComponent, const char * pUUID);

/**
* Returns, if the component has a different transformation than the identity matrix
*
* @param[in] pComponent - Component instance.
* @param[out] pHasTransform - if true is returned, the transformation is not equal than the identity
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_hastransform (Lib3MF_Component pComponent, bool * pHasTransform);

/**
* Sets the transformation matrix of the component.
*
* @param[in] pComponent - Component instance.
* @param[in] pTransform - new transformation matrix
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_settransform (Lib3MF_Component pComponent, const sLib3MFTransform * pTransform);

/*************************************************************************************************************************
 Class definition for ComponentsObject
**************************************************************************************************************************/

/**
* Adds a new component to a component object.
*
* @param[in] pComponentsObject - ComponentsObject instance.
* @param[in] pObjectResource - object to add as component. May not lead to circular references!
* @param[in] pTransform - optional transform matrix for the component.
* @param[out] pComponentInstance - new component instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_addcomponent (Lib3MF_ComponentsObject pComponentsObject, Lib3MF_Object pObjectResource, const sLib3MFTransform * pTransform, Lib3MF_ComponentsObject * pComponentInstance);

/**
* Retrieves a component from a component object.
*
* @param[in] pComponentsObject - ComponentsObject instance.
* @param[in] nIndex - index of the component to retrieve (0 to componentcount - 1)
* @param[out] pComponentInstance - component instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_getcomponent (Lib3MF_ComponentsObject pComponentsObject, unsigned int nIndex, Lib3MF_ComponentsObject * pComponentInstance);

/**
*  Retrieves a component count of a component object.
*
* @param[in] pComponentsObject - ComponentsObject instance.
* @param[out] pCount - returns the component count
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_getcomponentcount (Lib3MF_ComponentsObject pComponentsObject, unsigned int * pCount);

/*************************************************************************************************************************
 Class definition for BeamSet
**************************************************************************************************************************/

/**
* Sets a beamset's name string
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] pName - new name of the beamset.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setnameutf8 (Lib3MF_BeamSet pBeamSet, const char * pName);

/**
* Retrieves a beamset's name string
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the beamset., may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getnameutf8 (Lib3MF_BeamSet pBeamSet, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer);

/**
* Sets a beamset's identifier string
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] pIdentifier - new name of the beamset.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setidentifierutf8 (Lib3MF_BeamSet pBeamSet, const char * pIdentifier);

/**
* Retrieves a beamset's identifier string
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] nIdentifierBufferSize - size of the buffer (including trailing 0)
* @param[out] pIdentifierNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pIdentifierBuffer -  buffer of returns the identifier of the beamset., may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getidentifierutf8 (Lib3MF_BeamSet pBeamSet, const unsigned int nIdentifierBufferSize, unsigned int * pIdentifierNeededChars, char * pIdentifierBuffer);

/**
* Retrieves the reference count of a beamset
*
* @param[in] pBeamSet - BeamSet instance.
* @param[out] pCount - returns the reference count
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getreferencecount (Lib3MF_BeamSet pBeamSet, unsigned int * pCount);

/**
* Sets the references of a beamset
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] nReferencesBufferSize - Number of elements in buffer
* @param[in] pReferencesBuffer - uint32 buffer of the new indices of all beams in this beamset
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setreferences (Lib3MF_BeamSet pBeamSet, const unsigned int nReferencesBufferSize, const unsigned int * pReferencesBuffer);

/**
* Retrieves the references of a beamset
*
* @param[in] pBeamSet - BeamSet instance.
* @param[in] nReferencesBufferSize - Number of elements in buffer
* @param[out] pReferencesNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pReferencesBuffer - uint32 buffer of retrieves the indices of all beams in this beamset
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getreferences (Lib3MF_BeamSet pBeamSet, const unsigned int nReferencesBufferSize, unsigned int * pReferencesNeededCount, unsigned int * pReferencesBuffer);

/*************************************************************************************************************************
 Class definition for BaseMaterial
**************************************************************************************************************************/

/**
* Retrieves the count of base materials in the material group.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[out] pCount - returns the count of base materials.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getcount (Lib3MF_BaseMaterial pBaseMaterial, unsigned int * pCount);

/**
* Retrieves the resource id of the material group.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[out] pResourceID - returns the id of the material group.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getresourceid (Lib3MF_BaseMaterial pBaseMaterial, unsigned int * pResourceID);

/**
* Adds a new material to the material group
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] pName - new name of the base material.
* @param[in] nRed - New red value of display color (0-255)
* @param[in] nGreen - New green value of display color (0-255)
* @param[in] nBlue - New blue value of display color (0-255)
* @param[out] pResourceIndex - returns new Index of the material in the material group.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_addmaterialutf8 (Lib3MF_BaseMaterial pBaseMaterial, const char * pName, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned int * pResourceIndex);

/**
* Removes a material from the material group.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_removematerial (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex);

/**
* Returns the base material's name
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] nNameBufferSize - size of the buffer (including trailing 0)
* @param[out] pNameNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pNameBuffer -  buffer of returns the name of the base material., may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getnameutf8 (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer);

/**
* Sets a base material's name
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] pName - new name of the base material.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setnameutf8 (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, const char * pName);

/**
* Sets a base material's display color. Alpha is set to 255.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] nRed - New red value of display color (0-255)
* @param[in] nGreen - New green value of display color (0-255)
* @param[in] nBlue - New blue value of display color (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorrgb (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue);

/**
* Sets a base material's display color.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] nRed - New red value of display color (0-255)
* @param[in] nGreen - New green value of display color (0-255)
* @param[in] nBlue - New blue value of display color (0-255)
* @param[in] nAlpha - New alpha value of display color (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorrgba (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha);

/**
* Sets a base material's display color. Alpha is set to 1.0.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] fRed - New red value of display color (0-1)
* @param[in] fGreen - New green value of display color (0-1)
* @param[in] fBlue - New blue value of display color (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorfloatrgb (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, float fRed, float fGreen, float fBlue);

/**
* Sets a base material's display color.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[in] fRed - New red value of display color (0-1)
* @param[in] fGreen - New green value of display color (0-1)
* @param[in] fBlue - New blue value of display color (0-1)
* @param[in] fAlpha - New alpha value of display color (0-1)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorfloatrgba (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, float fRed, float fGreen, float fBlue, float fAlpha);

/**
* Returns a base material's display color.
*
* @param[in] pBaseMaterial - BaseMaterial instance.
* @param[in] nResourceIndex - Index of the material in the material group.
* @param[out] pRed - Returns red value of display color (0-255)
* @param[out] pGreen - Returns green value of display color (0-255)
* @param[out] pBlue - Returns blue value of display color (0-255)
* @param[out] pAlpha - Returns blue value of display color (0-255)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getdisplaycolor (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char * pRed, unsigned char * pGreen, unsigned char * pBlue, unsigned char * pAlpha);

/*************************************************************************************************************************
 Class definition for Attachment
**************************************************************************************************************************/

/**
* Retrieves an attachment's package path.
*
* @param[in] pAttachment - Attachment instance.
* @param[in] nPathBufferSize - size of the buffer (including trailing 0)
* @param[out] pPathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPathBuffer -  buffer of returns the attachment's package path string, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getpathutf8 (Lib3MF_Attachment pAttachment, const unsigned int nPathBufferSize, unsigned int * pPathNeededChars, char * pPathBuffer);

/**
* Sets an attachment's package path.
*
* @param[in] pAttachment - Attachment instance.
* @param[in] pPath - new path of the attachment.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_setpathutf8 (Lib3MF_Attachment pAttachment, const char * pPath);

/**
* Retrieves an attachment's relationship type
*
* @param[in] pAttachment - Attachment instance.
* @param[in] nPathBufferSize - size of the buffer (including trailing 0)
* @param[out] pPathNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPathBuffer -  buffer of returns the attachment's package relationship type string, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getrelationshiptypeutf8 (Lib3MF_Attachment pAttachment, const unsigned int nPathBufferSize, unsigned int * pPathNeededChars, char * pPathBuffer);

/**
* Sets an attachment's relationship type.
*
* @param[in] pAttachment - Attachment instance.
* @param[in] pPath - new relationship type string.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_setrelationshiptypeutf8 (Lib3MF_Attachment pAttachment, const char * pPath);

/**
* Writes out the attachment as file.
*
* @param[in] pAttachment - Attachment instance.
* @param[in] pFileName - file to write into.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_writetofileutf8 (Lib3MF_Attachment pAttachment, const char * pFileName);

/**
* Reads an attachment from a file.
*
* @param[in] pAttachment - Attachment instance.
* @param[in] pFileName - file to read from.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_readfromfileutf8 (Lib3MF_Attachment pAttachment, const char * pFileName);

/**
* Retrieves the size of the attachment stream
*
* @param[in] pAttachment - Attachment instance.
* @param[out] pStreamSize - the stream size
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getstreamsize (Lib3MF_Attachment pAttachment, unsigned long long * pStreamSize);

/**
* Writes out the attachment into a buffer
*
* @param[in] pAttachment - Attachment instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8 buffer of Buffer to write into
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_writetobuffer (Lib3MF_Attachment pAttachment, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer);

/**
* Reads an attachment from a memory buffer
*
* @param[in] pAttachment - Attachment instance.
* @param[in] nBufferBufferSize - Number of elements in buffer
* @param[out] pBufferNeededCount - will be filled with the count of the written elements, or needed buffer size.
* @param[out] pBufferBuffer - uint8 buffer of Buffer to read from
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_readfrombuffer (Lib3MF_Attachment pAttachment, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer);

/*************************************************************************************************************************
 Class definition for Texture2D
**************************************************************************************************************************/

/**
* Retrieves the attachment located at the path of the texture.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[out] pAttachment - attachment that holds the texture's image information.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getattachment (Lib3MF_Texture2D pTexture2D, Lib3MF_Attachment * pAttachment);

/**
* Sets the texture's package path to the path of the attachment.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[in] pAttachment - attachment that holds the texture's image information.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setattachment (Lib3MF_Texture2D pTexture2D, Lib3MF_Attachment pAttachment);

/**
* Retrieves a texture's content type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[out] pContentType - returns content type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getcontenttype (Lib3MF_Texture2D pTexture2D, eLib3MFTextureType * pContentType);

/**
* Retrieves a texture's content type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[in] eContentType - new Content Type
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setcontenttype (Lib3MF_Texture2D pTexture2D, eLib3MFTextureType eContentType);

/**
* Retrieves a texture's tilestyle type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[out] pTileStyleU - returns tilestyle type enum.
* @param[out] pTileStyleV - returns tilestyle type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_gettilestyleuv (Lib3MF_Texture2D pTexture2D, eLib3MFTextureTileStyle * pTileStyleU, eLib3MFTextureTileStyle * pTileStyleV);

/**
* Sets a texture's tilestyle type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[in] eTileStyleU - new tilestyle type enum.
* @param[in] eTileStyleV - new tilestyle type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_settilestyleuv (Lib3MF_Texture2D pTexture2D, eLib3MFTextureTileStyle eTileStyleU, eLib3MFTextureTileStyle eTileStyleV);

/**
* Retrieves a texture's filter type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[out] pFilter - returns filter type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getfilter (Lib3MF_Texture2D pTexture2D, eLib3MFTextureFilter * pFilter);

/**
* Sets a texture's filter type.
*
* @param[in] pTexture2D - Texture2D instance.
* @param[in] eFilter - sets new filter type enum.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setfilter (Lib3MF_Texture2D pTexture2D, eLib3MFTextureFilter eFilter);

/*************************************************************************************************************************
 Class definition for BuildItem
**************************************************************************************************************************/

/**
* Retrieves the object resource associated to a build item
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pObjectResource - returns the associated resource instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjectresource (Lib3MF_BuildItem pBuildItem, Lib3MF_Resource * pObjectResource);

/**
* returns, whether a build item has a UUID and, if true, the build item's UUID
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pHasUUID - flag whether the build item has a UUID
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx', may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getuuidutf8 (Lib3MF_BuildItem pBuildItem, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer);

/**
* sets the build item's UUID
*
* @param[in] pBuildItem - BuildItem instance.
* @param[in] pUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setuuidutf8 (Lib3MF_BuildItem pBuildItem, const char * pUUID);

/**
* Retrieves the object resource id associated to a build item
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pId -  eturns the ID of the object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjectresourceid (Lib3MF_BuildItem pBuildItem, unsigned int * pId);

/**
* Checks, if a build item has a non-identity transformation matrix
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pHasTransform - returns true, if the transformation matrix is not the identity
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_hasobjecttransform (Lib3MF_BuildItem pBuildItem, bool * pHasTransform);

/**
* Retrieves a build item's transformation matrix.
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pTransform - returns the transformation matrix
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjecttransform (Lib3MF_BuildItem pBuildItem, sLib3MFTransform * pTransform);

/**
* Sets a build item's transformation matrix.
*
* @param[in] pBuildItem - BuildItem instance.
* @param[in] pTransform - new transformation matrix
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setobjecttransform (Lib3MF_BuildItem pBuildItem, const sLib3MFTransform * pTransform);

/**
* Retrieves a build item's part number string
*
* @param[in] pBuildItem - BuildItem instance.
* @param[in] nPartNumberBufferSize - size of the buffer (including trailing 0)
* @param[out] pPartNumberNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pPartNumberBuffer -  buffer of Returns a build item's part number string, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getpartnumberutf8 (Lib3MF_BuildItem pBuildItem, const unsigned int nPartNumberBufferSize, unsigned int * pPartNumberNeededChars, char * pPartNumberBuffer);

/**
* Sets a build item's part number string
*
* @param[in] pBuildItem - BuildItem instance.
* @param[in] pSetPartnumber - new part number string for referencing parts from the outside world
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setpartnumberutf8 (Lib3MF_BuildItem pBuildItem, const char * pSetPartnumber);

/**
* Returns whether the build item has a metadatagroup
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pHasMetaDataGroup - returns whether the build item has a metadatagroup
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_hasmetadatagroup (Lib3MF_BuildItem pBuildItem, bool * pHasMetaDataGroup);

/**
* Returns the metadatagroup of this build item
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pMetaDataGroup - returns an Instance of the metadatagroup of this build item
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getmetadatagroup (Lib3MF_BuildItem pBuildItem, Lib3MF_MetaDataGroup * pMetaDataGroup);

/**
* Creates a new metadatagroup for this build item
*
* @param[in] pBuildItem - BuildItem instance.
* @param[out] pMetaDataGroup - returns an Instance of a new metadatagroup for this build item
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_createmetadatagroup (Lib3MF_BuildItem pBuildItem, Lib3MF_MetaDataGroup * pMetaDataGroup);

/**
* Removes the build item's metadatagroup
*
* @param[in] pBuildItem - BuildItem instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_removemetadatagroup (Lib3MF_BuildItem pBuildItem);

/*************************************************************************************************************************
 Class definition for BuildItemIterator
**************************************************************************************************************************/

/**
* Iterates to the next build item in the list.
*
* @param[in] pBuildItemIterator - BuildItemIterator instance.
* @param[out] pHasNext - Iterates to the next build item in the list.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_movenext (Lib3MF_BuildItemIterator pBuildItemIterator, bool * pHasNext);

/**
* Iterates to the previous build item in the list.
*
* @param[in] pBuildItemIterator - BuildItemIterator instance.
* @param[out] pHasPrevious - Iterates to the previous build item in the list.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_moveprevious (Lib3MF_BuildItemIterator pBuildItemIterator, bool * pHasPrevious);

/**
* Returns the build item the iterator points at.
*
* @param[in] pBuildItemIterator - BuildItemIterator instance.
* @param[out] pBuildItem - returns the build item instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_getcurrent (Lib3MF_BuildItemIterator pBuildItemIterator, Lib3MF_BuildItem * pBuildItem);

/**
* Creates a new build item iterator with the same build item list.
*
* @param[in] pBuildItemIterator - BuildItemIterator instance.
* @param[out] pOutBuildItemIterator - returns the cloned Iterator instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_clone (Lib3MF_BuildItemIterator pBuildItemIterator, Lib3MF_BuildItemIterator * pOutBuildItemIterator);

/*************************************************************************************************************************
 Class definition for Model
**************************************************************************************************************************/

/**
* sets the units of a model.
*
* @param[in] pModel - Model instance.
* @param[in] eUnit - Unit enum value for the model unit
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setunit (Lib3MF_Model pModel, eLib3MFModelUnit eUnit);

/**
* returns the units of a model.
*
* @param[in] pModel - Model instance.
* @param[out] pUnit - Unit enum value for the model unit
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getunit (Lib3MF_Model pModel, eLib3MFModelUnit * pUnit);

/**
* retrieves the language of a model
*
* @param[in] pModel - Model instance.
* @param[in] nLanguageBufferSize - size of the buffer (including trailing 0)
* @param[out] pLanguageNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pLanguageBuffer -  buffer of language identifier, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getlanguageutf8 (Lib3MF_Model pModel, const unsigned int nLanguageBufferSize, unsigned int * pLanguageNeededChars, char * pLanguageBuffer);

/**
* sets the language of a model
*
* @param[in] pModel - Model instance.
* @param[in] pLanguage - language identifier
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setlanguageutf8 (Lib3MF_Model pModel, const char * pLanguage);

/**
* creates a model writer instance for a specific file type
*
* @param[in] pModel - Model instance.
* @param[in] pWriterClass -  string identifier for the file type
* @param[out] pWriterInstance -  string identifier for the file type
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_querywriter (Lib3MF_Model pModel, const char * pWriterClass, Lib3MF_Writer * pWriterInstance);

/**
* creates a model reader instance for a specific file type
*
* @param[in] pModel - Model instance.
* @param[in] pReaderClass -  string identifier for the file type
* @param[out] pReaderInstance -  string identifier for the file type
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_queryreader (Lib3MF_Model pModel, const char * pReaderClass, Lib3MF_Reader * pReaderInstance);

/**
* finds a model resource by its id
*
* @param[in] pModel - Model instance.
* @param[in] nResourceID - Resource ID
* @param[out] pResourceInstance - returns the resource instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getresourcebyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_Resource * pResourceInstance);

/**
* finds a model texture by its id
*
* @param[in] pModel - Model instance.
* @param[in] nResourceID - Resource ID
* @param[out] pTextureInstance - returns the texture2d instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_gettexture2dbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_Texture2D * pTextureInstance);

/**
* finds a model base material by its id
*
* @param[in] pModel - Model instance.
* @param[in] nResourceID - Resource ID
* @param[out] pBaseMaterialInstance - returns the basematerial instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbasematerialbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_BaseMaterial * pBaseMaterialInstance);

/**
* finds a mesh object by its id
*
* @param[in] pModel - Model instance.
* @param[in] nResourceID - Resource ID
* @param[out] pMeshObjectInstance - returns the mesh object instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmeshobjectbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_MeshObject * pMeshObjectInstance);

/**
* finds a components object by its id
*
* @param[in] pModel - Model instance.
* @param[in] nResourceID - Resource ID
* @param[out] pComponentsObjectInstance - returns the components object instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getcomponentsobjectbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_ComponentsObject * pComponentsObjectInstance);

/**
* returns, whether a build has a UUID and, if true, the build's UUID
*
* @param[in] pModel - Model instance.
* @param[out] pHasUUID - flag whether the build has a UUID
* @param[in] nUUIDBufferSize - size of the buffer (including trailing 0)
* @param[out] pUUIDNeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pUUIDBuffer -  buffer of the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx', may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbuilduuidutf8 (Lib3MF_Model pModel, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer);

/**
* sets the build's UUID
*
* @param[in] pModel - Model instance.
* @param[in] pUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setbuilduuidutf8 (Lib3MF_Model pModel, const char * pUUID);

/**
* creates a build item iterator instance with all build items.
*
* @param[in] pModel - Model instance.
* @param[out] pBuildItemIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbuilditems (Lib3MF_Model pModel, Lib3MF_BuildItemIterator * pBuildItemIterator);

/**
* creates a resource iterator instance with all resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getresources (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* creates a resource iterator instance with all object resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* creates a resource iterator instance with all mesh object resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmeshobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* creates a resource iterator instance with all components object resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getcomponentsobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* creates a resource iterator instance with all texture2d resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_get2dtextures (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* creates a resource iterator instance with all base material resources.
*
* @param[in] pModel - Model instance.
* @param[out] pResourceIterator - returns the iterator instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbasematerials (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator);

/**
* Merges all components and objects which are referenced by a build item. The memory is duplicated and a new model is created.
*
* @param[in] pModel - Model instance.
* @param[out] pMergedModelInstance - returns the merged model instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_mergetomodel (Lib3MF_Model pModel, Lib3MF_Model * pMergedModelInstance);

/**
* adds an empty mesh object to the model.
*
* @param[in] pModel - Model instance.
* @param[out] pMeshObjectInstance -  returns the mesh object instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addmeshobject (Lib3MF_Model pModel, Lib3MF_MeshObject * pMeshObjectInstance);

/**
* adds an empty component object to the model.
*
* @param[in] pModel - Model instance.
* @param[out] pComponentsObjectInstance -  returns the components object instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addcomponentsobject (Lib3MF_Model pModel, Lib3MF_ComponentsObject * pComponentsObjectInstance);

/**
* adds a texture2d resource to the model. Its path is given by that of an existing attachment.
*
* @param[in] pModel - Model instance.
* @param[in] pTextureAttachment - attachment containing the image data.
* @param[out] pTexture2DInstance - returns the new texture instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addtexture2dfromattachment (Lib3MF_Model pModel, Lib3MF_Attachment pTextureAttachment, Lib3MF_Texture2D * pTexture2DInstance);

/**
* adds an empty basematerials resource to the model.
*
* @param[in] pModel - Model instance.
* @param[out] pBaseMaterialGroupInstance - returns the new base material instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addbasematerialgroup (Lib3MF_Model pModel, Lib3MF_BaseMaterial * pBaseMaterialGroupInstance);

/**
* adds a build item to the model.
*
* @param[in] pModel - Model instance.
* @param[in] pObject - Object instance.
* @param[in] pTransform - Transformation matrix.
* @param[out] pBuildItemInstance - returns the build item instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addbuilditem (Lib3MF_Model pModel, Lib3MF_Object pObject, const sLib3MFTransform * pTransform, Lib3MF_BuildItem * pBuildItemInstance);

/**
* removes a build item from the model
*
* @param[in] pModel - Model instance.
* @param[in] pBuildItemInstance - Build item to remove.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removebuilditem (Lib3MF_Model pModel, Lib3MF_BuildItem pBuildItemInstance);

/**
* Returns the metadatagroup of the model
*
* @param[in] pModel - Model instance.
* @param[out] pMetaDataGroup - returns an Instance of the metadatagroup of the model
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmetadatagroup (Lib3MF_Model pModel, Lib3MF_MetaDataGroup * pMetaDataGroup);

/**
* adds an attachment stream to the model. The OPC part will be related to the model stream with a certain relationship type..
*
* @param[in] pModel - Model instance.
* @param[in] pURI - Path of the attachment
* @param[in] pRelationShipType - Relationship type of the attachment
* @param[out] pAttachmentInstance - Instance of the attachment object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addattachmentutf8 (Lib3MF_Model pModel, const char * pURI, const char * pRelationShipType, Lib3MF_Attachment * pAttachmentInstance);

/**
* retrieves an attachment stream object from the model..
*
* @param[in] pModel - Model instance.
* @param[in] nIndex - Index of the attachment stream
* @param[out] pAttachmentInstance - Instance of the attachment object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachment (Lib3MF_Model pModel, unsigned int nIndex, Lib3MF_Attachment * pAttachmentInstance);

/**
* retrieves an attachment stream object from the model.
*
* @param[in] pModel - Model instance.
* @param[in] pURI - Path URI in the package
* @param[out] pAttachmentInstance - Instance of the attachment object
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_findattachmentutf8 (Lib3MF_Model pModel, const char * pURI, Lib3MF_Attachment * pAttachmentInstance);

/**
* retrieves the number of attachments of the model.
*
* @param[in] pModel - Model instance.
* @param[out] pAttachmentCount - Returns the number of attachments.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentcount (Lib3MF_Model pModel, unsigned int * pAttachmentCount);

/**
* retrieves the size of an attachment in bytes.
*
* @param[in] pModel - Model instance.
* @param[in] nIndex - Index of the attachment stream
* @param[out] pAttachmentSize -  Returns the size of the attachment in bytes.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentsize (Lib3MF_Model pModel, unsigned int nIndex, unsigned long long * pAttachmentSize);

/**
* retrieves the path URI of an attachment.
*
* @param[in] pModel - Model instance.
* @param[in] nIndex - Index of the attachment stream
* @param[in] nAttachmentURIBufferSize - size of the buffer (including trailing 0)
* @param[out] pAttachmentURINeededChars - will be filled with the count of the written bytes, or needed buffer size.
* @param[out] pAttachmentURIBuffer -  buffer of Attachment URI, may be NULL
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentpathutf8 (Lib3MF_Model pModel, unsigned int nIndex, const unsigned int nAttachmentURIBufferSize, unsigned int * pAttachmentURINeededChars, char * pAttachmentURIBuffer);

/**
* Retrieve whether the OPC package contains a package thumbnail.
*
* @param[in] pModel - Model instance.
* @param[out] pHasThumbnail - returns whether the OPC package contains a package thumbnail
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_haspackagethumbnailattachment (Lib3MF_Model pModel, bool * pHasThumbnail);

/**
* Create a new a package thumbnail for the OPC package.
*
* @param[in] pModel - Model instance.
* @param[out] pAttachment - Instance of a new thumbnailattachment object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_createpackagethumbnailattachment (Lib3MF_Model pModel, Lib3MF_Attachment * pAttachment);

/**
* Get the attachment to the OPC package containing the package thumbnail.
*
* @param[in] pModel - Model instance.
* @param[out] pAttachment - Instance of the thumbnailattachment object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getpackagethumbnailattachment (Lib3MF_Model pModel, Lib3MF_Attachment * pAttachment);

/**
* Remove the attachment to the OPC package containing the package thumbnail.
*
* @param[in] pModel - Model instance.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removepackagethumbnailattachment (Lib3MF_Model pModel);

/**
* adds a new Content Type to the model.
*
* @param[in] pModel - Model instance.
* @param[in] pExtension - File Extension
* @param[in] pContentType - Content Type Identifier
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addcustomcontenttypeutf8 (Lib3MF_Model pModel, const char * pExtension, const char * pContentType);

/**
* removes a custom Content Type from the model (UTF8 version).
*
* @param[in] pModel - Model instance.
* @param[in] pExtension - File Extension
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removecustomcontenttypeutf8 (Lib3MF_Model pModel, const char * pExtension);

/*************************************************************************************************************************
 Global functions
**************************************************************************************************************************/

/**
* retrieves the current version of the library.
*
* @param[out] pMajor - returns the major version of the library
* @param[out] pMinor - returns the minor version of the library
* @param[out] pMicro - returns the micro version of the library
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_getlibraryversion (unsigned int * pMajor, unsigned int * pMinor, unsigned int * pMicro);

/**
* retrieves whether a specification is supported, and if so, which version.
*
* @param[in] pSpecificationURL - URL of extension to check
* @param[out] pIsSupported - returns whether this specification is supported
* @param[out] pMajor - returns the major version of the extension (if IsSupported)
* @param[out] pMinor - returns the minor version of the extension (if IsSupported)
* @param[out] pMicro - returns the micro version of the extension (if IsSupported)
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_getspecificationversion (const char * pSpecificationURL, bool * pIsSupported, unsigned int * pMajor, unsigned int * pMinor, unsigned int * pMicro);

/**
* creates an empty model instance.
*
* @param[out] pModel - returns an empty model instance
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_createmodel (Lib3MF_Model * pModel);

/**
* releases an object instance
*
* @param[in] pInstance - releases the memory of the passed object.
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_release (Lib3MF_BaseClass pInstance);

/**
* Sets the journal file path
*
* @param[in] pJournalPath - File name of the journal file
* @return error code or 0 (success)
*/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_setjournal (const char * pJournalPath);

}

#endif // __LIB3MF_HEADER

