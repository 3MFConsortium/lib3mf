/*++

Copyright (C) 2018 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Abstract: This is an autogenerated C++ Header file in order to allow an easy use
 of the 3MF Library
Interface version: 1.2.2

*/


#ifndef __LIB3MF_CPPHEADER
#define __LIB3MF_CPPHEADER

#include "lib3mf.h"
#include <string>
#include <memory>
#include <vector>
#include <exception>

namespace Lib3MF {

/*************************************************************************************************************************
 Forward Declaration of all classes 
**************************************************************************************************************************/

class CLib3MFBaseClass;
class CLib3MFWriter;
class CLib3MFReader;
class CLib3MFResource;
class CLib3MFResourceIterator;
class CLib3MFPropertyHandler;
class CLib3MFDefaultPropertyHandler;
class CLib3MFMetaData;
class CLib3MFMetaDataGroup;
class CLib3MFObject;
class CLib3MFMeshObject;
class CLib3MFComponent;
class CLib3MFComponentsObject;
class CLib3MFBeamSet;
class CLib3MFBaseMaterial;
class CLib3MFAttachment;
class CLib3MFTexture2D;
class CLib3MFBuildItem;
class CLib3MFBuildItemIterator;
class CLib3MFModel;

/*************************************************************************************************************************
 Declaration of shared pointer types 
**************************************************************************************************************************/

typedef std::shared_ptr<CLib3MFBaseClass> PLib3MFBaseClass;
typedef std::shared_ptr<CLib3MFWriter> PLib3MFWriter;
typedef std::shared_ptr<CLib3MFReader> PLib3MFReader;
typedef std::shared_ptr<CLib3MFResource> PLib3MFResource;
typedef std::shared_ptr<CLib3MFResourceIterator> PLib3MFResourceIterator;
typedef std::shared_ptr<CLib3MFPropertyHandler> PLib3MFPropertyHandler;
typedef std::shared_ptr<CLib3MFDefaultPropertyHandler> PLib3MFDefaultPropertyHandler;
typedef std::shared_ptr<CLib3MFMetaData> PLib3MFMetaData;
typedef std::shared_ptr<CLib3MFMetaDataGroup> PLib3MFMetaDataGroup;
typedef std::shared_ptr<CLib3MFObject> PLib3MFObject;
typedef std::shared_ptr<CLib3MFMeshObject> PLib3MFMeshObject;
typedef std::shared_ptr<CLib3MFComponent> PLib3MFComponent;
typedef std::shared_ptr<CLib3MFComponentsObject> PLib3MFComponentsObject;
typedef std::shared_ptr<CLib3MFBeamSet> PLib3MFBeamSet;
typedef std::shared_ptr<CLib3MFBaseMaterial> PLib3MFBaseMaterial;
typedef std::shared_ptr<CLib3MFAttachment> PLib3MFAttachment;
typedef std::shared_ptr<CLib3MFTexture2D> PLib3MFTexture2D;
typedef std::shared_ptr<CLib3MFBuildItem> PLib3MFBuildItem;
typedef std::shared_ptr<CLib3MFBuildItemIterator> PLib3MFBuildItemIterator;
typedef std::shared_ptr<CLib3MFModel> PLib3MFModel;
     
/*************************************************************************************************************************
 Class ELib3MFException 
**************************************************************************************************************************/
class ELib3MFException : public std::runtime_error {
  protected:
    /**
    * Error code for the Exception.
    */
    Lib3MFResult m_errorcode;

  public:
    /**
    * Exception Constructor.
    */
    ELib3MFException (Lib3MFResult errorcode);

    /**
    * Returns error code
    */
    Lib3MFResult getErrorCode ();

};
     
/*************************************************************************************************************************
 Class CLib3MFBaseClass 
**************************************************************************************************************************/
class CLib3MFBaseClass {
  protected:
    /* Handle to Instance in library*/
    Lib3MFHandle m_pHandle;

    /* Checks for an Error code and raises Exceptions */
    void CheckError(Lib3MFResult nResult);
  public:

    /**
    * CLib3MFBaseClass::CLib3MFBaseClass - Constructor for Base class.
    */
    CLib3MFBaseClass(Lib3MFHandle pHandle);

    /**
    * CLib3MFBaseClass::~CLib3MFBaseClass - Destructor for Base class.
    */
    virtual ~CLib3MFBaseClass();

    /**
    * CLib3MFBaseClass::GetHandle - Returns handle to instance.
    */
    Lib3MFHandle GetHandle();
};
     
/*************************************************************************************************************************
 Class CLib3MFWriter 
**************************************************************************************************************************/
class CLib3MFWriter : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFWriter::CLib3MFWriter - Constructor for Writer class.
    */
    CLib3MFWriter (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFWriter::WriteToFile - Writes out the model as file. The file type is specified by the Model Writer class.
    * @param[in] sFilename - Filename to write into
    */
    void WriteToFile (const std::string & sFilename);
    
    /**
    * CLib3MFWriter::GetStreamSize - Retrieves the size of the full 3MF file stream.
    * @param[out] nStreamSize - the stream size
    */
    void GetStreamSize (unsigned long long & nStreamSize);
    
    /**
    * CLib3MFWriter::WriteToBuffer - Writes out the 3MF file into a memory buffer
    * @param[out] BufferBuffer - buffer to write into
    */
    void WriteToBuffer (std::vector<unsigned char> & BufferBuffer);
};

     
/*************************************************************************************************************************
 Class CLib3MFReader 
**************************************************************************************************************************/
class CLib3MFReader : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFReader::CLib3MFReader - Constructor for Reader class.
    */
    CLib3MFReader (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFReader::ReadFromFile - Reads a model from a file. The file type is specified by the Model Reader class
    * @param[in] sFilename - Filename to read from
    */
    void ReadFromFile (const std::string & sFilename);
    
    /**
    * CLib3MFReader::ReadFromBuffer - Reads a model from a memory buffer.
    * @param[in] BufferBuffer - Buffer to read from
    */
    void ReadFromBuffer (const std::vector<unsigned char> & BufferBuffer);
    
    /**
    * CLib3MFReader::AddRelationToRead - Adds a relationship type which shall be read as attachment in memory while loading
    * @param[in] sRelationShipType - String of the relationship type
    */
    void AddRelationToRead (const std::string & sRelationShipType);
    
    /**
    * CLib3MFReader::RemoveRelationToRead - Removes a relationship type which shall be read as attachment in memory while loading
    * @param[in] sRelationShipType - String of the relationship type
    */
    void RemoveRelationToRead (const std::string & sRelationShipType);
    
    /**
    * CLib3MFReader::SetStrictModeActive - Activates (deactivates) the strict mode of the reader.
    * @param[in] bStrictModeActive - flag whether strict mode is active or not.
    */
    void SetStrictModeActive (const bool bStrictModeActive);
    
    /**
    * CLib3MFReader::GetStrictModeActive - Queries whether the strict mode of the reader is active or not
    * @return returns flag whether strict mode is active or not.
    */
    bool GetStrictModeActive ();
    
    /**
    * CLib3MFReader::GetWarning - Returns Warning and Error Information of the read process
    * @param[in] nIndex - Index of the Warning. Valid values are 0 to WarningCount - 1
    * @param[out] nErrorCode - filled with the error code of the warning
    * @return the message of the warning
    */
    std::string GetWarning (const unsigned int nIndex, unsigned int & nErrorCode);
    
    /**
    * CLib3MFReader::GetWarningCount - Returns Warning and Error Count of the read process
    * @return filled with the count of the occurred warnings.
    */
    unsigned int GetWarningCount ();
};

     
/*************************************************************************************************************************
 Class CLib3MFResource 
**************************************************************************************************************************/
class CLib3MFResource : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFResource::CLib3MFResource - Constructor for Resource class.
    */
    CLib3MFResource (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFResource::GetResourceID - Retrieves the resource id of the resource instance.
    * @return Retrieves the ID of a Model Resource Instance.
    */
    unsigned int GetResourceID ();
};

     
/*************************************************************************************************************************
 Class CLib3MFResourceIterator 
**************************************************************************************************************************/
class CLib3MFResourceIterator : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFResourceIterator::CLib3MFResourceIterator - Constructor for ResourceIterator class.
    */
    CLib3MFResourceIterator (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFResourceIterator::MoveNext - Iterates to the next resource in the list.
    * @return Iterates to the next resource in the list.
    */
    bool MoveNext ();
    
    /**
    * CLib3MFResourceIterator::MovePrevious - Iterates to the previous resource in the list.
    * @return Iterates to the previous resource in the list.
    */
    bool MovePrevious ();
    
    /**
    * CLib3MFResourceIterator::GetCurrent - Returns the resource the iterator points at.
    * @return returns the resource instance.
    */
    PLib3MFResource GetCurrent ();
    
    /**
    * CLib3MFResourceIterator::Clone - Creates a new resource iterator with the same resource list.
    * @return returns the cloned Iterator instance
    */
    PLib3MFResourceIterator Clone ();
};

     
/*************************************************************************************************************************
 Class CLib3MFPropertyHandler 
**************************************************************************************************************************/
class CLib3MFPropertyHandler : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFPropertyHandler::CLib3MFPropertyHandler - Constructor for PropertyHandler class.
    */
    CLib3MFPropertyHandler (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFPropertyHandler::RemoveProperty - Removes all properties of a specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    */
    void RemoveProperty (const unsigned int nIndex);
    
    /**
    * CLib3MFPropertyHandler::RemoveAllProperties - Removes all properties of the triangle mesh.
    */
    void RemoveAllProperties ();
    
    /**
    * CLib3MFPropertyHandler::GetPropertyType - Returns the property type of the specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return property type of the triangle.
    */
    eLib3MFPropertyType GetPropertyType (const unsigned int nIndex);
    
    /**
    * CLib3MFPropertyHandler::GetBaseMaterial - Returns the base material of a specific triangle.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
    * @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
    */
    void GetBaseMaterial (const unsigned int nIndex, unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex);
    
    /**
    * CLib3MFPropertyHandler::SetBaseMaterial - Sets the material of a triangle to a specific single value. All other Triangle properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nMaterialGroupId - Group ID of the Material Group
    * @param[in] nMaterialIndex - Index of the Material in the Group
    */
    void SetBaseMaterial (const unsigned int nIndex, const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex);
    
    /**
    * CLib3MFPropertyHandler::SetBaseMaterialArray - Sets the materials of all triangles to specific values.
    * @param[in] MaterialGroupIdsBuffer - array of the material Group IDs. Must have trianglecount entries.
    * @param[in] MaterialIndicesBuffer - array of the corresponding material indices. Must have trianglecount entries.
    */
    void SetBaseMaterialArray (const std::vector<unsigned int> & MaterialGroupIdsBuffer, const std::vector<unsigned int> & MaterialIndicesBuffer);
    
    /**
    * CLib3MFPropertyHandler::GetBaseMaterialArray - Gets the materials of all triangles.
    * @param[out] MaterialGroupIdsBuffer - array of the material Group IDs. Must have trianglecount entries.
    * @param[out] MaterialIndicesBuffer - array of the corresponding material indices. Must have trianglecount entries.
    */
    void GetBaseMaterialArray (std::vector<unsigned int> & MaterialGroupIdsBuffer, std::vector<unsigned int> & MaterialIndicesBuffer);
    
    /**
    * CLib3MFPropertyHandler::SetSingleColor - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] Color - new color value of the triangle. (#00000000) means no color property.
    */
    void SetSingleColor (const unsigned int nIndex, const sLib3MFColorRGBA & Color);
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    */
    void SetSingleColorRGB (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue);
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorRGBA - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    * @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
    */
    void SetSingleColorRGBA (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha);
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorFloatRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    */
    void SetSingleColorFloatRGB (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue);
    
    /**
    * CLib3MFPropertyHandler::SetSingleColorFloatRGBA - Sets the specific triangle to a single color. All other properties are removed.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    * @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
    */
    void SetSingleColorFloatRGBA (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha);
};

     
/*************************************************************************************************************************
 Class CLib3MFDefaultPropertyHandler 
**************************************************************************************************************************/
class CLib3MFDefaultPropertyHandler : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFDefaultPropertyHandler::CLib3MFDefaultPropertyHandler - Constructor for DefaultPropertyHandler class.
    */
    CLib3MFDefaultPropertyHandler (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFDefaultPropertyHandler::RemoveProperty - Removes the default property of the object.
    */
    void RemoveProperty ();
    
    /**
    * CLib3MFDefaultPropertyHandler::GetPropertyType - Returns the default property type of the object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return property type of the triangle.
    */
    eLib3MFPropertyType GetPropertyType (const unsigned int nIndex);
    
    /**
    * CLib3MFDefaultPropertyHandler::GetBaseMaterial - Returns the base material the object.
    * @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
    * @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
    */
    void GetBaseMaterial (unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetBaseMaterial - Sets the material of an object to a specific single value. This must be a base material.
    * @param[in] nMaterialGroupId - Group ID of the Material Group
    * @param[in] nMaterialIndex - Index of the Material in the Group
    */
    void SetBaseMaterial (const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetColorRGB - Sets the default property of an object to a single color.
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    */
    void SetColorRGB (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetColorRGBA - Sets the default property of an object to a single color.
    * @param[in] nRed - New red value of the color of the triangle (0-255)
    * @param[in] nGreen - New green value of the color of the triangle (0-255)
    * @param[in] nBlue - New blue value of the color of the triangle (0-255)
    * @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
    */
    void SetColorRGBA (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetFloatColorRGB - Sets the default property of an object to a single color.
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    */
    void SetFloatColorRGB (const float fRed, const float fGreen, const float fBlue);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetFloatColorRGBA - Sets the default property of an object to a single color.
    * @param[in] fRed - New red value of the color of the triangle (0-1)
    * @param[in] fGreen - New green value of the color of the triangle (0-1)
    * @param[in] fBlue - New blue value of the color of the triangle (0-1)
    * @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
    */
    void SetFloatColorRGBA (const float fRed, const float fGreen, const float fBlue, const float fAlpha);
    
    /**
    * CLib3MFDefaultPropertyHandler::GetTexture - Returns the default 2D texture information of an object.
    * @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
    * @param[out] fU - Returns the default U value of the object.
    * @param[out] fV - Returns the default V value of the object.
    */
    void GetTexture (unsigned int & nTextureID, float & fU, float & fV);
    
    /**
    * CLib3MFDefaultPropertyHandler::SetTexture - Sets the default 2D texture information of an object.
    * @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
    * @param[out] fU - Returns the default U value of the object.
    * @param[out] fV - Returns the default V value of the object.
    */
    void SetTexture (unsigned int & nTextureID, float & fU, float & fV);
};

     
/*************************************************************************************************************************
 Class CLib3MFMetaData 
**************************************************************************************************************************/
class CLib3MFMetaData : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFMetaData::CLib3MFMetaData - Constructor for MetaData class.
    */
    CLib3MFMetaData (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFMetaData::GetNameSpace - returns the namespace URL of the metadata
    * @return the namespace URL of the metadata
    */
    std::string GetNameSpace ();
    
    /**
    * CLib3MFMetaData::SetNameSpace - sets a new namespace URL of the metadata
    * @param[in] sNameSpace - the new namespace URL of the metadata
    */
    void SetNameSpace (const std::string & sNameSpace);
    
    /**
    * CLib3MFMetaData::GetName - returns the name of a metadata
    * @return the name of the metadata
    */
    std::string GetName ();
    
    /**
    * CLib3MFMetaData::SetName - sets a new name of a metadata
    * @param[in] sName - the new name of the metadata
    */
    void SetName (const std::string & sName);
    
    /**
    * CLib3MFMetaData::GetMustPreserve - returns, whether a metadata must be preserved
    * @return returns, whether a metadata must be preserved
    */
    bool GetMustPreserve ();
    
    /**
    * CLib3MFMetaData::SetMustPreserve - sets whether a metadata must be preserved
    * @param[in] bMustPreserve - a new value whether a metadata must be preserved
    */
    void SetMustPreserve (const bool bMustPreserve);
    
    /**
    * CLib3MFMetaData::GetType - returns the type of a metadata
    * @return the type of the metadata
    */
    std::string GetType ();
    
    /**
    * CLib3MFMetaData::SetType - sets a new type of a metadata. This must be a simple XML type
    * @param[in] sType - a new type of the metadata
    */
    void SetType (const std::string & sType);
    
    /**
    * CLib3MFMetaData::GetValue - returns the value of the metadata
    * @return the value of the metadata
    */
    std::string GetValue ();
    
    /**
    * CLib3MFMetaData::SetValue - sets a new value of the metadata
    * @param[in] sValue - a new value of the metadata
    */
    void SetValue (const std::string & sValue);
};

     
/*************************************************************************************************************************
 Class CLib3MFMetaDataGroup 
**************************************************************************************************************************/
class CLib3MFMetaDataGroup : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFMetaDataGroup::CLib3MFMetaDataGroup - Constructor for MetaDataGroup class.
    */
    CLib3MFMetaDataGroup (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataCount - returns the number of metadata in this metadatagroup
    * @return returns the number metadata
    */
    unsigned int GetMetaDataCount ();
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataKey - returns a metadata key within this metadatagroup
    * @param[in] nIndex - Index of the metadata.
    * @param[out] sNameSpace - the namespace of the metadata
    * @param[out] sName - the name of the metadata
    */
    void GetMetaDataKey (const unsigned int nIndex, std::string & sNameSpace, std::string & sName);
    
    /**
    * CLib3MFMetaDataGroup::GetMetaData - returns a metadata value within this metadatagroup
    * @param[in] nIndex - Index of the Metadata.
    * @return an instance of the metadata
    */
    PLib3MFMetaData GetMetaData (const unsigned int nIndex);
    
    /**
    * CLib3MFMetaDataGroup::GetMetaDataByKey - returns a metadata value within this metadatagroup
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the Metadata
    * @return an instance of the metadata
    */
    PLib3MFMetaData GetMetaDataByKey (const std::string & sNameSpace, const std::string & sName);
    
    /**
    * CLib3MFMetaDataGroup::RemoveMetaData - removes metadata pair from the model.
    * @param[in] nIndex -  Index of the metadata
    */
    void RemoveMetaData (const unsigned int nIndex);
    
    /**
    * CLib3MFMetaDataGroup::RemoveMetaDataByKey - removes metadata pair from the model.
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the metadata
    */
    void RemoveMetaDataByKey (const std::string & sNameSpace, const std::string & sName);
    
    /**
    * CLib3MFMetaDataGroup::AddMetaData - adds a new metadata to this metadatagroup
    * @param[in] sNameSpace - the namespace of the metadata
    * @param[in] sName - the name of the metadata
    * @return an instance of the metadata
    */
    PLib3MFMetaData AddMetaData (const std::string & sNameSpace, const std::string & sName);
};

     
/*************************************************************************************************************************
 Class CLib3MFObject 
**************************************************************************************************************************/
class CLib3MFObject : public CLib3MFResource {
  public:
    
    /**
    * CLib3MFObject::CLib3MFObject - Constructor for Object class.
    */
    CLib3MFObject (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFObject::GetType - Retrieves a object's type
    * @return returns object type enum.
    */
    eLib3MFObjectType GetType ();
    
    /**
    * CLib3MFObject::SetType - Sets an object's type
    * @param[in] eObjectType - object type enum.
    */
    void SetType (const eLib3MFObjectType eObjectType);
    
    /**
    * CLib3MFObject::GetName - Retrieves an object's name
    * @return returns object name.
    */
    std::string GetName ();
    
    /**
    * CLib3MFObject::SetName - Sets an object's name string
    * @param[in] sName - new object name.
    */
    void SetName (const std::string & sName);
    
    /**
    * CLib3MFObject::GetPartNumber - Retrieves an object's part number
    * @return returns object part number.
    */
    std::string GetPartNumber ();
    
    /**
    * CLib3MFObject::SetPartNumber - Sets an object's partnumber string
    * @param[in] sPartNumber - new object part number.
    */
    void SetPartNumber (const std::string & sPartNumber);
    
    /**
    * CLib3MFObject::IsMeshObject - Retrieves, if an object is a mesh object
    * @return returns, whether the object is a mesh object
    */
    bool IsMeshObject ();
    
    /**
    * CLib3MFObject::IsComponentsObject - Retrieves, if an object is a components object
    * @return returns, whether the object is a components object
    */
    bool IsComponentsObject ();
    
    /**
    * CLib3MFObject::IsValid - Retrieves, if the object is valid according to the core spec.|For mesh objects, we distinguish between the type attribute of the object:|In case of object type 'other', this always means 'false'.|In case of object type 'model' or 'solidsupport', this means, if the mesh suffices all requirements of the core spec chapter 4.1.|In case of object type 'support' or 'surface', this always means 'true'.|A component objects is valid if and only if it contains at least one component and all child components are valid objects.
    * @return returns, whether the object is a valid object description
    */
    bool IsValid ();
    
    /**
    * CLib3MFObject::HasMetaDataGroup - Returns whether the object has a metadatagroup
    * @return returns whether the object has a metadatagroup
    */
    bool HasMetaDataGroup ();
    
    /**
    * CLib3MFObject::GetMetaDataGroup - Returns the metadatagroup of this object
    * @return returns an Instance of the metadatagroup of this object
    */
    PLib3MFMetaDataGroup GetMetaDataGroup ();
    
    /**
    * CLib3MFObject::CreateMetaDataGroup - Creates a new metadatagroup for this object
    * @return returns an Instance of a new metadatagroup for this object
    */
    PLib3MFMetaDataGroup CreateMetaDataGroup ();
    
    /**
    * CLib3MFObject::RemoveMetaDataGroup - Removes the object's metadatagroup
    */
    void RemoveMetaDataGroup ();
};

     
/*************************************************************************************************************************
 Class CLib3MFMeshObject 
**************************************************************************************************************************/
class CLib3MFMeshObject : public CLib3MFObject {
  public:
    
    /**
    * CLib3MFMeshObject::CLib3MFMeshObject - Constructor for MeshObject class.
    */
    CLib3MFMeshObject (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFMeshObject::GetVertexCount - Returns the vertex count of a mesh object.
    * @return filled with the vertex count.
    */
    unsigned int GetVertexCount ();
    
    /**
    * CLib3MFMeshObject::GetTriangleCount - Returns the triangle count of a mesh object.
    * @return filled with the triangle count.
    */
    unsigned int GetTriangleCount ();
    
    /**
    * CLib3MFMeshObject::SetVertex - Sets the coordinates of a single vertex of a mesh object
    * @param[in] nIndex - Index of the vertex (0 to vertexcount - 1)
    * @param[in] Coordinates - contains the vertex coordinates.
    */
    void SetVertex (const unsigned int nIndex, const sLib3MFPosition & Coordinates);
    
    /**
    * CLib3MFMeshObject::AddVertex - Adds a single vertex to a mesh object
    * @param[in] Coordinates - contains the vertex coordinates.
    * @return Index of the new vertex
    */
    unsigned int AddVertex (const sLib3MFPosition & Coordinates);
    
    /**
    * CLib3MFMeshObject::GetTriangle - Returns indices of a single triangle of a mesh object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @return filled with the triangle indices.
    */
    sLib3MFTriangle GetTriangle (const unsigned int nIndex);
    
    /**
    * CLib3MFMeshObject::SetTriangle - Sets the indices of a single triangle of a mesh object.
    * @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
    * @param[in] Indices - contains the triangle indices.
    */
    void SetTriangle (const unsigned int nIndex, const sLib3MFTriangle & Indices);
    
    /**
    * CLib3MFMeshObject::AddTriangle - Adds a single triangle to a mesh object
    * @param[in] Indices - contains the triangle indices.
    * @return Index of the new triangle
    */
    unsigned int AddTriangle (const sLib3MFTriangle & Indices);
    
    /**
    * CLib3MFMeshObject::GetTriangleIndices - Get all triangles of a mesh object
    * @param[out] IndicesBuffer - contains the triangle indices.
    */
    void GetTriangleIndices (std::vector<sLib3MFTriangle> & IndicesBuffer);
    
    /**
    * CLib3MFMeshObject::SetTriangleIndices - Set all triangles of a mesh object
    * @param[in] IndicesBuffer - contains the triangle indices.
    */
    void SetTriangleIndices (const std::vector<sLib3MFTriangle> & IndicesBuffer);
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_MinLength - Returns the minimal length of beams for the beamlattice.
    * @return minimal length of beams for the beamlattice
    */
    double GetBeamLattice_MinLength ();
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_MinLength - Sets the minimal length of beams for the beamlattice.
    * @param[in] dMinLength - minimal length of beams for the beamlattice
    */
    void SetBeamLattice_MinLength (const double dMinLength);
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Radius - Returns the default radius for the beamlattice.
    * @return default radius of the beams in the beamlattice
    */
    double GetBeamLattice_Radius ();
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Radius - Sets the default radius for the beamlattice.
    * @param[in] dRadius - default radius of the beams in the beamlattice
    */
    void SetBeamLattice_Radius (const double dRadius);
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_CapMode - Returns the default capping mode for the beamlattice.
    * @return default cap mode of the beamlattice
    */
    eLib3MFBeamLatticeCapMode GetBeamLattice_CapMode ();
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_CapMode - Sets the default capping mode for the beamlattice.
    * @param[in] eCapMode - default cap mode of the beamlattice
    */
    void SetBeamLattice_CapMode (const eLib3MFBeamLatticeCapMode eCapMode);
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Clipping - Returns the clipping mode and the clipping-mesh for the beamlattice of this mesh.
    * @param[out] eClipMode - contains the clip mode of this mesh
    * @param[out] nResourceID - filled with the resourceID of the clipping mesh-object or an undefined value if pClipMode is MODELBEAMLATTICECLIPMODE_NONE
    */
    void GetBeamLattice_Clipping (eLib3MFBeamLatticeClipMode & eClipMode, unsigned int & nResourceID);
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Clipping - Sets the clipping mode and the clipping-mesh for the beamlattice of this mesh.
    * @param[in] eClipMode - contains the clip mode of this mesh
    * @param[in] nResourceID - the resourceID of the clipping mesh-object. This mesh-object has to be defined before setting the Clipping.
    */
    void SetBeamLattice_Clipping (const eLib3MFBeamLatticeClipMode eClipMode, const unsigned int nResourceID);
    
    /**
    * CLib3MFMeshObject::GetBeamLattice_Representation - Returns the representation-mesh for the beamlattice of this mesh.
    * @param[out] bHasRepresentation - flag whether the beamlattice has a representation mesh.
    * @param[out] nResourceID - filled with the resourceID of the clipping mesh-object.
    */
    void GetBeamLattice_Representation (bool & bHasRepresentation, unsigned int & nResourceID);
    
    /**
    * CLib3MFMeshObject::SetBeamLattice_Representation - Sets the representation-mesh for the beamlattice of this mesh.
    * @param[in] nResourceID - the resourceID of the representation mesh-object. This mesh-object has to be defined before setting the representation.
    */
    void SetBeamLattice_Representation (const unsigned int nResourceID);
    
    /**
    * CLib3MFMeshObject::GetBeamCount - Returns the beam count of a mesh object.
    * @return filled with the beam count.
    */
    unsigned int GetBeamCount ();
    
    /**
    * CLib3MFMeshObject::AddBeam - Adds a single beam to a mesh object.
    * @param[in] BeamInfo - contains the node indices, radii and capmodes.
    * @return filled with the new Index of the beam.
    */
    unsigned int AddBeam (const sLib3MFBeam & BeamInfo);
    
    /**
    * CLib3MFMeshObject::SetBeam - Sets the indices, radii and capmodes of a single beam of a mesh object.
    * @param[in] nIndex - Index of the beam (0 to beamcount - 1).
    * @param[in] BeamInfo - filled with the beam indices, radii and capmodes.
    */
    void SetBeam (const unsigned int nIndex, const sLib3MFBeam & BeamInfo);
    
    /**
    * CLib3MFMeshObject::GetBeamSetCount - Returns the number of beamsets of a mesh object.
    * @return filled with the beamset count.
    */
    unsigned int GetBeamSetCount ();
    
    /**
    * CLib3MFMeshObject::AddBeamSet - Adds an empty beamset to a mesh object
    * @return the new beamset
    */
    PLib3MFBeamSet AddBeamSet ();
    
    /**
    * CLib3MFMeshObject::GetBeamSet - Returns a beamset of a mesh object
    * @param[in] nIndex - index of the requested beamset (0 ... beamsetcount-1).
    * @return the requested beamset
    */
    PLib3MFBeamSet GetBeamSet (const unsigned int nIndex);
    
    /**
    * CLib3MFMeshObject::IsManifoldAndOriented - Retrieves, if an object describes a topologically oriented and manifold mesh, according to the core spec.
    * @return returns, if the object is oriented and manifold.
    */
    bool IsManifoldAndOriented ();
};

     
/*************************************************************************************************************************
 Class CLib3MFComponent 
**************************************************************************************************************************/
class CLib3MFComponent : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFComponent::CLib3MFComponent - Constructor for Component class.
    */
    CLib3MFComponent (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFComponent::GetObjectResource - Returns the Resource Instance of the component..
    * @return filled with the Resource Instance.
    */
    PLib3MFObject GetObjectResource ();
    
    /**
    * CLib3MFComponent::GetObjectResourceID - Returns the Resource ID of the component.
    * @return returns the Resource ID.
    */
    unsigned int GetObjectResourceID ();
    
    /**
    * CLib3MFComponent::GetUUID - returns, whether a component has a UUID and, if true, the component's UUID
    * @param[out] bHasUUID - flag whether the component has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string GetUUID (bool & bHasUUID);
    
    /**
    * CLib3MFComponent::SetUUID - sets the component's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void SetUUID (const std::string & sUUID);
    
    /**
    * CLib3MFComponent::HasTransform - Returns, if the component has a different transformation than the identity matrix
    * @return if true is returned, the transformation is not equal than the identity
    */
    bool HasTransform ();
    
    /**
    * CLib3MFComponent::SetTransform - Sets the transformation matrix of the component.
    * @param[in] Transform - new transformation matrix
    */
    void SetTransform (const sLib3MFTransform & Transform);
};

     
/*************************************************************************************************************************
 Class CLib3MFComponentsObject 
**************************************************************************************************************************/
class CLib3MFComponentsObject : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFComponentsObject::CLib3MFComponentsObject - Constructor for ComponentsObject class.
    */
    CLib3MFComponentsObject (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFComponentsObject::AddComponent - Adds a new component to a component object.
    * @param[in] pObjectResource - object to add as component. May not lead to circular references!
    * @param[in] Transform - optional transform matrix for the component.
    * @return new component instance
    */
    PLib3MFComponentsObject AddComponent (CLib3MFObject * pObjectResource, const sLib3MFTransform & Transform);
    
    /**
    * CLib3MFComponentsObject::GetComponent - Retrieves a component from a component object.
    * @param[in] nIndex - index of the component to retrieve (0 to componentcount - 1)
    * @return component instance
    */
    PLib3MFComponentsObject GetComponent (const unsigned int nIndex);
    
    /**
    * CLib3MFComponentsObject::GetComponentCount -  Retrieves a component count of a component object.
    * @return returns the component count
    */
    unsigned int GetComponentCount ();
};

     
/*************************************************************************************************************************
 Class CLib3MFBeamSet 
**************************************************************************************************************************/
class CLib3MFBeamSet : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFBeamSet::CLib3MFBeamSet - Constructor for BeamSet class.
    */
    CLib3MFBeamSet (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFBeamSet::SetName - Sets a beamset's name string
    * @param[in] sName - new name of the beamset.
    */
    void SetName (const std::string & sName);
    
    /**
    * CLib3MFBeamSet::GetName - Retrieves a beamset's name string
    * @return returns the name of the beamset.
    */
    std::string GetName ();
    
    /**
    * CLib3MFBeamSet::SetIdentifier - Sets a beamset's identifier string
    * @param[in] sIdentifier - new name of the beamset.
    */
    void SetIdentifier (const std::string & sIdentifier);
    
    /**
    * CLib3MFBeamSet::GetIdentifier - Retrieves a beamset's identifier string
    * @return returns the identifier of the beamset.
    */
    std::string GetIdentifier ();
    
    /**
    * CLib3MFBeamSet::GetReferenceCount - Retrieves the reference count of a beamset
    * @return returns the reference count
    */
    unsigned int GetReferenceCount ();
    
    /**
    * CLib3MFBeamSet::SetReferences - Sets the references of a beamset
    * @param[in] ReferencesBuffer - the new indices of all beams in this beamset
    */
    void SetReferences (const std::vector<unsigned int> & ReferencesBuffer);
    
    /**
    * CLib3MFBeamSet::GetReferences - Retrieves the references of a beamset
    * @param[out] ReferencesBuffer - retrieves the indices of all beams in this beamset
    */
    void GetReferences (std::vector<unsigned int> & ReferencesBuffer);
};

     
/*************************************************************************************************************************
 Class CLib3MFBaseMaterial 
**************************************************************************************************************************/
class CLib3MFBaseMaterial : public CLib3MFResource {
  public:
    
    /**
    * CLib3MFBaseMaterial::CLib3MFBaseMaterial - Constructor for BaseMaterial class.
    */
    CLib3MFBaseMaterial (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFBaseMaterial::GetCount - Retrieves the count of base materials in the material group.
    * @return returns the count of base materials.
    */
    unsigned int GetCount ();
    
    /**
    * CLib3MFBaseMaterial::GetResourceID - Retrieves the resource id of the material group.
    * @return returns the id of the material group.
    */
    unsigned int GetResourceID ();
    
    /**
    * CLib3MFBaseMaterial::AddMaterial - Adds a new material to the material group
    * @param[in] sName - new name of the base material.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    * @return returns new Index of the material in the material group.
    */
    unsigned int AddMaterial (const std::string & sName, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue);
    
    /**
    * CLib3MFBaseMaterial::RemoveMaterial - Removes a material from the material group.
    * @param[in] nResourceIndex - Index of the material in the material group.
    */
    void RemoveMaterial (const unsigned int nResourceIndex);
    
    /**
    * CLib3MFBaseMaterial::GetName - Returns the base material's name
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @return returns the name of the base material.
    */
    std::string GetName (const unsigned int nResourceIndex);
    
    /**
    * CLib3MFBaseMaterial::SetName - Sets a base material's name
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] sName - new name of the base material.
    */
    void SetName (const unsigned int nResourceIndex, const std::string & sName);
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorRGB - Sets a base material's display color. Alpha is set to 255.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    */
    void SetDisplayColorRGB (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue);
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorRGBA - Sets a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] nRed - New red value of display color (0-255)
    * @param[in] nGreen - New green value of display color (0-255)
    * @param[in] nBlue - New blue value of display color (0-255)
    * @param[in] nAlpha - New alpha value of display color (0-255)
    */
    void SetDisplayColorRGBA (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha);
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorFloatRGB - Sets a base material's display color. Alpha is set to 1.0.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] fRed - New red value of display color (0-1)
    * @param[in] fGreen - New green value of display color (0-1)
    * @param[in] fBlue - New blue value of display color (0-1)
    */
    void SetDisplayColorFloatRGB (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue);
    
    /**
    * CLib3MFBaseMaterial::SetDisplayColorFloatRGBA - Sets a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[in] fRed - New red value of display color (0-1)
    * @param[in] fGreen - New green value of display color (0-1)
    * @param[in] fBlue - New blue value of display color (0-1)
    * @param[in] fAlpha - New alpha value of display color (0-1)
    */
    void SetDisplayColorFloatRGBA (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha);
    
    /**
    * CLib3MFBaseMaterial::GetDisplayColor - Returns a base material's display color.
    * @param[in] nResourceIndex - Index of the material in the material group.
    * @param[out] nRed - Returns red value of display color (0-255)
    * @param[out] nGreen - Returns green value of display color (0-255)
    * @param[out] nBlue - Returns blue value of display color (0-255)
    * @param[out] nAlpha - Returns blue value of display color (0-255)
    */
    void GetDisplayColor (const unsigned int nResourceIndex, unsigned char & nRed, unsigned char & nGreen, unsigned char & nBlue, unsigned char & nAlpha);
};

     
/*************************************************************************************************************************
 Class CLib3MFAttachment 
**************************************************************************************************************************/
class CLib3MFAttachment : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFAttachment::CLib3MFAttachment - Constructor for Attachment class.
    */
    CLib3MFAttachment (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFAttachment::GetPath - Retrieves an attachment's package path.
    * @return returns the attachment's package path string
    */
    std::string GetPath ();
    
    /**
    * CLib3MFAttachment::SetPath - Sets an attachment's package path.
    * @param[in] sPath - new path of the attachment.
    */
    void SetPath (const std::string & sPath);
    
    /**
    * CLib3MFAttachment::GetRelationShipType - Retrieves an attachment's relationship type
    * @return returns the attachment's package relationship type string
    */
    std::string GetRelationShipType ();
    
    /**
    * CLib3MFAttachment::SetRelationShipType - Sets an attachment's relationship type.
    * @param[in] sPath - new relationship type string.
    */
    void SetRelationShipType (const std::string & sPath);
    
    /**
    * CLib3MFAttachment::WriteToFile - Writes out the attachment as file.
    * @param[in] sFileName - file to write into.
    */
    void WriteToFile (const std::string & sFileName);
    
    /**
    * CLib3MFAttachment::ReadFromFile - Reads an attachment from a file.
    * @param[in] sFileName - file to read from.
    */
    void ReadFromFile (const std::string & sFileName);
    
    /**
    * CLib3MFAttachment::GetStreamSize - Retrieves the size of the attachment stream
    * @return the stream size
    */
    unsigned long long GetStreamSize ();
    
    /**
    * CLib3MFAttachment::WriteToBuffer - Writes out the attachment into a buffer
    * @param[out] BufferBuffer - Buffer to write into
    */
    void WriteToBuffer (std::vector<unsigned char> & BufferBuffer);
    
    /**
    * CLib3MFAttachment::ReadFromBuffer - Reads an attachment from a memory buffer
    * @param[out] BufferBuffer - Buffer to read from
    */
    void ReadFromBuffer (std::vector<unsigned char> & BufferBuffer);
};

     
/*************************************************************************************************************************
 Class CLib3MFTexture2D 
**************************************************************************************************************************/
class CLib3MFTexture2D : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFTexture2D::CLib3MFTexture2D - Constructor for Texture2D class.
    */
    CLib3MFTexture2D (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFTexture2D::GetAttachment - Retrieves the attachment located at the path of the texture.
    * @return attachment that holds the texture's image information.
    */
    PLib3MFAttachment GetAttachment ();
    
    /**
    * CLib3MFTexture2D::SetAttachment - Sets the texture's package path to the path of the attachment.
    * @param[in] pAttachment - attachment that holds the texture's image information.
    */
    void SetAttachment (CLib3MFAttachment * pAttachment);
    
    /**
    * CLib3MFTexture2D::GetContentType - Retrieves a texture's content type.
    * @return returns content type enum.
    */
    eLib3MFTextureType GetContentType ();
    
    /**
    * CLib3MFTexture2D::SetContentType - Retrieves a texture's content type.
    * @param[in] eContentType - new Content Type
    */
    void SetContentType (const eLib3MFTextureType eContentType);
    
    /**
    * CLib3MFTexture2D::GetTileStyleUV - Retrieves a texture's tilestyle type.
    * @param[out] eTileStyleU - returns tilestyle type enum.
    * @param[out] eTileStyleV - returns tilestyle type enum.
    */
    void GetTileStyleUV (eLib3MFTextureTileStyle & eTileStyleU, eLib3MFTextureTileStyle & eTileStyleV);
    
    /**
    * CLib3MFTexture2D::SetTileStyleUV - Sets a texture's tilestyle type.
    * @param[in] eTileStyleU - new tilestyle type enum.
    * @param[in] eTileStyleV - new tilestyle type enum.
    */
    void SetTileStyleUV (const eLib3MFTextureTileStyle eTileStyleU, const eLib3MFTextureTileStyle eTileStyleV);
    
    /**
    * CLib3MFTexture2D::GetFilter - Retrieves a texture's filter type.
    * @return returns filter type enum.
    */
    eLib3MFTextureFilter GetFilter ();
    
    /**
    * CLib3MFTexture2D::SetFilter - Sets a texture's filter type.
    * @param[in] eFilter - sets new filter type enum.
    */
    void SetFilter (const eLib3MFTextureFilter eFilter);
};

     
/*************************************************************************************************************************
 Class CLib3MFBuildItem 
**************************************************************************************************************************/
class CLib3MFBuildItem : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFBuildItem::CLib3MFBuildItem - Constructor for BuildItem class.
    */
    CLib3MFBuildItem (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFBuildItem::GetObjectResource - Retrieves the object resource associated to a build item
    * @return returns the associated resource instance
    */
    PLib3MFResource GetObjectResource ();
    
    /**
    * CLib3MFBuildItem::GetUUID - returns, whether a build item has a UUID and, if true, the build item's UUID
    * @param[out] bHasUUID - flag whether the build item has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string GetUUID (bool & bHasUUID);
    
    /**
    * CLib3MFBuildItem::SetUUID - sets the build item's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void SetUUID (const std::string & sUUID);
    
    /**
    * CLib3MFBuildItem::GetObjectResourceID - Retrieves the object resource id associated to a build item
    * @return  eturns the ID of the object
    */
    unsigned int GetObjectResourceID ();
    
    /**
    * CLib3MFBuildItem::HasObjectTransform - Checks, if a build item has a non-identity transformation matrix
    * @return returns true, if the transformation matrix is not the identity
    */
    bool HasObjectTransform ();
    
    /**
    * CLib3MFBuildItem::GetObjectTransform - Retrieves a build item's transformation matrix.
    * @return returns the transformation matrix
    */
    sLib3MFTransform GetObjectTransform ();
    
    /**
    * CLib3MFBuildItem::SetObjectTransform - Sets a build item's transformation matrix.
    * @param[in] Transform - new transformation matrix
    */
    void SetObjectTransform (const sLib3MFTransform & Transform);
    
    /**
    * CLib3MFBuildItem::GetPartNumber - Retrieves a build item's part number string
    * @return Returns a build item's part number string
    */
    std::string GetPartNumber ();
    
    /**
    * CLib3MFBuildItem::SetPartNumber - Sets a build item's part number string
    * @param[in] sSetPartnumber - new part number string for referencing parts from the outside world
    */
    void SetPartNumber (const std::string & sSetPartnumber);
    
    /**
    * CLib3MFBuildItem::HasMetaDataGroup - Returns whether the build item has a metadatagroup
    * @return returns whether the build item has a metadatagroup
    */
    bool HasMetaDataGroup ();
    
    /**
    * CLib3MFBuildItem::GetMetaDataGroup - Returns the metadatagroup of this build item
    * @return returns an Instance of the metadatagroup of this build item
    */
    PLib3MFMetaDataGroup GetMetaDataGroup ();
    
    /**
    * CLib3MFBuildItem::CreateMetaDataGroup - Creates a new metadatagroup for this build item
    * @return returns an Instance of a new metadatagroup for this build item
    */
    PLib3MFMetaDataGroup CreateMetaDataGroup ();
    
    /**
    * CLib3MFBuildItem::RemoveMetaDataGroup - Removes the build item's metadatagroup
    */
    void RemoveMetaDataGroup ();
};

     
/*************************************************************************************************************************
 Class CLib3MFBuildItemIterator 
**************************************************************************************************************************/
class CLib3MFBuildItemIterator : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFBuildItemIterator::CLib3MFBuildItemIterator - Constructor for BuildItemIterator class.
    */
    CLib3MFBuildItemIterator (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFBuildItemIterator::MoveNext - Iterates to the next build item in the list.
    * @return Iterates to the next build item in the list.
    */
    bool MoveNext ();
    
    /**
    * CLib3MFBuildItemIterator::MovePrevious - Iterates to the previous build item in the list.
    * @return Iterates to the previous build item in the list.
    */
    bool MovePrevious ();
    
    /**
    * CLib3MFBuildItemIterator::GetCurrent - Returns the build item the iterator points at.
    * @return returns the build item instance.
    */
    PLib3MFBuildItem GetCurrent ();
    
    /**
    * CLib3MFBuildItemIterator::Clone - Creates a new build item iterator with the same build item list.
    * @return returns the cloned Iterator instance
    */
    PLib3MFBuildItemIterator Clone ();
};

     
/*************************************************************************************************************************
 Class CLib3MFModel 
**************************************************************************************************************************/
class CLib3MFModel : public CLib3MFBaseClass {
  public:
    
    /**
    * CLib3MFModel::CLib3MFModel - Constructor for Model class.
    */
    CLib3MFModel (Lib3MFHandle pHandle);
    
    /**
    * CLib3MFModel::SetUnit - sets the units of a model.
    * @param[in] eUnit - Unit enum value for the model unit
    */
    void SetUnit (const eLib3MFModelUnit eUnit);
    
    /**
    * CLib3MFModel::GetUnit - returns the units of a model.
    * @return Unit enum value for the model unit
    */
    eLib3MFModelUnit GetUnit ();
    
    /**
    * CLib3MFModel::GetLanguage - retrieves the language of a model
    * @return language identifier
    */
    std::string GetLanguage ();
    
    /**
    * CLib3MFModel::SetLanguage - sets the language of a model
    * @param[in] sLanguage - language identifier
    */
    void SetLanguage (const std::string & sLanguage);
    
    /**
    * CLib3MFModel::QueryWriter - creates a model writer instance for a specific file type
    * @param[in] sWriterClass -  string identifier for the file type
    * @return  string identifier for the file type
    */
    PLib3MFWriter QueryWriter (const std::string & sWriterClass);
    
    /**
    * CLib3MFModel::QueryReader - creates a model reader instance for a specific file type
    * @param[in] sReaderClass -  string identifier for the file type
    * @return  string identifier for the file type
    */
    PLib3MFReader QueryReader (const std::string & sReaderClass);
    
    /**
    * CLib3MFModel::GetResourceByID - finds a model resource by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the resource instance
    */
    PLib3MFResource GetResourceByID (const unsigned int nResourceID);
    
    /**
    * CLib3MFModel::GetTexture2DByID - finds a model texture by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the texture2d instance
    */
    PLib3MFTexture2D GetTexture2DByID (const unsigned int nResourceID);
    
    /**
    * CLib3MFModel::GetBaseMaterialByID - finds a model base material by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the basematerial instance
    */
    PLib3MFBaseMaterial GetBaseMaterialByID (const unsigned int nResourceID);
    
    /**
    * CLib3MFModel::GetMeshObjectByID - finds a mesh object by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the mesh object instance
    */
    PLib3MFMeshObject GetMeshObjectByID (const unsigned int nResourceID);
    
    /**
    * CLib3MFModel::GetComponentsObjectByID - finds a components object by its id
    * @param[in] nResourceID - Resource ID
    * @return returns the components object instance
    */
    PLib3MFComponentsObject GetComponentsObjectByID (const unsigned int nResourceID);
    
    /**
    * CLib3MFModel::GetBuildUUID - returns, whether a build has a UUID and, if true, the build's UUID
    * @param[out] bHasUUID - flag whether the build has a UUID
    * @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    std::string GetBuildUUID (bool & bHasUUID);
    
    /**
    * CLib3MFModel::SetBuildUUID - sets the build's UUID
    * @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
    */
    void SetBuildUUID (const std::string & sUUID);
    
    /**
    * CLib3MFModel::GetBuildItems - creates a build item iterator instance with all build items.
    * @return returns the iterator instance.
    */
    PLib3MFBuildItemIterator GetBuildItems ();
    
    /**
    * CLib3MFModel::GetResources - creates a resource iterator instance with all resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator GetResources ();
    
    /**
    * CLib3MFModel::GetObjects - creates a resource iterator instance with all object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator GetObjects ();
    
    /**
    * CLib3MFModel::GetMeshObjects - creates a resource iterator instance with all mesh object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator GetMeshObjects ();
    
    /**
    * CLib3MFModel::GetComponentsObjects - creates a resource iterator instance with all components object resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator GetComponentsObjects ();
    
    /**
    * CLib3MFModel::Get2DTextures - creates a resource iterator instance with all texture2d resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator Get2DTextures ();
    
    /**
    * CLib3MFModel::GetBaseMaterials - creates a resource iterator instance with all base material resources.
    * @return returns the iterator instance.
    */
    PLib3MFResourceIterator GetBaseMaterials ();
    
    /**
    * CLib3MFModel::MergeToModel - Merges all components and objects which are referenced by a build item. The memory is duplicated and a new model is created.
    * @return returns the merged model instance
    */
    PLib3MFModel MergeToModel ();
    
    /**
    * CLib3MFModel::AddMeshObject - adds an empty mesh object to the model.
    * @return  returns the mesh object instance
    */
    PLib3MFMeshObject AddMeshObject ();
    
    /**
    * CLib3MFModel::AddComponentsObject - adds an empty component object to the model.
    * @return  returns the components object instance
    */
    PLib3MFComponentsObject AddComponentsObject ();
    
    /**
    * CLib3MFModel::AddTexture2DFromAttachment - adds a texture2d resource to the model. Its path is given by that of an existing attachment.
    * @param[in] pTextureAttachment - attachment containing the image data.
    * @return returns the new texture instance.
    */
    PLib3MFTexture2D AddTexture2DFromAttachment (CLib3MFAttachment * pTextureAttachment);
    
    /**
    * CLib3MFModel::AddBaseMaterialGroup - adds an empty basematerials resource to the model.
    * @return returns the new base material instance.
    */
    PLib3MFBaseMaterial AddBaseMaterialGroup ();
    
    /**
    * CLib3MFModel::AddBuildItem - adds a build item to the model.
    * @param[in] pObject - Object instance.
    * @param[in] Transform - Transformation matrix.
    * @return returns the build item instance.
    */
    PLib3MFBuildItem AddBuildItem (CLib3MFObject * pObject, const sLib3MFTransform & Transform);
    
    /**
    * CLib3MFModel::RemoveBuildItem - removes a build item from the model
    * @param[in] pBuildItemInstance - Build item to remove.
    */
    void RemoveBuildItem (CLib3MFBuildItem * pBuildItemInstance);
    
    /**
    * CLib3MFModel::GetMetaDataGroup - Returns the metadatagroup of the model
    * @return returns an Instance of the metadatagroup of the model
    */
    PLib3MFMetaDataGroup GetMetaDataGroup ();
    
    /**
    * CLib3MFModel::AddAttachment - adds an attachment stream to the model. The OPC part will be related to the model stream with a certain relationship type..
    * @param[in] sURI - Path of the attachment
    * @param[in] sRelationShipType - Relationship type of the attachment
    * @return Instance of the attachment object
    */
    PLib3MFAttachment AddAttachment (const std::string & sURI, const std::string & sRelationShipType);
    
    /**
    * CLib3MFModel::GetAttachment - retrieves an attachment stream object from the model..
    * @param[in] nIndex - Index of the attachment stream
    * @return Instance of the attachment object
    */
    PLib3MFAttachment GetAttachment (const unsigned int nIndex);
    
    /**
    * CLib3MFModel::FindAttachment - retrieves an attachment stream object from the model.
    * @param[in] sURI - Path URI in the package
    * @return Instance of the attachment object
    */
    PLib3MFAttachment FindAttachment (const std::string & sURI);
    
    /**
    * CLib3MFModel::GetAttachmentCount - retrieves the number of attachments of the model.
    * @return Returns the number of attachments.
    */
    unsigned int GetAttachmentCount ();
    
    /**
    * CLib3MFModel::GetAttachmentSize - retrieves the size of an attachment in bytes.
    * @param[in] nIndex - Index of the attachment stream
    * @return  Returns the size of the attachment in bytes.
    */
    unsigned long long GetAttachmentSize (const unsigned int nIndex);
    
    /**
    * CLib3MFModel::GetAttachmentPath - retrieves the path URI of an attachment.
    * @param[in] nIndex - Index of the attachment stream
    * @return Attachment URI
    */
    std::string GetAttachmentPath (const unsigned int nIndex);
    
    /**
    * CLib3MFModel::HasPackageThumbnailAttachment - Retrieve whether the OPC package contains a package thumbnail.
    * @return returns whether the OPC package contains a package thumbnail
    */
    bool HasPackageThumbnailAttachment ();
    
    /**
    * CLib3MFModel::CreatePackageThumbnailAttachment - Create a new a package thumbnail for the OPC package.
    * @return Instance of a new thumbnailattachment object.
    */
    PLib3MFAttachment CreatePackageThumbnailAttachment ();
    
    /**
    * CLib3MFModel::GetPackageThumbnailAttachment - Get the attachment to the OPC package containing the package thumbnail.
    * @return Instance of the thumbnailattachment object.
    */
    PLib3MFAttachment GetPackageThumbnailAttachment ();
    
    /**
    * CLib3MFModel::RemovePackageThumbnailAttachment - Remove the attachment to the OPC package containing the package thumbnail.
    */
    void RemovePackageThumbnailAttachment ();
    
    /**
    * CLib3MFModel::AddCustomContentType - adds a new Content Type to the model.
    * @param[in] sExtension - File Extension
    * @param[in] sContentType - Content Type Identifier
    */
    void AddCustomContentType (const std::string & sExtension, const std::string & sContentType);
    
    /**
    * CLib3MFModel::RemoveCustomContentType - removes a custom Content Type from the model (UTF8 version).
    * @param[in] sExtension - File Extension
    */
    void RemoveCustomContentType (const std::string & sExtension);
};

     
/*************************************************************************************************************************
 Class CLib3MFWrapper 
**************************************************************************************************************************/
class CLib3MFWrapper {
public:
    static void CheckError(Lib3MFHandle handle, Lib3MFResult nResult);
    
    /**
    * CLib3MFWrapper::GetLibraryVersion - retrieves the current version of the library.
    * @param[out] nMajor - returns the major version of the library
    * @param[out] nMinor - returns the minor version of the library
    * @param[out] nMicro - returns the micro version of the library
    */
    static void GetLibraryVersion (unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro);
    
    /**
    * CLib3MFWrapper::GetSpecificationVersion - retrieves whether a specification is supported, and if so, which version.
    * @param[in] sSpecificationURL - URL of extension to check
    * @param[out] bIsSupported - returns whether this specification is supported
    * @param[out] nMajor - returns the major version of the extension (if IsSupported)
    * @param[out] nMinor - returns the minor version of the extension (if IsSupported)
    * @param[out] nMicro - returns the micro version of the extension (if IsSupported)
    */
    static void GetSpecificationVersion (const std::string & sSpecificationURL, bool & bIsSupported, unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro);
    
    /**
    * CLib3MFWrapper::CreateModel - creates an empty model instance.
    * @return returns an empty model instance
    */
    static PLib3MFModel CreateModel ();
    
    /**
    * CLib3MFWrapper::Release - releases an object instance
    * @param[in] pInstance - releases the memory of the passed object.
    */
    static void Release (CLib3MFBaseClass * pInstance);
    
    /**
    * CLib3MFWrapper::SetJournal - Sets the journal file path
    * @param[in] sJournalPath - File name of the journal file
    */
    static void SetJournal (const std::string & sJournalPath);
};


};

#endif // __LIB3MF_CPPHEADER

