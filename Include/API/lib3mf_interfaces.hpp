/*++

Copyright (C) 2018 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Abstract: This is an autogenerated C++ header file in order to allow easy
development of the 3MF Library. The implementer of the 3MF Library needs to
derive concrete classes from the abstract classes in this header.
Interface version: 1.2.2

*/


#ifndef __LIB3MF_CPPINTERFACES
#define __LIB3MF_CPPINTERFACES

#include <string>

#include "lib3mf_types.h"

namespace Lib3MF {

/**
 Forward declarations of class interfaces
*/

class IInternalLib3MFWriter;
class IInternalLib3MFReader;
class IInternalLib3MFResource;
class IInternalLib3MFResourceIterator;
class IInternalLib3MFPropertyHandler;
class IInternalLib3MFDefaultPropertyHandler;
class IInternalLib3MFMetaData;
class IInternalLib3MFMetaDataGroup;
class IInternalLib3MFObject;
class IInternalLib3MFMeshObject;
class IInternalLib3MFComponent;
class IInternalLib3MFComponentsObject;
class IInternalLib3MFBeamSet;
class IInternalLib3MFBaseMaterial;
class IInternalLib3MFAttachment;
class IInternalLib3MFTexture2D;
class IInternalLib3MFBuildItem;
class IInternalLib3MFBuildItemIterator;
class IInternalLib3MFModel;


/*************************************************************************************************************************
 Class IInternalLib3MFBaseClass 
**************************************************************************************************************************/

class IInternalLib3MFBaseClass {
public:
	virtual ~IInternalLib3MFBaseClass () {}

};


/*************************************************************************************************************************
 Class interface for Lib3MFWriter 
**************************************************************************************************************************/

class IInternalLib3MFWriter : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalWriter::WriteToFile - Writes out the model as file. The file type is specified by the Model Writer class.
	* @param[in] sFilename - Filename to write into
	*/
	virtual void WriteToFile (const std::string sFilename) = 0;

	/**
	* IInternalWriter::GetStreamSize - Retrieves the size of the full 3MF file stream.
	* @param[out] nStreamSize - the stream size
	*/
	virtual void GetStreamSize (unsigned long long & nStreamSize) = 0;

	/**
	* IInternalWriter::WriteToBuffer - Writes out the 3MF file into a memory buffer
	* @param[in] nBufferBufferSize - Number of elements in buffer
	* @param[out] pBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pBufferBuffer - uint8 buffer of buffer to write into
	*/
	virtual void WriteToBuffer (unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFReader 
**************************************************************************************************************************/

class IInternalLib3MFReader : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalReader::ReadFromFile - Reads a model from a file. The file type is specified by the Model Reader class
	* @param[in] sFilename - Filename to read from
	*/
	virtual void ReadFromFile (const std::string sFilename) = 0;

	/**
	* IInternalReader::ReadFromBuffer - Reads a model from a memory buffer.
	* @param[in] nBufferBufferSize - Number of elements in buffer
	* @param[in] pBufferBuffer - Buffer to read from
	*/
	virtual void ReadFromBuffer (const unsigned int nBufferBufferSize, const unsigned char * pBufferBuffer) = 0;

	/**
	* IInternalReader::AddRelationToRead - Adds a relationship type which shall be read as attachment in memory while loading
	* @param[in] sRelationShipType - String of the relationship type
	*/
	virtual void AddRelationToRead (const std::string sRelationShipType) = 0;

	/**
	* IInternalReader::RemoveRelationToRead - Removes a relationship type which shall be read as attachment in memory while loading
	* @param[in] sRelationShipType - String of the relationship type
	*/
	virtual void RemoveRelationToRead (const std::string sRelationShipType) = 0;

	/**
	* IInternalReader::SetStrictModeActive - Activates (deactivates) the strict mode of the reader.
	* @param[in] bStrictModeActive - flag whether strict mode is active or not.
	*/
	virtual void SetStrictModeActive (const bool bStrictModeActive) = 0;

	/**
	* IInternalReader::GetStrictModeActive - Queries whether the strict mode of the reader is active or not
	* @return returns flag whether strict mode is active or not.
	*/
	virtual bool GetStrictModeActive () = 0;

	/**
	* IInternalReader::GetWarning - Returns Warning and Error Information of the read process
	* @param[in] nIndex - Index of the Warning. Valid values are 0 to WarningCount - 1
	* @param[out] nErrorCode - filled with the error code of the warning
	* @return the message of the warning
	*/
	virtual std::string GetWarning (const unsigned int nIndex, unsigned int & nErrorCode) = 0;

	/**
	* IInternalReader::GetWarningCount - Returns Warning and Error Count of the read process
	* @return filled with the count of the occurred warnings.
	*/
	virtual unsigned int GetWarningCount () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFResource 
**************************************************************************************************************************/

class IInternalLib3MFResource : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalResource::GetResourceID - Retrieves the resource id of the resource instance.
	* @return Retrieves the ID of a Model Resource Instance.
	*/
	virtual unsigned int GetResourceID () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFResourceIterator 
**************************************************************************************************************************/

class IInternalLib3MFResourceIterator : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalResourceIterator::MoveNext - Iterates to the next resource in the list.
	* @return Iterates to the next resource in the list.
	*/
	virtual bool MoveNext () = 0;

	/**
	* IInternalResourceIterator::MovePrevious - Iterates to the previous resource in the list.
	* @return Iterates to the previous resource in the list.
	*/
	virtual bool MovePrevious () = 0;

	/**
	* IInternalResourceIterator::GetCurrent - Returns the resource the iterator points at.
	* @return returns the resource instance.
	*/
	virtual IInternalLib3MFResource * GetCurrent () = 0;

	/**
	* IInternalResourceIterator::Clone - Creates a new resource iterator with the same resource list.
	* @return returns the cloned Iterator instance
	*/
	virtual IInternalLib3MFResourceIterator * Clone () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFPropertyHandler 
**************************************************************************************************************************/

class IInternalLib3MFPropertyHandler : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalPropertyHandler::RemoveProperty - Removes all properties of a specific triangle.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	*/
	virtual void RemoveProperty (const unsigned int nIndex) = 0;

	/**
	* IInternalPropertyHandler::RemoveAllProperties - Removes all properties of the triangle mesh.
	*/
	virtual void RemoveAllProperties () = 0;

	/**
	* IInternalPropertyHandler::GetPropertyType - Returns the property type of the specific triangle.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @return property type of the triangle.
	*/
	virtual eLib3MFPropertyType GetPropertyType (const unsigned int nIndex) = 0;

	/**
	* IInternalPropertyHandler::GetBaseMaterial - Returns the base material of a specific triangle.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
	* @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
	*/
	virtual void GetBaseMaterial (const unsigned int nIndex, unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex) = 0;

	/**
	* IInternalPropertyHandler::SetBaseMaterial - Sets the material of a triangle to a specific single value. All other Triangle properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] nMaterialGroupId - Group ID of the Material Group
	* @param[in] nMaterialIndex - Index of the Material in the Group
	*/
	virtual void SetBaseMaterial (const unsigned int nIndex, const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex) = 0;

	/**
	* IInternalPropertyHandler::SetBaseMaterialArray - Sets the materials of all triangles to specific values.
	* @param[in] nMaterialGroupIdsBufferSize - Number of elements in buffer
	* @param[in] pMaterialGroupIdsBuffer - array of the material Group IDs. Must have trianglecount entries.
	* @param[in] nMaterialIndicesBufferSize - Number of elements in buffer
	* @param[in] pMaterialIndicesBuffer - array of the corresponding material indices. Must have trianglecount entries.
	*/
	virtual void SetBaseMaterialArray (const unsigned int nMaterialGroupIdsBufferSize, const unsigned int * pMaterialGroupIdsBuffer, const unsigned int nMaterialIndicesBufferSize, const unsigned int * pMaterialIndicesBuffer) = 0;

	/**
	* IInternalPropertyHandler::GetBaseMaterialArray - Gets the materials of all triangles.
	* @param[in] nMaterialGroupIdsBufferSize - Number of elements in buffer
	* @param[out] pMaterialGroupIdsNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pMaterialGroupIdsBuffer - uint32 buffer of array of the material Group IDs. Must have trianglecount entries.
	* @param[in] nMaterialIndicesBufferSize - Number of elements in buffer
	* @param[out] pMaterialIndicesNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pMaterialIndicesBuffer - uint32 buffer of array of the corresponding material indices. Must have trianglecount entries.
	*/
	virtual void GetBaseMaterialArray (unsigned int nMaterialGroupIdsBufferSize, unsigned int * pMaterialGroupIdsNeededCount, unsigned int * pMaterialGroupIdsBuffer, unsigned int nMaterialIndicesBufferSize, unsigned int * pMaterialIndicesNeededCount, unsigned int * pMaterialIndicesBuffer) = 0;

	/**
	* IInternalPropertyHandler::SetSingleColor - Sets the specific triangle to a single color. All other properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] Color - new color value of the triangle. (#00000000) means no color property.
	*/
	virtual void SetSingleColor (const unsigned int nIndex, const sLib3MFColorRGBA Color) = 0;

	/**
	* IInternalPropertyHandler::SetSingleColorRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] nRed - New red value of the color of the triangle (0-255)
	* @param[in] nGreen - New green value of the color of the triangle (0-255)
	* @param[in] nBlue - New blue value of the color of the triangle (0-255)
	*/
	virtual void SetSingleColorRGB (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue) = 0;

	/**
	* IInternalPropertyHandler::SetSingleColorRGBA - Sets the specific triangle to a single color. All other properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] nRed - New red value of the color of the triangle (0-255)
	* @param[in] nGreen - New green value of the color of the triangle (0-255)
	* @param[in] nBlue - New blue value of the color of the triangle (0-255)
	* @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
	*/
	virtual void SetSingleColorRGBA (const unsigned int nIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha) = 0;

	/**
	* IInternalPropertyHandler::SetSingleColorFloatRGB - Sets the specific triangle to a single color with alpha 255. All other properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] fRed - New red value of the color of the triangle (0-1)
	* @param[in] fGreen - New green value of the color of the triangle (0-1)
	* @param[in] fBlue - New blue value of the color of the triangle (0-1)
	*/
	virtual void SetSingleColorFloatRGB (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue) = 0;

	/**
	* IInternalPropertyHandler::SetSingleColorFloatRGBA - Sets the specific triangle to a single color. All other properties are removed.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] fRed - New red value of the color of the triangle (0-1)
	* @param[in] fGreen - New green value of the color of the triangle (0-1)
	* @param[in] fBlue - New blue value of the color of the triangle (0-1)
	* @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
	*/
	virtual void SetSingleColorFloatRGBA (const unsigned int nIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFDefaultPropertyHandler 
**************************************************************************************************************************/

class IInternalLib3MFDefaultPropertyHandler : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalDefaultPropertyHandler::RemoveProperty - Removes the default property of the object.
	*/
	virtual void RemoveProperty () = 0;

	/**
	* IInternalDefaultPropertyHandler::GetPropertyType - Returns the default property type of the object.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @return property type of the triangle.
	*/
	virtual eLib3MFPropertyType GetPropertyType (const unsigned int nIndex) = 0;

	/**
	* IInternalDefaultPropertyHandler::GetBaseMaterial - Returns the base material the object.
	* @param[out] nMaterialGroupId - returns the material group id, per triangle. A return group id of 0 means either no property at all or a non-material property.
	* @param[out] nMaterialIndex - returns the material index, per triangle. Returns 0, if no base material is assigned.
	*/
	virtual void GetBaseMaterial (unsigned int & nMaterialGroupId, unsigned int & nMaterialIndex) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetBaseMaterial - Sets the material of an object to a specific single value. This must be a base material.
	* @param[in] nMaterialGroupId - Group ID of the Material Group
	* @param[in] nMaterialIndex - Index of the Material in the Group
	*/
	virtual void SetBaseMaterial (const unsigned int nMaterialGroupId, const unsigned int nMaterialIndex) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetColorRGB - Sets the default property of an object to a single color.
	* @param[in] nRed - New red value of the color of the triangle (0-255)
	* @param[in] nGreen - New green value of the color of the triangle (0-255)
	* @param[in] nBlue - New blue value of the color of the triangle (0-255)
	*/
	virtual void SetColorRGB (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetColorRGBA - Sets the default property of an object to a single color.
	* @param[in] nRed - New red value of the color of the triangle (0-255)
	* @param[in] nGreen - New green value of the color of the triangle (0-255)
	* @param[in] nBlue - New blue value of the color of the triangle (0-255)
	* @param[in] nAlpha - New alpha value of the color of the triangle (0-255)
	*/
	virtual void SetColorRGBA (const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetFloatColorRGB - Sets the default property of an object to a single color.
	* @param[in] fRed - New red value of the color of the triangle (0-1)
	* @param[in] fGreen - New green value of the color of the triangle (0-1)
	* @param[in] fBlue - New blue value of the color of the triangle (0-1)
	*/
	virtual void SetFloatColorRGB (const float fRed, const float fGreen, const float fBlue) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetFloatColorRGBA - Sets the default property of an object to a single color.
	* @param[in] fRed - New red value of the color of the triangle (0-1)
	* @param[in] fGreen - New green value of the color of the triangle (0-1)
	* @param[in] fBlue - New blue value of the color of the triangle (0-1)
	* @param[in] fAlpha - New alpha value of the color of the triangle (0-1)
	*/
	virtual void SetFloatColorRGBA (const float fRed, const float fGreen, const float fBlue, const float fAlpha) = 0;

	/**
	* IInternalDefaultPropertyHandler::GetTexture - Returns the default 2D texture information of an object.
	* @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
	* @param[out] fU - Returns the default U value of the object.
	* @param[out] fV - Returns the default V value of the object.
	*/
	virtual void GetTexture (unsigned int & nTextureID, float & fU, float & fV) = 0;

	/**
	* IInternalDefaultPropertyHandler::SetTexture - Sets the default 2D texture information of an object.
	* @param[out] nTextureID - Returns the default Texture ID of the object. 0 means no property or a different kind of property.
	* @param[out] fU - Returns the default U value of the object.
	* @param[out] fV - Returns the default V value of the object.
	*/
	virtual void SetTexture (unsigned int & nTextureID, float & fU, float & fV) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFMetaData 
**************************************************************************************************************************/

class IInternalLib3MFMetaData : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalMetaData::GetNameSpace - returns the namespace URL of the metadata
	* @return the namespace URL of the metadata
	*/
	virtual std::string GetNameSpace () = 0;

	/**
	* IInternalMetaData::SetNameSpace - sets a new namespace URL of the metadata
	* @param[in] sNameSpace - the new namespace URL of the metadata
	*/
	virtual void SetNameSpace (const std::string sNameSpace) = 0;

	/**
	* IInternalMetaData::GetName - returns the name of a metadata
	* @return the name of the metadata
	*/
	virtual std::string GetName () = 0;

	/**
	* IInternalMetaData::SetName - sets a new name of a metadata
	* @param[in] sName - the new name of the metadata
	*/
	virtual void SetName (const std::string sName) = 0;

	/**
	* IInternalMetaData::GetMustPreserve - returns, whether a metadata must be preserved
	* @return returns, whether a metadata must be preserved
	*/
	virtual bool GetMustPreserve () = 0;

	/**
	* IInternalMetaData::SetMustPreserve - sets whether a metadata must be preserved
	* @param[in] bMustPreserve - a new value whether a metadata must be preserved
	*/
	virtual void SetMustPreserve (const bool bMustPreserve) = 0;

	/**
	* IInternalMetaData::GetType - returns the type of a metadata
	* @return the type of the metadata
	*/
	virtual std::string GetType () = 0;

	/**
	* IInternalMetaData::SetType - sets a new type of a metadata. This must be a simple XML type
	* @param[in] sType - a new type of the metadata
	*/
	virtual void SetType (const std::string sType) = 0;

	/**
	* IInternalMetaData::GetValue - returns the value of the metadata
	* @return the value of the metadata
	*/
	virtual std::string GetValue () = 0;

	/**
	* IInternalMetaData::SetValue - sets a new value of the metadata
	* @param[in] sValue - a new value of the metadata
	*/
	virtual void SetValue (const std::string sValue) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFMetaDataGroup 
**************************************************************************************************************************/

class IInternalLib3MFMetaDataGroup : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalMetaDataGroup::GetMetaDataCount - returns the number of metadata in this metadatagroup
	* @return returns the number metadata
	*/
	virtual unsigned int GetMetaDataCount () = 0;

	/**
	* IInternalMetaDataGroup::GetMetaDataKey - returns a metadata key within this metadatagroup
	* @param[in] nIndex - Index of the metadata.
	* @param[out] sNameSpace - the namespace of the metadata
	* @param[out] sName - the name of the metadata
	*/
	virtual void GetMetaDataKey (const unsigned int nIndex, std::string & sNameSpace, std::string & sName) = 0;

	/**
	* IInternalMetaDataGroup::GetMetaData - returns a metadata value within this metadatagroup
	* @param[in] nIndex - Index of the Metadata.
	* @return an instance of the metadata
	*/
	virtual IInternalLib3MFMetaData * GetMetaData (const unsigned int nIndex) = 0;

	/**
	* IInternalMetaDataGroup::GetMetaDataByKey - returns a metadata value within this metadatagroup
	* @param[in] sNameSpace - the namespace of the metadata
	* @param[in] sName - the name of the Metadata
	* @return an instance of the metadata
	*/
	virtual IInternalLib3MFMetaData * GetMetaDataByKey (const std::string sNameSpace, const std::string sName) = 0;

	/**
	* IInternalMetaDataGroup::RemoveMetaData - removes metadata pair from the model.
	* @param[in] nIndex -  Index of the metadata
	*/
	virtual void RemoveMetaData (const unsigned int nIndex) = 0;

	/**
	* IInternalMetaDataGroup::RemoveMetaDataByKey - removes metadata pair from the model.
	* @param[in] sNameSpace - the namespace of the metadata
	* @param[in] sName - the name of the metadata
	*/
	virtual void RemoveMetaDataByKey (const std::string sNameSpace, const std::string sName) = 0;

	/**
	* IInternalMetaDataGroup::AddMetaData - adds a new metadata to this metadatagroup
	* @param[in] sNameSpace - the namespace of the metadata
	* @param[in] sName - the name of the metadata
	* @return an instance of the metadata
	*/
	virtual IInternalLib3MFMetaData * AddMetaData (const std::string sNameSpace, const std::string sName) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFObject 
**************************************************************************************************************************/

class IInternalLib3MFObject : public virtual IInternalLib3MFBaseClass, public virtual IInternalLib3MFResource {
public:
	/**
	* IInternalObject::GetType - Retrieves a object's type
	* @return returns object type enum.
	*/
	virtual eLib3MFObjectType GetType () = 0;

	/**
	* IInternalObject::SetType - Sets an object's type
	* @param[in] eObjectType - object type enum.
	*/
	virtual void SetType (const eLib3MFObjectType eObjectType) = 0;

	/**
	* IInternalObject::GetName - Retrieves an object's name
	* @return returns object name.
	*/
	virtual std::string GetName () = 0;

	/**
	* IInternalObject::SetName - Sets an object's name string
	* @param[in] sName - new object name.
	*/
	virtual void SetName (const std::string sName) = 0;

	/**
	* IInternalObject::GetPartNumber - Retrieves an object's part number
	* @return returns object part number.
	*/
	virtual std::string GetPartNumber () = 0;

	/**
	* IInternalObject::SetPartNumber - Sets an object's partnumber string
	* @param[in] sPartNumber - new object part number.
	*/
	virtual void SetPartNumber (const std::string sPartNumber) = 0;

	/**
	* IInternalObject::IsMeshObject - Retrieves, if an object is a mesh object
	* @return returns, whether the object is a mesh object
	*/
	virtual bool IsMeshObject () = 0;

	/**
	* IInternalObject::IsComponentsObject - Retrieves, if an object is a components object
	* @return returns, whether the object is a components object
	*/
	virtual bool IsComponentsObject () = 0;

	/**
	* IInternalObject::IsValid - Retrieves, if the object is valid according to the core spec.|For mesh objects, we distinguish between the type attribute of the object:|In case of object type 'other', this always means 'false'.|In case of object type 'model' or 'solidsupport', this means, if the mesh suffices all requirements of the core spec chapter 4.1.|In case of object type 'support' or 'surface', this always means 'true'.|A component objects is valid if and only if it contains at least one component and all child components are valid objects.
	* @return returns, whether the object is a valid object description
	*/
	virtual bool IsValid () = 0;

	/**
	* IInternalObject::HasMetaDataGroup - Returns whether the object has a metadatagroup
	* @return returns whether the object has a metadatagroup
	*/
	virtual bool HasMetaDataGroup () = 0;

	/**
	* IInternalObject::GetMetaDataGroup - Returns the metadatagroup of this object
	* @return returns an Instance of the metadatagroup of this object
	*/
	virtual IInternalLib3MFMetaDataGroup * GetMetaDataGroup () = 0;

	/**
	* IInternalObject::CreateMetaDataGroup - Creates a new metadatagroup for this object
	* @return returns an Instance of a new metadatagroup for this object
	*/
	virtual IInternalLib3MFMetaDataGroup * CreateMetaDataGroup () = 0;

	/**
	* IInternalObject::RemoveMetaDataGroup - Removes the object's metadatagroup
	*/
	virtual void RemoveMetaDataGroup () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFMeshObject 
**************************************************************************************************************************/

class IInternalLib3MFMeshObject : public virtual IInternalLib3MFBaseClass, public virtual IInternalLib3MFObject {
public:
	/**
	* IInternalMeshObject::GetVertexCount - Returns the vertex count of a mesh object.
	* @return filled with the vertex count.
	*/
	virtual unsigned int GetVertexCount () = 0;

	/**
	* IInternalMeshObject::GetTriangleCount - Returns the triangle count of a mesh object.
	* @return filled with the triangle count.
	*/
	virtual unsigned int GetTriangleCount () = 0;

	/**
	* IInternalMeshObject::SetVertex - Sets the coordinates of a single vertex of a mesh object
	* @param[in] nIndex - Index of the vertex (0 to vertexcount - 1)
	* @param[in] Coordinates - contains the vertex coordinates.
	*/
	virtual void SetVertex (const unsigned int nIndex, const sLib3MFPosition Coordinates) = 0;

	/**
	* IInternalMeshObject::AddVertex - Adds a single vertex to a mesh object
	* @param[in] Coordinates - contains the vertex coordinates.
	* @return Index of the new vertex
	*/
	virtual unsigned int AddVertex (const sLib3MFPosition Coordinates) = 0;

	/**
	* IInternalMeshObject::GetTriangle - Returns indices of a single triangle of a mesh object.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @return filled with the triangle indices.
	*/
	virtual sLib3MFTriangle GetTriangle (const unsigned int nIndex) = 0;

	/**
	* IInternalMeshObject::SetTriangle - Sets the indices of a single triangle of a mesh object.
	* @param[in] nIndex - Index of the triangle (0 to trianglecount - 1)
	* @param[in] Indices - contains the triangle indices.
	*/
	virtual void SetTriangle (const unsigned int nIndex, const sLib3MFTriangle Indices) = 0;

	/**
	* IInternalMeshObject::AddTriangle - Adds a single triangle to a mesh object
	* @param[in] Indices - contains the triangle indices.
	* @return Index of the new triangle
	*/
	virtual unsigned int AddTriangle (const sLib3MFTriangle Indices) = 0;

	/**
	* IInternalMeshObject::GetTriangleIndices - Get all triangles of a mesh object
	* @param[in] nIndicesBufferSize - Number of elements in buffer
	* @param[out] pIndicesNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pIndicesBuffer - Triangle buffer of contains the triangle indices.
	*/
	virtual void GetTriangleIndices (unsigned int nIndicesBufferSize, unsigned int * pIndicesNeededCount, sLib3MFTriangle * pIndicesBuffer) = 0;

	/**
	* IInternalMeshObject::SetTriangleIndices - Set all triangles of a mesh object
	* @param[in] nIndicesBufferSize - Number of elements in buffer
	* @param[in] pIndicesBuffer - contains the triangle indices.
	*/
	virtual void SetTriangleIndices (const unsigned int nIndicesBufferSize, const sLib3MFTriangle * pIndicesBuffer) = 0;

	/**
	* IInternalMeshObject::GetBeamLattice_MinLength - Returns the minimal length of beams for the beamlattice.
	* @return minimal length of beams for the beamlattice
	*/
	virtual double GetBeamLattice_MinLength () = 0;

	/**
	* IInternalMeshObject::SetBeamLattice_MinLength - Sets the minimal length of beams for the beamlattice.
	* @param[in] dMinLength - minimal length of beams for the beamlattice
	*/
	virtual void SetBeamLattice_MinLength (const double dMinLength) = 0;

	/**
	* IInternalMeshObject::GetBeamLattice_Radius - Returns the default radius for the beamlattice.
	* @return default radius of the beams in the beamlattice
	*/
	virtual double GetBeamLattice_Radius () = 0;

	/**
	* IInternalMeshObject::SetBeamLattice_Radius - Sets the default radius for the beamlattice.
	* @param[in] dRadius - default radius of the beams in the beamlattice
	*/
	virtual void SetBeamLattice_Radius (const double dRadius) = 0;

	/**
	* IInternalMeshObject::GetBeamLattice_CapMode - Returns the default capping mode for the beamlattice.
	* @return default cap mode of the beamlattice
	*/
	virtual eLib3MFBeamLatticeCapMode GetBeamLattice_CapMode () = 0;

	/**
	* IInternalMeshObject::SetBeamLattice_CapMode - Sets the default capping mode for the beamlattice.
	* @param[in] eCapMode - default cap mode of the beamlattice
	*/
	virtual void SetBeamLattice_CapMode (const eLib3MFBeamLatticeCapMode eCapMode) = 0;

	/**
	* IInternalMeshObject::GetBeamLattice_Clipping - Returns the clipping mode and the clipping-mesh for the beamlattice of this mesh.
	* @param[out] eClipMode - contains the clip mode of this mesh
	* @param[out] nResourceID - filled with the resourceID of the clipping mesh-object or an undefined value if pClipMode is MODELBEAMLATTICECLIPMODE_NONE
	*/
	virtual void GetBeamLattice_Clipping (eLib3MFBeamLatticeClipMode & eClipMode, unsigned int & nResourceID) = 0;

	/**
	* IInternalMeshObject::SetBeamLattice_Clipping - Sets the clipping mode and the clipping-mesh for the beamlattice of this mesh.
	* @param[in] eClipMode - contains the clip mode of this mesh
	* @param[in] nResourceID - the resourceID of the clipping mesh-object. This mesh-object has to be defined before setting the Clipping.
	*/
	virtual void SetBeamLattice_Clipping (const eLib3MFBeamLatticeClipMode eClipMode, const unsigned int nResourceID) = 0;

	/**
	* IInternalMeshObject::GetBeamLattice_Representation - Returns the representation-mesh for the beamlattice of this mesh.
	* @param[out] bHasRepresentation - flag whether the beamlattice has a representation mesh.
	* @param[out] nResourceID - filled with the resourceID of the clipping mesh-object.
	*/
	virtual void GetBeamLattice_Representation (bool & bHasRepresentation, unsigned int & nResourceID) = 0;

	/**
	* IInternalMeshObject::SetBeamLattice_Representation - Sets the representation-mesh for the beamlattice of this mesh.
	* @param[in] nResourceID - the resourceID of the representation mesh-object. This mesh-object has to be defined before setting the representation.
	*/
	virtual void SetBeamLattice_Representation (const unsigned int nResourceID) = 0;

	/**
	* IInternalMeshObject::GetBeamCount - Returns the beam count of a mesh object.
	* @return filled with the beam count.
	*/
	virtual unsigned int GetBeamCount () = 0;

	/**
	* IInternalMeshObject::AddBeam - Adds a single beam to a mesh object.
	* @param[in] BeamInfo - contains the node indices, radii and capmodes.
	* @return filled with the new Index of the beam.
	*/
	virtual unsigned int AddBeam (const sLib3MFBeam BeamInfo) = 0;

	/**
	* IInternalMeshObject::SetBeam - Sets the indices, radii and capmodes of a single beam of a mesh object.
	* @param[in] nIndex - Index of the beam (0 to beamcount - 1).
	* @param[in] BeamInfo - filled with the beam indices, radii and capmodes.
	*/
	virtual void SetBeam (const unsigned int nIndex, const sLib3MFBeam BeamInfo) = 0;

	/**
	* IInternalMeshObject::GetBeamSetCount - Returns the number of beamsets of a mesh object.
	* @return filled with the beamset count.
	*/
	virtual unsigned int GetBeamSetCount () = 0;

	/**
	* IInternalMeshObject::AddBeamSet - Adds an empty beamset to a mesh object
	* @return the new beamset
	*/
	virtual IInternalLib3MFBeamSet * AddBeamSet () = 0;

	/**
	* IInternalMeshObject::GetBeamSet - Returns a beamset of a mesh object
	* @param[in] nIndex - index of the requested beamset (0 ... beamsetcount-1).
	* @return the requested beamset
	*/
	virtual IInternalLib3MFBeamSet * GetBeamSet (const unsigned int nIndex) = 0;

	/**
	* IInternalMeshObject::IsManifoldAndOriented - Retrieves, if an object describes a topologically oriented and manifold mesh, according to the core spec.
	* @return returns, if the object is oriented and manifold.
	*/
	virtual bool IsManifoldAndOriented () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFComponent 
**************************************************************************************************************************/

class IInternalLib3MFComponent : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalComponent::GetObjectResource - Returns the Resource Instance of the component..
	* @return filled with the Resource Instance.
	*/
	virtual IInternalLib3MFObject * GetObjectResource () = 0;

	/**
	* IInternalComponent::GetObjectResourceID - Returns the Resource ID of the component.
	* @return returns the Resource ID.
	*/
	virtual unsigned int GetObjectResourceID () = 0;

	/**
	* IInternalComponent::GetUUID - returns, whether a component has a UUID and, if true, the component's UUID
	* @param[out] bHasUUID - flag whether the component has a UUID
	* @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual std::string GetUUID (bool & bHasUUID) = 0;

	/**
	* IInternalComponent::SetUUID - sets the component's UUID
	* @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual void SetUUID (const std::string sUUID) = 0;

	/**
	* IInternalComponent::HasTransform - Returns, if the component has a different transformation than the identity matrix
	* @return if true is returned, the transformation is not equal than the identity
	*/
	virtual bool HasTransform () = 0;

	/**
	* IInternalComponent::SetTransform - Sets the transformation matrix of the component.
	* @param[in] Transform - new transformation matrix
	*/
	virtual void SetTransform (const sLib3MFTransform Transform) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFComponentsObject 
**************************************************************************************************************************/

class IInternalLib3MFComponentsObject : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalComponentsObject::AddComponent - Adds a new component to a component object.
	* @param[in] pObjectResource - object to add as component. May not lead to circular references!
	* @param[in] Transform - optional transform matrix for the component.
	* @return new component instance
	*/
	virtual IInternalLib3MFComponentsObject * AddComponent (IInternalLib3MFObject& pObjectResource, const sLib3MFTransform Transform) = 0;

	/**
	* IInternalComponentsObject::GetComponent - Retrieves a component from a component object.
	* @param[in] nIndex - index of the component to retrieve (0 to componentcount - 1)
	* @return component instance
	*/
	virtual IInternalLib3MFComponentsObject * GetComponent (const unsigned int nIndex) = 0;

	/**
	* IInternalComponentsObject::GetComponentCount -  Retrieves a component count of a component object.
	* @return returns the component count
	*/
	virtual unsigned int GetComponentCount () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFBeamSet 
**************************************************************************************************************************/

class IInternalLib3MFBeamSet : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalBeamSet::SetName - Sets a beamset's name string
	* @param[in] sName - new name of the beamset.
	*/
	virtual void SetName (const std::string sName) = 0;

	/**
	* IInternalBeamSet::GetName - Retrieves a beamset's name string
	* @return returns the name of the beamset.
	*/
	virtual std::string GetName () = 0;

	/**
	* IInternalBeamSet::SetIdentifier - Sets a beamset's identifier string
	* @param[in] sIdentifier - new name of the beamset.
	*/
	virtual void SetIdentifier (const std::string sIdentifier) = 0;

	/**
	* IInternalBeamSet::GetIdentifier - Retrieves a beamset's identifier string
	* @return returns the identifier of the beamset.
	*/
	virtual std::string GetIdentifier () = 0;

	/**
	* IInternalBeamSet::GetReferenceCount - Retrieves the reference count of a beamset
	* @return returns the reference count
	*/
	virtual unsigned int GetReferenceCount () = 0;

	/**
	* IInternalBeamSet::SetReferences - Sets the references of a beamset
	* @param[in] nReferencesBufferSize - Number of elements in buffer
	* @param[in] pReferencesBuffer - the new indices of all beams in this beamset
	*/
	virtual void SetReferences (const unsigned int nReferencesBufferSize, const unsigned int * pReferencesBuffer) = 0;

	/**
	* IInternalBeamSet::GetReferences - Retrieves the references of a beamset
	* @param[in] nReferencesBufferSize - Number of elements in buffer
	* @param[out] pReferencesNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pReferencesBuffer - uint32 buffer of retrieves the indices of all beams in this beamset
	*/
	virtual void GetReferences (unsigned int nReferencesBufferSize, unsigned int * pReferencesNeededCount, unsigned int * pReferencesBuffer) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFBaseMaterial 
**************************************************************************************************************************/

class IInternalLib3MFBaseMaterial : public virtual IInternalLib3MFBaseClass, public virtual IInternalLib3MFResource {
public:
	/**
	* IInternalBaseMaterial::GetCount - Retrieves the count of base materials in the material group.
	* @return returns the count of base materials.
	*/
	virtual unsigned int GetCount () = 0;

	/**
	* IInternalBaseMaterial::GetResourceID - Retrieves the resource id of the material group.
	* @return returns the id of the material group.
	*/
	virtual unsigned int GetResourceID () = 0;

	/**
	* IInternalBaseMaterial::AddMaterial - Adds a new material to the material group
	* @param[in] sName - new name of the base material.
	* @param[in] nRed - New red value of display color (0-255)
	* @param[in] nGreen - New green value of display color (0-255)
	* @param[in] nBlue - New blue value of display color (0-255)
	* @return returns new Index of the material in the material group.
	*/
	virtual unsigned int AddMaterial (const std::string sName, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue) = 0;

	/**
	* IInternalBaseMaterial::RemoveMaterial - Removes a material from the material group.
	* @param[in] nResourceIndex - Index of the material in the material group.
	*/
	virtual void RemoveMaterial (const unsigned int nResourceIndex) = 0;

	/**
	* IInternalBaseMaterial::GetName - Returns the base material's name
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @return returns the name of the base material.
	*/
	virtual std::string GetName (const unsigned int nResourceIndex) = 0;

	/**
	* IInternalBaseMaterial::SetName - Sets a base material's name
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[in] sName - new name of the base material.
	*/
	virtual void SetName (const unsigned int nResourceIndex, const std::string sName) = 0;

	/**
	* IInternalBaseMaterial::SetDisplayColorRGB - Sets a base material's display color. Alpha is set to 255.
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[in] nRed - New red value of display color (0-255)
	* @param[in] nGreen - New green value of display color (0-255)
	* @param[in] nBlue - New blue value of display color (0-255)
	*/
	virtual void SetDisplayColorRGB (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue) = 0;

	/**
	* IInternalBaseMaterial::SetDisplayColorRGBA - Sets a base material's display color.
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[in] nRed - New red value of display color (0-255)
	* @param[in] nGreen - New green value of display color (0-255)
	* @param[in] nBlue - New blue value of display color (0-255)
	* @param[in] nAlpha - New alpha value of display color (0-255)
	*/
	virtual void SetDisplayColorRGBA (const unsigned int nResourceIndex, const unsigned char nRed, const unsigned char nGreen, const unsigned char nBlue, const unsigned char nAlpha) = 0;

	/**
	* IInternalBaseMaterial::SetDisplayColorFloatRGB - Sets a base material's display color. Alpha is set to 1.0.
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[in] fRed - New red value of display color (0-1)
	* @param[in] fGreen - New green value of display color (0-1)
	* @param[in] fBlue - New blue value of display color (0-1)
	*/
	virtual void SetDisplayColorFloatRGB (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue) = 0;

	/**
	* IInternalBaseMaterial::SetDisplayColorFloatRGBA - Sets a base material's display color.
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[in] fRed - New red value of display color (0-1)
	* @param[in] fGreen - New green value of display color (0-1)
	* @param[in] fBlue - New blue value of display color (0-1)
	* @param[in] fAlpha - New alpha value of display color (0-1)
	*/
	virtual void SetDisplayColorFloatRGBA (const unsigned int nResourceIndex, const float fRed, const float fGreen, const float fBlue, const float fAlpha) = 0;

	/**
	* IInternalBaseMaterial::GetDisplayColor - Returns a base material's display color.
	* @param[in] nResourceIndex - Index of the material in the material group.
	* @param[out] nRed - Returns red value of display color (0-255)
	* @param[out] nGreen - Returns green value of display color (0-255)
	* @param[out] nBlue - Returns blue value of display color (0-255)
	* @param[out] nAlpha - Returns blue value of display color (0-255)
	*/
	virtual void GetDisplayColor (const unsigned int nResourceIndex, unsigned char & nRed, unsigned char & nGreen, unsigned char & nBlue, unsigned char & nAlpha) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFAttachment 
**************************************************************************************************************************/

class IInternalLib3MFAttachment : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalAttachment::GetPath - Retrieves an attachment's package path.
	* @return returns the attachment's package path string
	*/
	virtual std::string GetPath () = 0;

	/**
	* IInternalAttachment::SetPath - Sets an attachment's package path.
	* @param[in] sPath - new path of the attachment.
	*/
	virtual void SetPath (const std::string sPath) = 0;

	/**
	* IInternalAttachment::GetRelationShipType - Retrieves an attachment's relationship type
	* @return returns the attachment's package relationship type string
	*/
	virtual std::string GetRelationShipType () = 0;

	/**
	* IInternalAttachment::SetRelationShipType - Sets an attachment's relationship type.
	* @param[in] sPath - new relationship type string.
	*/
	virtual void SetRelationShipType (const std::string sPath) = 0;

	/**
	* IInternalAttachment::WriteToFile - Writes out the attachment as file.
	* @param[in] sFileName - file to write into.
	*/
	virtual void WriteToFile (const std::string sFileName) = 0;

	/**
	* IInternalAttachment::ReadFromFile - Reads an attachment from a file.
	* @param[in] sFileName - file to read from.
	*/
	virtual void ReadFromFile (const std::string sFileName) = 0;

	/**
	* IInternalAttachment::GetStreamSize - Retrieves the size of the attachment stream
	* @return the stream size
	*/
	virtual unsigned long long GetStreamSize () = 0;

	/**
	* IInternalAttachment::WriteToBuffer - Writes out the attachment into a buffer
	* @param[in] nBufferBufferSize - Number of elements in buffer
	* @param[out] pBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pBufferBuffer - uint8 buffer of Buffer to write into
	*/
	virtual void WriteToBuffer (unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer) = 0;

	/**
	* IInternalAttachment::ReadFromBuffer - Reads an attachment from a memory buffer
	* @param[in] nBufferBufferSize - Number of elements in buffer
	* @param[out] pBufferNeededCount - will be filled with the count of the written structs, or needed buffer size.
	* @param[out] pBufferBuffer - uint8 buffer of Buffer to read from
	*/
	virtual void ReadFromBuffer (unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFTexture2D 
**************************************************************************************************************************/

class IInternalLib3MFTexture2D : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalTexture2D::GetAttachment - Retrieves the attachment located at the path of the texture.
	* @return attachment that holds the texture's image information.
	*/
	virtual IInternalLib3MFAttachment * GetAttachment () = 0;

	/**
	* IInternalTexture2D::SetAttachment - Sets the texture's package path to the path of the attachment.
	* @param[in] pAttachment - attachment that holds the texture's image information.
	*/
	virtual void SetAttachment (IInternalLib3MFAttachment& pAttachment) = 0;

	/**
	* IInternalTexture2D::GetContentType - Retrieves a texture's content type.
	* @return returns content type enum.
	*/
	virtual eLib3MFTextureType GetContentType () = 0;

	/**
	* IInternalTexture2D::SetContentType - Retrieves a texture's content type.
	* @param[in] eContentType - new Content Type
	*/
	virtual void SetContentType (const eLib3MFTextureType eContentType) = 0;

	/**
	* IInternalTexture2D::GetTileStyleUV - Retrieves a texture's tilestyle type.
	* @param[out] eTileStyleU - returns tilestyle type enum.
	* @param[out] eTileStyleV - returns tilestyle type enum.
	*/
	virtual void GetTileStyleUV (eLib3MFTextureTileStyle & eTileStyleU, eLib3MFTextureTileStyle & eTileStyleV) = 0;

	/**
	* IInternalTexture2D::SetTileStyleUV - Sets a texture's tilestyle type.
	* @param[in] eTileStyleU - new tilestyle type enum.
	* @param[in] eTileStyleV - new tilestyle type enum.
	*/
	virtual void SetTileStyleUV (const eLib3MFTextureTileStyle eTileStyleU, const eLib3MFTextureTileStyle eTileStyleV) = 0;

	/**
	* IInternalTexture2D::GetFilter - Retrieves a texture's filter type.
	* @return returns filter type enum.
	*/
	virtual eLib3MFTextureFilter GetFilter () = 0;

	/**
	* IInternalTexture2D::SetFilter - Sets a texture's filter type.
	* @param[in] eFilter - sets new filter type enum.
	*/
	virtual void SetFilter (const eLib3MFTextureFilter eFilter) = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFBuildItem 
**************************************************************************************************************************/

class IInternalLib3MFBuildItem : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalBuildItem::GetObjectResource - Retrieves the object resource associated to a build item
	* @return returns the associated resource instance
	*/
	virtual IInternalLib3MFResource * GetObjectResource () = 0;

	/**
	* IInternalBuildItem::GetUUID - returns, whether a build item has a UUID and, if true, the build item's UUID
	* @param[out] bHasUUID - flag whether the build item has a UUID
	* @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual std::string GetUUID (bool & bHasUUID) = 0;

	/**
	* IInternalBuildItem::SetUUID - sets the build item's UUID
	* @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual void SetUUID (const std::string sUUID) = 0;

	/**
	* IInternalBuildItem::GetObjectResourceID - Retrieves the object resource id associated to a build item
	* @return  eturns the ID of the object
	*/
	virtual unsigned int GetObjectResourceID () = 0;

	/**
	* IInternalBuildItem::HasObjectTransform - Checks, if a build item has a non-identity transformation matrix
	* @return returns true, if the transformation matrix is not the identity
	*/
	virtual bool HasObjectTransform () = 0;

	/**
	* IInternalBuildItem::GetObjectTransform - Retrieves a build item's transformation matrix.
	* @return returns the transformation matrix
	*/
	virtual sLib3MFTransform GetObjectTransform () = 0;

	/**
	* IInternalBuildItem::SetObjectTransform - Sets a build item's transformation matrix.
	* @param[in] Transform - new transformation matrix
	*/
	virtual void SetObjectTransform (const sLib3MFTransform Transform) = 0;

	/**
	* IInternalBuildItem::GetPartNumber - Retrieves a build item's part number string
	* @return Returns a build item's part number string
	*/
	virtual std::string GetPartNumber () = 0;

	/**
	* IInternalBuildItem::SetPartNumber - Sets a build item's part number string
	* @param[in] sSetPartnumber - new part number string for referencing parts from the outside world
	*/
	virtual void SetPartNumber (const std::string sSetPartnumber) = 0;

	/**
	* IInternalBuildItem::HasMetaDataGroup - Returns whether the build item has a metadatagroup
	* @return returns whether the build item has a metadatagroup
	*/
	virtual bool HasMetaDataGroup () = 0;

	/**
	* IInternalBuildItem::GetMetaDataGroup - Returns the metadatagroup of this build item
	* @return returns an Instance of the metadatagroup of this build item
	*/
	virtual IInternalLib3MFMetaDataGroup * GetMetaDataGroup () = 0;

	/**
	* IInternalBuildItem::CreateMetaDataGroup - Creates a new metadatagroup for this build item
	* @return returns an Instance of a new metadatagroup for this build item
	*/
	virtual IInternalLib3MFMetaDataGroup * CreateMetaDataGroup () = 0;

	/**
	* IInternalBuildItem::RemoveMetaDataGroup - Removes the build item's metadatagroup
	*/
	virtual void RemoveMetaDataGroup () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFBuildItemIterator 
**************************************************************************************************************************/

class IInternalLib3MFBuildItemIterator : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalBuildItemIterator::MoveNext - Iterates to the next build item in the list.
	* @return Iterates to the next build item in the list.
	*/
	virtual bool MoveNext () = 0;

	/**
	* IInternalBuildItemIterator::MovePrevious - Iterates to the previous build item in the list.
	* @return Iterates to the previous build item in the list.
	*/
	virtual bool MovePrevious () = 0;

	/**
	* IInternalBuildItemIterator::GetCurrent - Returns the build item the iterator points at.
	* @return returns the build item instance.
	*/
	virtual IInternalLib3MFBuildItem * GetCurrent () = 0;

	/**
	* IInternalBuildItemIterator::Clone - Creates a new build item iterator with the same build item list.
	* @return returns the cloned Iterator instance
	*/
	virtual IInternalLib3MFBuildItemIterator * Clone () = 0;

};


/*************************************************************************************************************************
 Class interface for Lib3MFModel 
**************************************************************************************************************************/

class IInternalLib3MFModel : public virtual IInternalLib3MFBaseClass {
public:
	/**
	* IInternalModel::SetUnit - sets the units of a model.
	* @param[in] eUnit - Unit enum value for the model unit
	*/
	virtual void SetUnit (const eLib3MFModelUnit eUnit) = 0;

	/**
	* IInternalModel::GetUnit - returns the units of a model.
	* @return Unit enum value for the model unit
	*/
	virtual eLib3MFModelUnit GetUnit () = 0;

	/**
	* IInternalModel::GetLanguage - retrieves the language of a model
	* @return language identifier
	*/
	virtual std::string GetLanguage () = 0;

	/**
	* IInternalModel::SetLanguage - sets the language of a model
	* @param[in] sLanguage - language identifier
	*/
	virtual void SetLanguage (const std::string sLanguage) = 0;

	/**
	* IInternalModel::QueryWriter - creates a model writer instance for a specific file type
	* @param[in] sWriterClass -  string identifier for the file type
	* @return  string identifier for the file type
	*/
	virtual IInternalLib3MFWriter * QueryWriter (const std::string sWriterClass) = 0;

	/**
	* IInternalModel::QueryReader - creates a model reader instance for a specific file type
	* @param[in] sReaderClass -  string identifier for the file type
	* @return  string identifier for the file type
	*/
	virtual IInternalLib3MFReader * QueryReader (const std::string sReaderClass) = 0;

	/**
	* IInternalModel::GetResourceByID - finds a model resource by its id
	* @param[in] nResourceID - Resource ID
	* @return returns the resource instance
	*/
	virtual IInternalLib3MFResource * GetResourceByID (const unsigned int nResourceID) = 0;

	/**
	* IInternalModel::GetTexture2DByID - finds a model texture by its id
	* @param[in] nResourceID - Resource ID
	* @return returns the texture2d instance
	*/
	virtual IInternalLib3MFTexture2D * GetTexture2DByID (const unsigned int nResourceID) = 0;

	/**
	* IInternalModel::GetBaseMaterialByID - finds a model base material by its id
	* @param[in] nResourceID - Resource ID
	* @return returns the basematerial instance
	*/
	virtual IInternalLib3MFBaseMaterial * GetBaseMaterialByID (const unsigned int nResourceID) = 0;

	/**
	* IInternalModel::GetMeshObjectByID - finds a mesh object by its id
	* @param[in] nResourceID - Resource ID
	* @return returns the mesh object instance
	*/
	virtual IInternalLib3MFMeshObject * GetMeshObjectByID (const unsigned int nResourceID) = 0;

	/**
	* IInternalModel::GetComponentsObjectByID - finds a components object by its id
	* @param[in] nResourceID - Resource ID
	* @return returns the components object instance
	*/
	virtual IInternalLib3MFComponentsObject * GetComponentsObjectByID (const unsigned int nResourceID) = 0;

	/**
	* IInternalModel::GetBuildUUID - returns, whether a build has a UUID and, if true, the build's UUID
	* @param[out] bHasUUID - flag whether the build has a UUID
	* @return the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual std::string GetBuildUUID (bool & bHasUUID) = 0;

	/**
	* IInternalModel::SetBuildUUID - sets the build's UUID
	* @param[in] sUUID - the UUID as string of the form 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx'
	*/
	virtual void SetBuildUUID (const std::string sUUID) = 0;

	/**
	* IInternalModel::GetBuildItems - creates a build item iterator instance with all build items.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFBuildItemIterator * GetBuildItems () = 0;

	/**
	* IInternalModel::GetResources - creates a resource iterator instance with all resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * GetResources () = 0;

	/**
	* IInternalModel::GetObjects - creates a resource iterator instance with all object resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * GetObjects () = 0;

	/**
	* IInternalModel::GetMeshObjects - creates a resource iterator instance with all mesh object resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * GetMeshObjects () = 0;

	/**
	* IInternalModel::GetComponentsObjects - creates a resource iterator instance with all components object resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * GetComponentsObjects () = 0;

	/**
	* IInternalModel::Get2DTextures - creates a resource iterator instance with all texture2d resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * Get2DTextures () = 0;

	/**
	* IInternalModel::GetBaseMaterials - creates a resource iterator instance with all base material resources.
	* @return returns the iterator instance.
	*/
	virtual IInternalLib3MFResourceIterator * GetBaseMaterials () = 0;

	/**
	* IInternalModel::MergeToModel - Merges all components and objects which are referenced by a build item. The memory is duplicated and a new model is created.
	* @return returns the merged model instance
	*/
	virtual IInternalLib3MFModel * MergeToModel () = 0;

	/**
	* IInternalModel::AddMeshObject - adds an empty mesh object to the model.
	* @return  returns the mesh object instance
	*/
	virtual IInternalLib3MFMeshObject * AddMeshObject () = 0;

	/**
	* IInternalModel::AddComponentsObject - adds an empty component object to the model.
	* @return  returns the components object instance
	*/
	virtual IInternalLib3MFComponentsObject * AddComponentsObject () = 0;

	/**
	* IInternalModel::AddTexture2DFromAttachment - adds a texture2d resource to the model. Its path is given by that of an existing attachment.
	* @param[in] pTextureAttachment - attachment containing the image data.
	* @return returns the new texture instance.
	*/
	virtual IInternalLib3MFTexture2D * AddTexture2DFromAttachment (IInternalLib3MFAttachment& pTextureAttachment) = 0;

	/**
	* IInternalModel::AddBaseMaterialGroup - adds an empty basematerials resource to the model.
	* @return returns the new base material instance.
	*/
	virtual IInternalLib3MFBaseMaterial * AddBaseMaterialGroup () = 0;

	/**
	* IInternalModel::AddBuildItem - adds a build item to the model.
	* @param[in] pObject - Object instance.
	* @param[in] Transform - Transformation matrix.
	* @return returns the build item instance.
	*/
	virtual IInternalLib3MFBuildItem * AddBuildItem (IInternalLib3MFObject& pObject, const sLib3MFTransform Transform) = 0;

	/**
	* IInternalModel::RemoveBuildItem - removes a build item from the model
	* @param[in] pBuildItemInstance - Build item to remove.
	*/
	virtual void RemoveBuildItem (IInternalLib3MFBuildItem& pBuildItemInstance) = 0;

	/**
	* IInternalModel::GetMetaDataGroup - Returns the metadatagroup of the model
	* @return returns an Instance of the metadatagroup of the model
	*/
	virtual IInternalLib3MFMetaDataGroup * GetMetaDataGroup () = 0;

	/**
	* IInternalModel::AddAttachment - adds an attachment stream to the model. The OPC part will be related to the model stream with a certain relationship type..
	* @param[in] sURI - Path of the attachment
	* @param[in] sRelationShipType - Relationship type of the attachment
	* @return Instance of the attachment object
	*/
	virtual IInternalLib3MFAttachment * AddAttachment (const std::string sURI, const std::string sRelationShipType) = 0;

	/**
	* IInternalModel::GetAttachment - retrieves an attachment stream object from the model..
	* @param[in] nIndex - Index of the attachment stream
	* @return Instance of the attachment object
	*/
	virtual IInternalLib3MFAttachment * GetAttachment (const unsigned int nIndex) = 0;

	/**
	* IInternalModel::FindAttachment - retrieves an attachment stream object from the model.
	* @param[in] sURI - Path URI in the package
	* @return Instance of the attachment object
	*/
	virtual IInternalLib3MFAttachment * FindAttachment (const std::string sURI) = 0;

	/**
	* IInternalModel::GetAttachmentCount - retrieves the number of attachments of the model.
	* @return Returns the number of attachments.
	*/
	virtual unsigned int GetAttachmentCount () = 0;

	/**
	* IInternalModel::GetAttachmentSize - retrieves the size of an attachment in bytes.
	* @param[in] nIndex - Index of the attachment stream
	* @return  Returns the size of the attachment in bytes.
	*/
	virtual unsigned long long GetAttachmentSize (const unsigned int nIndex) = 0;

	/**
	* IInternalModel::GetAttachmentPath - retrieves the path URI of an attachment.
	* @param[in] nIndex - Index of the attachment stream
	* @return Attachment URI
	*/
	virtual std::string GetAttachmentPath (const unsigned int nIndex) = 0;

	/**
	* IInternalModel::HasPackageThumbnailAttachment - Retrieve whether the OPC package contains a package thumbnail.
	* @return returns whether the OPC package contains a package thumbnail
	*/
	virtual bool HasPackageThumbnailAttachment () = 0;

	/**
	* IInternalModel::CreatePackageThumbnailAttachment - Create a new a package thumbnail for the OPC package.
	* @return Instance of a new thumbnailattachment object.
	*/
	virtual IInternalLib3MFAttachment * CreatePackageThumbnailAttachment () = 0;

	/**
	* IInternalModel::GetPackageThumbnailAttachment - Get the attachment to the OPC package containing the package thumbnail.
	* @return Instance of the thumbnailattachment object.
	*/
	virtual IInternalLib3MFAttachment * GetPackageThumbnailAttachment () = 0;

	/**
	* IInternalModel::RemovePackageThumbnailAttachment - Remove the attachment to the OPC package containing the package thumbnail.
	*/
	virtual void RemovePackageThumbnailAttachment () = 0;

	/**
	* IInternalModel::AddCustomContentType - adds a new Content Type to the model.
	* @param[in] sExtension - File Extension
	* @param[in] sContentType - Content Type Identifier
	*/
	virtual void AddCustomContentType (const std::string sExtension, const std::string sContentType) = 0;

	/**
	* IInternalModel::RemoveCustomContentType - removes a custom Content Type from the model (UTF8 version).
	* @param[in] sExtension - File Extension
	*/
	virtual void RemoveCustomContentType (const std::string sExtension) = 0;

};


/*************************************************************************************************************************
 Global functions declarations
**************************************************************************************************************************/
class CInternalLib3MFWrapper {
public:
	/**
	* IInternallib3mf::GetLibraryVersion - retrieves the current version of the library.
	* @param[out] nMajor - returns the major version of the library
	* @param[out] nMinor - returns the minor version of the library
	* @param[out] nMicro - returns the micro version of the library
	*/
	static void GetLibraryVersion (unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro);

	/**
	* IInternallib3mf::GetSpecificationVersion - retrieves whether a specification is supported, and if so, which version.
	* @param[in] sSpecificationURL - URL of extension to check
	* @param[out] bIsSupported - returns whether this specification is supported
	* @param[out] nMajor - returns the major version of the extension (if IsSupported)
	* @param[out] nMinor - returns the minor version of the extension (if IsSupported)
	* @param[out] nMicro - returns the micro version of the extension (if IsSupported)
	*/
	static void GetSpecificationVersion (const std::string sSpecificationURL, bool & bIsSupported, unsigned int & nMajor, unsigned int & nMinor, unsigned int & nMicro);

	/**
	* IInternallib3mf::CreateModel - creates an empty model instance.
	* @return returns an empty model instance
	*/
	static IInternalLib3MFModel * CreateModel ();

	/**
	* IInternallib3mf::Release - releases an object instance
	* @param[in] pInstance - releases the memory of the passed object.
	*/
	static void Release (IInternalLib3MFBaseClass& pInstance);

	/**
	* IInternallib3mf::SetJournal - Sets the journal file path
	* @param[in] sJournalPath - File name of the journal file
	*/
	static void SetJournal (const std::string sJournalPath);

};

}

#endif // __LIB3MF_CPPINTERFACES
