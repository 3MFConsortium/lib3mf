/*++

Copyright (C) 2018 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Abstract: This is an autogenerated C++ implementation file in order to allow easy
development of the 3MF Library. The functions in this file need to be implemented.
Interface version: 1.2.2

*/

#include "lib3mf.h"
#include "lib3mf_interfaces.hpp"
#include "lib3mf_interfaceexception.hpp"
#include "lib3mf_interfacejournal.hpp"

using namespace Lib3MF;

PLib3MFInterfaceJournal m_GlobalJournal;

extern "C" {


/*************************************************************************************************************************
 Class implementation for Writer
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_writetofileutf8 (Lib3MF_Writer pWriter, const char * pFilename)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pWriter, "Writer", "WriteToFile");
			pJournalEntry->addStringParameter ("Filename", pFilename);
		}

		if (pFilename == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pWriter;
		IInternalLib3MFWriter* pIWriter = dynamic_cast<IInternalLib3MFWriter*>(pIBaseClass);
		if (!pIWriter)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sFilename(pFilename);

		pIWriter->WriteToFile(sFilename);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_getstreamsize (Lib3MF_Writer pWriter, unsigned long long * pStreamSize)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pWriter, "Writer", "GetStreamSize");
		}

		if (!pStreamSize)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pWriter;
		IInternalLib3MFWriter* pIWriter = dynamic_cast<IInternalLib3MFWriter*>(pIBaseClass);
		if (!pIWriter)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned long long nStreamSize;

		pIWriter->GetStreamSize(nStreamSize);

		*pStreamSize = nStreamSize;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt64Result ("StreamSize", *pStreamSize);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_writer_writetobuffer (Lib3MF_Writer pWriter, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pWriter, "Writer", "WriteToBuffer");
		}

		if ((!pBufferBuffer) && !(pBufferNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pWriter;
		IInternalLib3MFWriter* pIWriter = dynamic_cast<IInternalLib3MFWriter*>(pIBaseClass);
		if (!pIWriter)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIWriter->WriteToBuffer(nBufferBufferSize, pBufferNeededCount, pBufferBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Reader
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_readfromfileutf8 (Lib3MF_Reader pReader, const char * pFilename)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "ReadFromFile");
			pJournalEntry->addStringParameter ("Filename", pFilename);
		}

		if (pFilename == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sFilename(pFilename);

		pIReader->ReadFromFile(sFilename);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_readfrombuffer (Lib3MF_Reader pReader, const unsigned int nBufferBufferSize, const unsigned char * pBufferBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "ReadFromBuffer");
		}

		if ( (!pBufferBuffer) && (nBufferBufferSize>0)) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIReader->ReadFromBuffer(nBufferBufferSize, pBufferBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_addrelationtoreadutf8 (Lib3MF_Reader pReader, const char * pRelationShipType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "AddRelationToRead");
			pJournalEntry->addStringParameter ("RelationShipType", pRelationShipType);
		}

		if (pRelationShipType == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sRelationShipType(pRelationShipType);

		pIReader->AddRelationToRead(sRelationShipType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_removerelationtoreadutf8 (Lib3MF_Reader pReader, const char * pRelationShipType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "RemoveRelationToRead");
			pJournalEntry->addStringParameter ("RelationShipType", pRelationShipType);
		}

		if (pRelationShipType == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sRelationShipType(pRelationShipType);

		pIReader->RemoveRelationToRead(sRelationShipType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_setstrictmodeactive (Lib3MF_Reader pReader, bool bStrictModeActive)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "SetStrictModeActive");
			pJournalEntry->addBooleanParameter ("StrictModeActive", bStrictModeActive);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIReader->SetStrictModeActive(bStrictModeActive);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getstrictmodeactive (Lib3MF_Reader pReader, bool * pStrictModeActive)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "GetStrictModeActive");
		}

		if (pStrictModeActive == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pStrictModeActive = pIReader->GetStrictModeActive();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("StrictModeActive", *pStrictModeActive);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getwarningutf8 (Lib3MF_Reader pReader, unsigned int nIndex, unsigned int * pErrorCode, const unsigned int nWarningBufferSize, unsigned int * pWarningNeededChars, char * pWarningBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "GetWarning");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (!pErrorCode)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pWarningBuffer) && !(pWarningNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned int nErrorCode;
		std::string sWarning("");

		sWarning = pIReader->GetWarning(nIndex, nErrorCode);

		*pErrorCode = nErrorCode;
		if (pWarningNeededChars) 
			*pWarningNeededChars = (unsigned int) sWarning.size();
		if (pWarningBuffer) {
			if (sWarning.size() >= nWarningBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iWarning = 0; iWarning < sWarning.size(); iWarning++)
				pWarningBuffer[iWarning] = sWarning[iWarning];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("ErrorCode", *pErrorCode);
			pJournalEntry->addStringResult ("Warning", sWarning.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_reader_getwarningcount (Lib3MF_Reader pReader, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pReader, "Reader", "GetWarningCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pReader;
		IInternalLib3MFReader* pIReader = dynamic_cast<IInternalLib3MFReader*>(pIBaseClass);
		if (!pIReader)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIReader->GetWarningCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Resource
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resource_getresourceid (Lib3MF_Resource pResource, unsigned int * pId)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pResource, "Resource", "GetResourceID");
		}

		if (pId == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pResource;
		IInternalLib3MFResource* pIResource = dynamic_cast<IInternalLib3MFResource*>(pIBaseClass);
		if (!pIResource)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pId = pIResource->GetResourceID();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Id", *pId);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for ResourceIterator
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_movenext (Lib3MF_ResourceIterator pResourceIterator, bool * pHasNext)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pResourceIterator, "ResourceIterator", "MoveNext");
		}

		if (pHasNext == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pResourceIterator;
		IInternalLib3MFResourceIterator* pIResourceIterator = dynamic_cast<IInternalLib3MFResourceIterator*>(pIBaseClass);
		if (!pIResourceIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasNext = pIResourceIterator->MoveNext();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasNext", *pHasNext);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_moveprevious (Lib3MF_ResourceIterator pResourceIterator, bool * pHasPrevious)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pResourceIterator, "ResourceIterator", "MovePrevious");
		}

		if (pHasPrevious == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pResourceIterator;
		IInternalLib3MFResourceIterator* pIResourceIterator = dynamic_cast<IInternalLib3MFResourceIterator*>(pIBaseClass);
		if (!pIResourceIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasPrevious = pIResourceIterator->MovePrevious();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasPrevious", *pHasPrevious);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_getcurrent (Lib3MF_ResourceIterator pResourceIterator, Lib3MF_Resource * pResource)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pResourceIterator, "ResourceIterator", "GetCurrent");
		}

		if (pResource == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pResourceIterator;
		IInternalLib3MFResourceIterator* pIResourceIterator = dynamic_cast<IInternalLib3MFResourceIterator*>(pIBaseClass);
		if (!pIResourceIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResource(nullptr);

		pBaseResource = pIResourceIterator->GetCurrent();

		*pResource = (IInternalLib3MFBaseClass*)(pBaseResource);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Resource", *pResource);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_resourceiterator_clone (Lib3MF_ResourceIterator pResourceIterator, Lib3MF_ResourceIterator * pOutResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pResourceIterator, "ResourceIterator", "Clone");
		}

		if (pOutResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pResourceIterator;
		IInternalLib3MFResourceIterator* pIResourceIterator = dynamic_cast<IInternalLib3MFResourceIterator*>(pIBaseClass);
		if (!pIResourceIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseOutResourceIterator(nullptr);

		pBaseOutResourceIterator = pIResourceIterator->Clone();

		*pOutResourceIterator = (IInternalLib3MFBaseClass*)(pBaseOutResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("OutResourceIterator", *pOutResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for PropertyHandler
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_removeproperty (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "RemoveProperty");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->RemoveProperty(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_removeallproperties (Lib3MF_PropertyHandler pPropertyHandler)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "RemoveAllProperties");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->RemoveAllProperties();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getpropertytype (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, eLib3MFPropertyType * pPropertyType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "GetPropertyType");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pPropertyType == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pPropertyType = pIPropertyHandler->GetPropertyType(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("PropertyType", "PropertyType", *pPropertyType);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getbasematerial (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned int * pMaterialGroupId, unsigned int * pMaterialIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "GetBaseMaterial");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (!pMaterialGroupId)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMaterialIndex)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned int nMaterialGroupId;
		unsigned int nMaterialIndex;

		pIPropertyHandler->GetBaseMaterial(nIndex, nMaterialGroupId, nMaterialIndex);

		*pMaterialGroupId = nMaterialGroupId;
		*pMaterialIndex = nMaterialIndex;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("MaterialGroupId", *pMaterialGroupId);
			pJournalEntry->addUInt32Result ("MaterialIndex", *pMaterialIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setbasematerial (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned int nMaterialGroupId, unsigned int nMaterialIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetBaseMaterial");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
			pJournalEntry->addUInt32Parameter ("MaterialGroupId", nMaterialGroupId);
			pJournalEntry->addUInt32Parameter ("MaterialIndex", nMaterialIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetBaseMaterial(nIndex, nMaterialGroupId, nMaterialIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setbasematerialarray (Lib3MF_PropertyHandler pPropertyHandler, const unsigned int nMaterialGroupIdsBufferSize, const unsigned int * pMaterialGroupIdsBuffer, const unsigned int nMaterialIndicesBufferSize, const unsigned int * pMaterialIndicesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetBaseMaterialArray");
		}

		if ( (!pMaterialGroupIdsBuffer) && (nMaterialGroupIdsBufferSize>0)) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pMaterialIndicesBuffer) && (nMaterialIndicesBufferSize>0)) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetBaseMaterialArray(nMaterialGroupIdsBufferSize, pMaterialGroupIdsBuffer, nMaterialIndicesBufferSize, pMaterialIndicesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_getbasematerialarray (Lib3MF_PropertyHandler pPropertyHandler, const unsigned int nMaterialGroupIdsBufferSize, unsigned int * pMaterialGroupIdsNeededCount, unsigned int * pMaterialGroupIdsBuffer, const unsigned int nMaterialIndicesBufferSize, unsigned int * pMaterialIndicesNeededCount, unsigned int * pMaterialIndicesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "GetBaseMaterialArray");
		}

		if ((!pMaterialGroupIdsBuffer) && !(pMaterialGroupIdsNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ((!pMaterialIndicesBuffer) && !(pMaterialIndicesNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->GetBaseMaterialArray(nMaterialGroupIdsBufferSize, pMaterialGroupIdsNeededCount, pMaterialGroupIdsBuffer, nMaterialIndicesBufferSize, pMaterialIndicesNeededCount, pMaterialIndicesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolor (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, const sLib3MFColorRGBA * pColor)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetSingleColor");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetSingleColor(nIndex, *pColor);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorrgb (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetSingleColorRGB");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetSingleColorRGB(nIndex, nRed, nGreen, nBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorrgba (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetSingleColorRGBA");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
			pJournalEntry->addUInt8Parameter ("Alpha", nAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetSingleColorRGBA(nIndex, nRed, nGreen, nBlue, nAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorfloatrgb (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, float fRed, float fGreen, float fBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetSingleColorFloatRGB");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetSingleColorFloatRGB(nIndex, fRed, fGreen, fBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_propertyhandler_setsinglecolorfloatrgba (Lib3MF_PropertyHandler pPropertyHandler, unsigned int nIndex, float fRed, float fGreen, float fBlue, float fAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pPropertyHandler, "PropertyHandler", "SetSingleColorFloatRGBA");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
			pJournalEntry->addFloatParameter ("Alpha", fAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pPropertyHandler;
		IInternalLib3MFPropertyHandler* pIPropertyHandler = dynamic_cast<IInternalLib3MFPropertyHandler*>(pIBaseClass);
		if (!pIPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIPropertyHandler->SetSingleColorFloatRGBA(nIndex, fRed, fGreen, fBlue, fAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for DefaultPropertyHandler
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_removeproperty (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "RemoveProperty");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->RemoveProperty();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_getpropertytype (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int nIndex, eLib3MFPropertyType * pPropertyType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "GetPropertyType");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pPropertyType == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pPropertyType = pIDefaultPropertyHandler->GetPropertyType(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("PropertyType", "PropertyType", *pPropertyType);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_getbasematerial (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pMaterialGroupId, unsigned int * pMaterialIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "GetBaseMaterial");
		}

		if (!pMaterialGroupId)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMaterialIndex)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned int nMaterialGroupId;
		unsigned int nMaterialIndex;

		pIDefaultPropertyHandler->GetBaseMaterial(nMaterialGroupId, nMaterialIndex);

		*pMaterialGroupId = nMaterialGroupId;
		*pMaterialIndex = nMaterialIndex;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("MaterialGroupId", *pMaterialGroupId);
			pJournalEntry->addUInt32Result ("MaterialIndex", *pMaterialIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setbasematerial (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int nMaterialGroupId, unsigned int nMaterialIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetBaseMaterial");
			pJournalEntry->addUInt32Parameter ("MaterialGroupId", nMaterialGroupId);
			pJournalEntry->addUInt32Parameter ("MaterialIndex", nMaterialIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->SetBaseMaterial(nMaterialGroupId, nMaterialIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setcolorrgb (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned char nRed, unsigned char nGreen, unsigned char nBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetColorRGB");
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->SetColorRGB(nRed, nGreen, nBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setcolorrgba (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetColorRGBA");
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
			pJournalEntry->addUInt8Parameter ("Alpha", nAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->SetColorRGBA(nRed, nGreen, nBlue, nAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setfloatcolorrgb (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, float fRed, float fGreen, float fBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetFloatColorRGB");
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->SetFloatColorRGB(fRed, fGreen, fBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_setfloatcolorrgba (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, float fRed, float fGreen, float fBlue, float fAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetFloatColorRGBA");
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
			pJournalEntry->addFloatParameter ("Alpha", fAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIDefaultPropertyHandler->SetFloatColorRGBA(fRed, fGreen, fBlue, fAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_gettexture (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pTextureID, float * pU, float * pV)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "GetTexture");
		}

		if (!pTextureID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pU)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pV)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned int nTextureID;
		float fU;
		float fV;

		pIDefaultPropertyHandler->GetTexture(nTextureID, fU, fV);

		*pTextureID = nTextureID;
		*pU = fU;
		*pV = fV;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("TextureID", *pTextureID);
			pJournalEntry->addFloatResult ("U", *pU);
			pJournalEntry->addFloatResult ("V", *pV);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_defaultpropertyhandler_settexture (Lib3MF_DefaultPropertyHandler pDefaultPropertyHandler, unsigned int * pTextureID, float * pU, float * pV)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pDefaultPropertyHandler, "DefaultPropertyHandler", "SetTexture");
		}

		if (!pTextureID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pU)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pV)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pDefaultPropertyHandler;
		IInternalLib3MFDefaultPropertyHandler* pIDefaultPropertyHandler = dynamic_cast<IInternalLib3MFDefaultPropertyHandler*>(pIBaseClass);
		if (!pIDefaultPropertyHandler)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned int nTextureID;
		float fU;
		float fV;

		pIDefaultPropertyHandler->SetTexture(nTextureID, fU, fV);

		*pTextureID = nTextureID;
		*pU = fU;
		*pV = fV;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("TextureID", *pTextureID);
			pJournalEntry->addFloatResult ("U", *pU);
			pJournalEntry->addFloatResult ("V", *pV);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for MetaData
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getnamespaceutf8 (Lib3MF_MetaData pMetaData, const unsigned int nNameSpaceBufferSize, unsigned int * pNameSpaceNeededChars, char * pNameSpaceBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "GetNameSpace");
		}

		if ( (!pNameSpaceBuffer) && !(pNameSpaceNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace("");

		sNameSpace = pIMetaData->GetNameSpace();

		if (pNameSpaceNeededChars) 
			*pNameSpaceNeededChars = (unsigned int) sNameSpace.size();
		if (pNameSpaceBuffer) {
			if (sNameSpace.size() >= nNameSpaceBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iNameSpace = 0; iNameSpace < sNameSpace.size(); iNameSpace++)
				pNameSpaceBuffer[iNameSpace] = sNameSpace[iNameSpace];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("NameSpace", sNameSpace.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setnamespaceutf8 (Lib3MF_MetaData pMetaData, const char * pNameSpace)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "SetNameSpace");
			pJournalEntry->addStringParameter ("NameSpace", pNameSpace);
		}

		if (pNameSpace == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace(pNameSpace);

		pIMetaData->SetNameSpace(sNameSpace);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getnameutf8 (Lib3MF_MetaData pMetaData, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "GetName");
		}

		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName("");

		sName = pIMetaData->GetName();

		if (pNameNeededChars) 
			*pNameNeededChars = (unsigned int) sName.size();
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Name", sName.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setnameutf8 (Lib3MF_MetaData pMetaData, const char * pName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "SetName");
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName(pName);

		pIMetaData->SetName(sName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getmustpreserveutf8 (Lib3MF_MetaData pMetaData, bool * pMustPreserve)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "GetMustPreserve");
		}

		if (pMustPreserve == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pMustPreserve = pIMetaData->GetMustPreserve();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("MustPreserve", *pMustPreserve);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setmustpreserveutf8 (Lib3MF_MetaData pMetaData, bool bMustPreserve)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "SetMustPreserve");
			pJournalEntry->addBooleanParameter ("MustPreserve", bMustPreserve);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMetaData->SetMustPreserve(bMustPreserve);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_gettypeutf8 (Lib3MF_MetaData pMetaData, const unsigned int nTypeBufferSize, unsigned int * pTypeNeededChars, char * pTypeBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "GetType");
		}

		if ( (!pTypeBuffer) && !(pTypeNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sType("");

		sType = pIMetaData->GetType();

		if (pTypeNeededChars) 
			*pTypeNeededChars = (unsigned int) sType.size();
		if (pTypeBuffer) {
			if (sType.size() >= nTypeBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iType = 0; iType < sType.size(); iType++)
				pTypeBuffer[iType] = sType[iType];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Type", sType.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_settypeutf8 (Lib3MF_MetaData pMetaData, const char * pType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "SetType");
			pJournalEntry->addStringParameter ("Type", pType);
		}

		if (pType == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sType(pType);

		pIMetaData->SetType(sType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_getvalueutf8 (Lib3MF_MetaData pMetaData, const unsigned int nValueBufferSize, unsigned int * pValueNeededChars, char * pValueBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "GetValue");
		}

		if ( (!pValueBuffer) && !(pValueNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sValue("");

		sValue = pIMetaData->GetValue();

		if (pValueNeededChars) 
			*pValueNeededChars = (unsigned int) sValue.size();
		if (pValueBuffer) {
			if (sValue.size() >= nValueBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iValue = 0; iValue < sValue.size(); iValue++)
				pValueBuffer[iValue] = sValue[iValue];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Value", sValue.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadata_setvalueutf8 (Lib3MF_MetaData pMetaData, const char * pValue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaData, "MetaData", "SetValue");
			pJournalEntry->addStringParameter ("Value", pValue);
		}

		if (pValue == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaData;
		IInternalLib3MFMetaData* pIMetaData = dynamic_cast<IInternalLib3MFMetaData*>(pIBaseClass);
		if (!pIMetaData)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sValue(pValue);

		pIMetaData->SetValue(sValue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for MetaDataGroup
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatacount (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "GetMetaDataCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIMetaDataGroup->GetMetaDataCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatakeyutf8 (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex, const unsigned int nNameSpaceBufferSize, unsigned int * pNameSpaceNeededChars, char * pNameSpaceBuffer, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "GetMetaDataKey");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if ( (!pNameSpaceBuffer) && !(pNameSpaceNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace("");
		std::string sName("");

		pIMetaDataGroup->GetMetaDataKey(nIndex, sNameSpace, sName);

		if (pNameSpaceNeededChars) 
			*pNameSpaceNeededChars = (unsigned int) sNameSpace.size();
		if (pNameSpaceBuffer) {
			if (sNameSpace.size() >= nNameSpaceBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iNameSpace = 0; iNameSpace < sNameSpace.size(); iNameSpace++)
				pNameSpaceBuffer[iNameSpace] = sNameSpace[iNameSpace];
		}
		if (pNameNeededChars) 
			*pNameNeededChars = (unsigned int) sName.size();
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("NameSpace", sNameSpace.c_str());
			pJournalEntry->addStringResult ("Name", sName.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatautf8 (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex, Lib3MF_MetaData * pMetaData)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "GetMetaData");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pMetaData == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaData(nullptr);

		pBaseMetaData = pIMetaDataGroup->GetMetaData(nIndex);

		*pMetaData = (IInternalLib3MFBaseClass*)(pBaseMetaData);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaData", *pMetaData);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_getmetadatabykeyutf8 (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName, Lib3MF_MetaData * pMetaData)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "GetMetaDataByKey");
			pJournalEntry->addStringParameter ("NameSpace", pNameSpace);
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pNameSpace == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pMetaData == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace(pNameSpace);
		std::string sName(pName);
		IInternalLib3MFBaseClass* pBaseMetaData(nullptr);

		pBaseMetaData = pIMetaDataGroup->GetMetaDataByKey(sNameSpace, sName);

		*pMetaData = (IInternalLib3MFBaseClass*)(pBaseMetaData);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaData", *pMetaData);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_removemetadata (Lib3MF_MetaDataGroup pMetaDataGroup, unsigned int nIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "RemoveMetaData");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMetaDataGroup->RemoveMetaData(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_removemetadatabykey (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "RemoveMetaDataByKey");
			pJournalEntry->addStringParameter ("NameSpace", pNameSpace);
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pNameSpace == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace(pNameSpace);
		std::string sName(pName);

		pIMetaDataGroup->RemoveMetaDataByKey(sNameSpace, sName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_metadatagroup_addmetadatautf8 (Lib3MF_MetaDataGroup pMetaDataGroup, const char * pNameSpace, const char * pName, Lib3MF_MetaData * pMetaData)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMetaDataGroup, "MetaDataGroup", "AddMetaData");
			pJournalEntry->addStringParameter ("NameSpace", pNameSpace);
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pNameSpace == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pMetaData == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMetaDataGroup;
		IInternalLib3MFMetaDataGroup* pIMetaDataGroup = dynamic_cast<IInternalLib3MFMetaDataGroup*>(pIBaseClass);
		if (!pIMetaDataGroup)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sNameSpace(pNameSpace);
		std::string sName(pName);
		IInternalLib3MFBaseClass* pBaseMetaData(nullptr);

		pBaseMetaData = pIMetaDataGroup->AddMetaData(sNameSpace, sName);

		*pMetaData = (IInternalLib3MFBaseClass*)(pBaseMetaData);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaData", *pMetaData);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Object
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_gettype (Lib3MF_Object pObject, eLib3MFObjectType * pObjectType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "GetType");
		}

		if (pObjectType == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pObjectType = pIObject->GetType();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("ObjectType", "ObjectType", *pObjectType);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_settype (Lib3MF_Object pObject, eLib3MFObjectType eObjectType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "SetType");
			pJournalEntry->addEnumParameter ("ObjectType", "ObjectType", eObjectType);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIObject->SetType(eObjectType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getnameutf8 (Lib3MF_Object pObject, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "GetName");
		}

		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName("");

		sName = pIObject->GetName();

		if (pNameNeededChars) 
			*pNameNeededChars = (unsigned int) sName.size();
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Name", sName.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_setnameutf8 (Lib3MF_Object pObject, const char * pName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "SetName");
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName(pName);

		pIObject->SetName(sName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getpartnumberutf8 (Lib3MF_Object pObject, const unsigned int nPartNumberBufferSize, unsigned int * pPartNumberNeededChars, char * pPartNumberBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "GetPartNumber");
		}

		if ( (!pPartNumberBuffer) && !(pPartNumberNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPartNumber("");

		sPartNumber = pIObject->GetPartNumber();

		if (pPartNumberNeededChars) 
			*pPartNumberNeededChars = (unsigned int) sPartNumber.size();
		if (pPartNumberBuffer) {
			if (sPartNumber.size() >= nPartNumberBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iPartNumber = 0; iPartNumber < sPartNumber.size(); iPartNumber++)
				pPartNumberBuffer[iPartNumber] = sPartNumber[iPartNumber];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("PartNumber", sPartNumber.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_setpartnumberutf8 (Lib3MF_Object pObject, const char * pPartNumber)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "SetPartNumber");
			pJournalEntry->addStringParameter ("PartNumber", pPartNumber);
		}

		if (pPartNumber == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPartNumber(pPartNumber);

		pIObject->SetPartNumber(sPartNumber);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_ismeshobject (Lib3MF_Object pObject, bool * pIsMeshObject)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "IsMeshObject");
		}

		if (pIsMeshObject == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIsMeshObject = pIObject->IsMeshObject();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("IsMeshObject", *pIsMeshObject);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_iscomponentsobject (Lib3MF_Object pObject, bool * pIsComponentsObject)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "IsComponentsObject");
		}

		if (pIsComponentsObject == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIsComponentsObject = pIObject->IsComponentsObject();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("IsComponentsObject", *pIsComponentsObject);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_isvalid (Lib3MF_Object pObject, bool * pIsValid)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "IsValid");
		}

		if (pIsValid == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIsValid = pIObject->IsValid();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("IsValid", *pIsValid);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_hasmetadatagroup (Lib3MF_Object pObject, bool * pHasMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "HasMetaDataGroup");
		}

		if (pHasMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasMetaDataGroup = pIObject->HasMetaDataGroup();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasMetaDataGroup", *pHasMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_getmetadatagroup (Lib3MF_Object pObject, Lib3MF_MetaDataGroup * pMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "GetMetaDataGroup");
		}

		if (pMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaDataGroup(nullptr);

		pBaseMetaDataGroup = pIObject->GetMetaDataGroup();

		*pMetaDataGroup = (IInternalLib3MFBaseClass*)(pBaseMetaDataGroup);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaDataGroup", *pMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_createmetadatagroup (Lib3MF_Object pObject, Lib3MF_MetaDataGroup * pMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "CreateMetaDataGroup");
		}

		if (pMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaDataGroup(nullptr);

		pBaseMetaDataGroup = pIObject->CreateMetaDataGroup();

		*pMetaDataGroup = (IInternalLib3MFBaseClass*)(pBaseMetaDataGroup);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaDataGroup", *pMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_object_removemetadatagroup (Lib3MF_Object pObject)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pObject, "Object", "RemoveMetaDataGroup");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClass);
		if (!pIObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIObject->RemoveMetaDataGroup();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for MeshObject
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getvertexcount (Lib3MF_MeshObject pMeshObject, unsigned int * pVertexCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetVertexCount");
		}

		if (pVertexCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pVertexCount = pIMeshObject->GetVertexCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("VertexCount", *pVertexCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettrianglecount (Lib3MF_MeshObject pMeshObject, unsigned int * pVertexCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetTriangleCount");
		}

		if (pVertexCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pVertexCount = pIMeshObject->GetTriangleCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("VertexCount", *pVertexCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setvertex (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFPosition * pCoordinates)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetVertex");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetVertex(nIndex, *pCoordinates);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addvertex (Lib3MF_MeshObject pMeshObject, const sLib3MFPosition * pCoordinates, unsigned int * pNewIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "AddVertex");
		}

		if (pNewIndex == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pNewIndex = pIMeshObject->AddVertex(*pCoordinates);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("NewIndex", *pNewIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettriangle (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, sLib3MFTriangle * pIndices)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetTriangle");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pIndices == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIndices = pIMeshObject->GetTriangle(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_settriangle (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFTriangle * pIndices)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetTriangle");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetTriangle(nIndex, *pIndices);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addtriangle (Lib3MF_MeshObject pMeshObject, const sLib3MFTriangle * pIndices, unsigned int * pNewIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "AddTriangle");
		}

		if (pNewIndex == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pNewIndex = pIMeshObject->AddTriangle(*pIndices);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("NewIndex", *pNewIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_gettriangleindices (Lib3MF_MeshObject pMeshObject, const unsigned int nIndicesBufferSize, unsigned int * pIndicesNeededCount, sLib3MFTriangle * pIndicesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetTriangleIndices");
		}

		if ((!pIndicesBuffer) && !(pIndicesNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->GetTriangleIndices(nIndicesBufferSize, pIndicesNeededCount, pIndicesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_settriangleindices (Lib3MF_MeshObject pMeshObject, const unsigned int nIndicesBufferSize, const sLib3MFTriangle * pIndicesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetTriangleIndices");
		}

		if ( (!pIndicesBuffer) && (nIndicesBufferSize>0)) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetTriangleIndices(nIndicesBufferSize, pIndicesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_minlength (Lib3MF_MeshObject pMeshObject, double * pMinLength)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamLattice_MinLength");
		}

		if (pMinLength == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pMinLength = pIMeshObject->GetBeamLattice_MinLength();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("MinLength", *pMinLength);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_minlength (Lib3MF_MeshObject pMeshObject, double dMinLength)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeamLattice_MinLength");
			pJournalEntry->addDoubleParameter ("MinLength", dMinLength);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeamLattice_MinLength(dMinLength);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_radius (Lib3MF_MeshObject pMeshObject, double * pRadius)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamLattice_Radius");
		}

		if (pRadius == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pRadius = pIMeshObject->GetBeamLattice_Radius();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addDoubleResult ("Radius", *pRadius);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_radius (Lib3MF_MeshObject pMeshObject, double dRadius)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeamLattice_Radius");
			pJournalEntry->addDoubleParameter ("Radius", dRadius);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeamLattice_Radius(dRadius);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_capmode (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeCapMode * pCapMode)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamLattice_CapMode");
		}

		if (pCapMode == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCapMode = pIMeshObject->GetBeamLattice_CapMode();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("CapMode", "BeamLatticeCapMode", *pCapMode);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_capmode (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeCapMode eCapMode)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeamLattice_CapMode");
			pJournalEntry->addEnumParameter ("CapMode", "BeamLatticeCapMode", eCapMode);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeamLattice_CapMode(eCapMode);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_clipping (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeClipMode * pClipMode, unsigned int * pResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamLattice_Clipping");
		}

		if (!pClipMode)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pResourceID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		eLib3MFBeamLatticeClipMode eClipMode;
		unsigned int nResourceID;

		pIMeshObject->GetBeamLattice_Clipping(eClipMode, nResourceID);

		*pClipMode = eClipMode;
		*pResourceID = nResourceID;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("ClipMode", "BeamLatticeClipMode", *pClipMode);
			pJournalEntry->addUInt32Result ("ResourceID", *pResourceID);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_clipping (Lib3MF_MeshObject pMeshObject, eLib3MFBeamLatticeClipMode eClipMode, unsigned int nResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeamLattice_Clipping");
			pJournalEntry->addEnumParameter ("ClipMode", "BeamLatticeClipMode", eClipMode);
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeamLattice_Clipping(eClipMode, nResourceID);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamlattice_representation (Lib3MF_MeshObject pMeshObject, bool * pHasRepresentation, unsigned int * pResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamLattice_Representation");
		}

		if (!pHasRepresentation)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pResourceID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		bool bHasRepresentation;
		unsigned int nResourceID;

		pIMeshObject->GetBeamLattice_Representation(bHasRepresentation, nResourceID);

		*pHasRepresentation = bHasRepresentation;
		*pResourceID = nResourceID;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasRepresentation", *pHasRepresentation);
			pJournalEntry->addUInt32Result ("ResourceID", *pResourceID);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeamlattice_representation (Lib3MF_MeshObject pMeshObject, unsigned int nResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeamLattice_Representation");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeamLattice_Representation(nResourceID);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamcount (Lib3MF_MeshObject pMeshObject, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIMeshObject->GetBeamCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addbeam (Lib3MF_MeshObject pMeshObject, const sLib3MFBeam * pBeamInfo, unsigned int * pIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "AddBeam");
		}

		if (pIndex == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIndex = pIMeshObject->AddBeam(*pBeamInfo);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Index", *pIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_setbeam (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, const sLib3MFBeam * pBeamInfo)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "SetBeam");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIMeshObject->SetBeam(nIndex, *pBeamInfo);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamsetcount (Lib3MF_MeshObject pMeshObject, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamSetCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIMeshObject->GetBeamSetCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_addbeamset (Lib3MF_MeshObject pMeshObject, Lib3MF_BeamSet * pBeamSet)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "AddBeamSet");
		}

		if (pBeamSet == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBeamSet(nullptr);

		pBaseBeamSet = pIMeshObject->AddBeamSet();

		*pBeamSet = (IInternalLib3MFBaseClass*)(pBaseBeamSet);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BeamSet", *pBeamSet);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_getbeamset (Lib3MF_MeshObject pMeshObject, unsigned int nIndex, Lib3MF_BeamSet * pBeamSet)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "GetBeamSet");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pBeamSet == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBeamSet(nullptr);

		pBaseBeamSet = pIMeshObject->GetBeamSet(nIndex);

		*pBeamSet = (IInternalLib3MFBaseClass*)(pBaseBeamSet);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BeamSet", *pBeamSet);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_meshobject_ismanifoldandoriented (Lib3MF_MeshObject pMeshObject, bool * pIsManifoldAndOriented)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pMeshObject, "MeshObject", "IsManifoldAndOriented");
		}

		if (pIsManifoldAndOriented == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pMeshObject;
		IInternalLib3MFMeshObject* pIMeshObject = dynamic_cast<IInternalLib3MFMeshObject*>(pIBaseClass);
		if (!pIMeshObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pIsManifoldAndOriented = pIMeshObject->IsManifoldAndOriented();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("IsManifoldAndOriented", *pIsManifoldAndOriented);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Component
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getobjectresource (Lib3MF_Component pComponent, Lib3MF_Object * pObjectResource)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "GetObjectResource");
		}

		if (pObjectResource == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseObjectResource(nullptr);

		pBaseObjectResource = pIComponent->GetObjectResource();

		*pObjectResource = (IInternalLib3MFBaseClass*)(pBaseObjectResource);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ObjectResource", *pObjectResource);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getobjectresourceid (Lib3MF_Component pComponent, unsigned int * pObjectResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "GetObjectResourceID");
		}

		if (pObjectResourceID == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pObjectResourceID = pIComponent->GetObjectResourceID();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("ObjectResourceID", *pObjectResourceID);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_getuuidutf8 (Lib3MF_Component pComponent, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "GetUUID");
		}

		if (!pHasUUID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pUUIDBuffer) && !(pUUIDNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		bool bHasUUID;
		std::string sUUID("");

		sUUID = pIComponent->GetUUID(bHasUUID);

		*pHasUUID = bHasUUID;
		if (pUUIDNeededChars) 
			*pUUIDNeededChars = (unsigned int) sUUID.size();
		if (pUUIDBuffer) {
			if (sUUID.size() >= nUUIDBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iUUID = 0; iUUID < sUUID.size(); iUUID++)
				pUUIDBuffer[iUUID] = sUUID[iUUID];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasUUID", *pHasUUID);
			pJournalEntry->addStringResult ("UUID", sUUID.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_setuuidutf8 (Lib3MF_Component pComponent, const char * pUUID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "SetUUID");
			pJournalEntry->addStringParameter ("UUID", pUUID);
		}

		if (pUUID == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sUUID(pUUID);

		pIComponent->SetUUID(sUUID);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_hastransform (Lib3MF_Component pComponent, bool * pHasTransform)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "HasTransform");
		}

		if (pHasTransform == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasTransform = pIComponent->HasTransform();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasTransform", *pHasTransform);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_component_settransform (Lib3MF_Component pComponent, const sLib3MFTransform * pTransform)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponent, "Component", "SetTransform");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponent;
		IInternalLib3MFComponent* pIComponent = dynamic_cast<IInternalLib3MFComponent*>(pIBaseClass);
		if (!pIComponent)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIComponent->SetTransform(*pTransform);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for ComponentsObject
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_addcomponent (Lib3MF_ComponentsObject pComponentsObject, Lib3MF_Object pObjectResource, const sLib3MFTransform * pTransform, Lib3MF_ComponentsObject * pComponentInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponentsObject, "ComponentsObject", "AddComponent");
			pJournalEntry->addHandleParameter ("ObjectResource", pObjectResource);
		}

		if (pComponentInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponentsObject;
		IInternalLib3MFComponentsObject* pIComponentsObject = dynamic_cast<IInternalLib3MFComponentsObject*>(pIBaseClass);
		if (!pIComponentsObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pIBaseClassObjectResource = (IInternalLib3MFBaseClass *)pObjectResource;
		IInternalLib3MFObject* pIObjectResource = dynamic_cast<IInternalLib3MFObject*>(pIBaseClassObjectResource);
		if (!pIObjectResource)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseComponentInstance(nullptr);

		pBaseComponentInstance = pIComponentsObject->AddComponent(*pIObjectResource, *pTransform);

		*pComponentInstance = (IInternalLib3MFBaseClass*)(pBaseComponentInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ComponentInstance", *pComponentInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_getcomponent (Lib3MF_ComponentsObject pComponentsObject, unsigned int nIndex, Lib3MF_ComponentsObject * pComponentInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponentsObject, "ComponentsObject", "GetComponent");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pComponentInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponentsObject;
		IInternalLib3MFComponentsObject* pIComponentsObject = dynamic_cast<IInternalLib3MFComponentsObject*>(pIBaseClass);
		if (!pIComponentsObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseComponentInstance(nullptr);

		pBaseComponentInstance = pIComponentsObject->GetComponent(nIndex);

		*pComponentInstance = (IInternalLib3MFBaseClass*)(pBaseComponentInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ComponentInstance", *pComponentInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_componentsobject_getcomponentcount (Lib3MF_ComponentsObject pComponentsObject, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pComponentsObject, "ComponentsObject", "GetComponentCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pComponentsObject;
		IInternalLib3MFComponentsObject* pIComponentsObject = dynamic_cast<IInternalLib3MFComponentsObject*>(pIBaseClass);
		if (!pIComponentsObject)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIComponentsObject->GetComponentCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for BeamSet
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setnameutf8 (Lib3MF_BeamSet pBeamSet, const char * pName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "SetName");
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName(pName);

		pIBeamSet->SetName(sName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getnameutf8 (Lib3MF_BeamSet pBeamSet, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "GetName");
		}

		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName("");

		sName = pIBeamSet->GetName();

		if (pNameNeededChars) 
			*pNameNeededChars = (unsigned int) sName.size();
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Name", sName.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setidentifierutf8 (Lib3MF_BeamSet pBeamSet, const char * pIdentifier)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "SetIdentifier");
			pJournalEntry->addStringParameter ("Identifier", pIdentifier);
		}

		if (pIdentifier == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sIdentifier(pIdentifier);

		pIBeamSet->SetIdentifier(sIdentifier);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getidentifierutf8 (Lib3MF_BeamSet pBeamSet, const unsigned int nIdentifierBufferSize, unsigned int * pIdentifierNeededChars, char * pIdentifierBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "GetIdentifier");
		}

		if ( (!pIdentifierBuffer) && !(pIdentifierNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sIdentifier("");

		sIdentifier = pIBeamSet->GetIdentifier();

		if (pIdentifierNeededChars) 
			*pIdentifierNeededChars = (unsigned int) sIdentifier.size();
		if (pIdentifierBuffer) {
			if (sIdentifier.size() >= nIdentifierBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iIdentifier = 0; iIdentifier < sIdentifier.size(); iIdentifier++)
				pIdentifierBuffer[iIdentifier] = sIdentifier[iIdentifier];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Identifier", sIdentifier.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getreferencecount (Lib3MF_BeamSet pBeamSet, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "GetReferenceCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIBeamSet->GetReferenceCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_setreferences (Lib3MF_BeamSet pBeamSet, const unsigned int nReferencesBufferSize, const unsigned int * pReferencesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "SetReferences");
		}

		if ( (!pReferencesBuffer) && (nReferencesBufferSize>0)) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBeamSet->SetReferences(nReferencesBufferSize, pReferencesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_beamset_getreferences (Lib3MF_BeamSet pBeamSet, const unsigned int nReferencesBufferSize, unsigned int * pReferencesNeededCount, unsigned int * pReferencesBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBeamSet, "BeamSet", "GetReferences");
		}

		if ((!pReferencesBuffer) && !(pReferencesNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBeamSet;
		IInternalLib3MFBeamSet* pIBeamSet = dynamic_cast<IInternalLib3MFBeamSet*>(pIBaseClass);
		if (!pIBeamSet)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBeamSet->GetReferences(nReferencesBufferSize, pReferencesNeededCount, pReferencesBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for BaseMaterial
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getcount (Lib3MF_BaseMaterial pBaseMaterial, unsigned int * pCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "GetCount");
		}

		if (pCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pCount = pIBaseMaterial->GetCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Count", *pCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getresourceid (Lib3MF_BaseMaterial pBaseMaterial, unsigned int * pResourceID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "GetResourceID");
		}

		if (pResourceID == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pResourceID = pIBaseMaterial->GetResourceID();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("ResourceID", *pResourceID);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_addmaterialutf8 (Lib3MF_BaseMaterial pBaseMaterial, const char * pName, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned int * pResourceIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "AddMaterial");
			pJournalEntry->addStringParameter ("Name", pName);
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
		}

		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pResourceIndex == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName(pName);

		*pResourceIndex = pIBaseMaterial->AddMaterial(sName, nRed, nGreen, nBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("ResourceIndex", *pResourceIndex);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_removematerial (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "RemoveMaterial");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBaseMaterial->RemoveMaterial(nResourceIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getnameutf8 (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, const unsigned int nNameBufferSize, unsigned int * pNameNeededChars, char * pNameBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "GetName");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
		}

		if ( (!pNameBuffer) && !(pNameNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName("");

		sName = pIBaseMaterial->GetName(nResourceIndex);

		if (pNameNeededChars) 
			*pNameNeededChars = (unsigned int) sName.size();
		if (pNameBuffer) {
			if (sName.size() >= nNameBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iName = 0; iName < sName.size(); iName++)
				pNameBuffer[iName] = sName[iName];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Name", sName.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setnameutf8 (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, const char * pName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "SetName");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
			pJournalEntry->addStringParameter ("Name", pName);
		}

		if (pName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sName(pName);

		pIBaseMaterial->SetName(nResourceIndex, sName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorrgb (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "SetDisplayColorRGB");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBaseMaterial->SetDisplayColorRGB(nResourceIndex, nRed, nGreen, nBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorrgba (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char nRed, unsigned char nGreen, unsigned char nBlue, unsigned char nAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "SetDisplayColorRGBA");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
			pJournalEntry->addUInt8Parameter ("Red", nRed);
			pJournalEntry->addUInt8Parameter ("Green", nGreen);
			pJournalEntry->addUInt8Parameter ("Blue", nBlue);
			pJournalEntry->addUInt8Parameter ("Alpha", nAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBaseMaterial->SetDisplayColorRGBA(nResourceIndex, nRed, nGreen, nBlue, nAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorfloatrgb (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, float fRed, float fGreen, float fBlue)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "SetDisplayColorFloatRGB");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBaseMaterial->SetDisplayColorFloatRGB(nResourceIndex, fRed, fGreen, fBlue);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_setdisplaycolorfloatrgba (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, float fRed, float fGreen, float fBlue, float fAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "SetDisplayColorFloatRGBA");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
			pJournalEntry->addFloatParameter ("Red", fRed);
			pJournalEntry->addFloatParameter ("Green", fGreen);
			pJournalEntry->addFloatParameter ("Blue", fBlue);
			pJournalEntry->addFloatParameter ("Alpha", fAlpha);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBaseMaterial->SetDisplayColorFloatRGBA(nResourceIndex, fRed, fGreen, fBlue, fAlpha);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_basematerial_getdisplaycolor (Lib3MF_BaseMaterial pBaseMaterial, unsigned int nResourceIndex, unsigned char * pRed, unsigned char * pGreen, unsigned char * pBlue, unsigned char * pAlpha)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBaseMaterial, "BaseMaterial", "GetDisplayColor");
			pJournalEntry->addUInt32Parameter ("ResourceIndex", nResourceIndex);
		}

		if (!pRed)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pGreen)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pBlue)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pAlpha)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBaseMaterial;
		IInternalLib3MFBaseMaterial* pIBaseMaterial = dynamic_cast<IInternalLib3MFBaseMaterial*>(pIBaseClass);
		if (!pIBaseMaterial)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		unsigned char nRed;
		unsigned char nGreen;
		unsigned char nBlue;
		unsigned char nAlpha;

		pIBaseMaterial->GetDisplayColor(nResourceIndex, nRed, nGreen, nBlue, nAlpha);

		*pRed = nRed;
		*pGreen = nGreen;
		*pBlue = nBlue;
		*pAlpha = nAlpha;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt8Result ("Red", *pRed);
			pJournalEntry->addUInt8Result ("Green", *pGreen);
			pJournalEntry->addUInt8Result ("Blue", *pBlue);
			pJournalEntry->addUInt8Result ("Alpha", *pAlpha);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Attachment
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getpathutf8 (Lib3MF_Attachment pAttachment, const unsigned int nPathBufferSize, unsigned int * pPathNeededChars, char * pPathBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "GetPath");
		}

		if ( (!pPathBuffer) && !(pPathNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPath("");

		sPath = pIAttachment->GetPath();

		if (pPathNeededChars) 
			*pPathNeededChars = (unsigned int) sPath.size();
		if (pPathBuffer) {
			if (sPath.size() >= nPathBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iPath = 0; iPath < sPath.size(); iPath++)
				pPathBuffer[iPath] = sPath[iPath];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Path", sPath.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_setpathutf8 (Lib3MF_Attachment pAttachment, const char * pPath)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "SetPath");
			pJournalEntry->addStringParameter ("Path", pPath);
		}

		if (pPath == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPath(pPath);

		pIAttachment->SetPath(sPath);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getrelationshiptypeutf8 (Lib3MF_Attachment pAttachment, const unsigned int nPathBufferSize, unsigned int * pPathNeededChars, char * pPathBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "GetRelationShipType");
		}

		if ( (!pPathBuffer) && !(pPathNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPath("");

		sPath = pIAttachment->GetRelationShipType();

		if (pPathNeededChars) 
			*pPathNeededChars = (unsigned int) sPath.size();
		if (pPathBuffer) {
			if (sPath.size() >= nPathBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iPath = 0; iPath < sPath.size(); iPath++)
				pPathBuffer[iPath] = sPath[iPath];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Path", sPath.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_setrelationshiptypeutf8 (Lib3MF_Attachment pAttachment, const char * pPath)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "SetRelationShipType");
			pJournalEntry->addStringParameter ("Path", pPath);
		}

		if (pPath == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPath(pPath);

		pIAttachment->SetRelationShipType(sPath);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_writetofileutf8 (Lib3MF_Attachment pAttachment, const char * pFileName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "WriteToFile");
			pJournalEntry->addStringParameter ("FileName", pFileName);
		}

		if (pFileName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sFileName(pFileName);

		pIAttachment->WriteToFile(sFileName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_readfromfileutf8 (Lib3MF_Attachment pAttachment, const char * pFileName)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "ReadFromFile");
			pJournalEntry->addStringParameter ("FileName", pFileName);
		}

		if (pFileName == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sFileName(pFileName);

		pIAttachment->ReadFromFile(sFileName);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_getstreamsize (Lib3MF_Attachment pAttachment, unsigned long long * pStreamSize)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "GetStreamSize");
		}

		if (pStreamSize == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pStreamSize = pIAttachment->GetStreamSize();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt64Result ("StreamSize", *pStreamSize);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_writetobuffer (Lib3MF_Attachment pAttachment, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "WriteToBuffer");
		}

		if ((!pBufferBuffer) && !(pBufferNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIAttachment->WriteToBuffer(nBufferBufferSize, pBufferNeededCount, pBufferBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_attachment_readfrombuffer (Lib3MF_Attachment pAttachment, const unsigned int nBufferBufferSize, unsigned int * pBufferNeededCount, unsigned char * pBufferBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pAttachment, "Attachment", "ReadFromBuffer");
		}

		if ((!pBufferBuffer) && !(pBufferNeededCount))
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClass);
		if (!pIAttachment)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIAttachment->ReadFromBuffer(nBufferBufferSize, pBufferNeededCount, pBufferBuffer);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Texture2D
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getattachment (Lib3MF_Texture2D pTexture2D, Lib3MF_Attachment * pAttachment)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "GetAttachment");
		}

		if (pAttachment == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseAttachment(nullptr);

		pBaseAttachment = pITexture2D->GetAttachment();

		*pAttachment = (IInternalLib3MFBaseClass*)(pBaseAttachment);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Attachment", *pAttachment);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setattachment (Lib3MF_Texture2D pTexture2D, Lib3MF_Attachment pAttachment)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "SetAttachment");
			pJournalEntry->addHandleParameter ("Attachment", pAttachment);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pIBaseClassAttachment = (IInternalLib3MFBaseClass *)pAttachment;
		IInternalLib3MFAttachment* pIAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClassAttachment);
		if (!pIAttachment)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);


		pITexture2D->SetAttachment(*pIAttachment);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getcontenttype (Lib3MF_Texture2D pTexture2D, eLib3MFTextureType * pContentType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "GetContentType");
		}

		if (pContentType == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pContentType = pITexture2D->GetContentType();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("ContentType", "TextureType", *pContentType);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setcontenttype (Lib3MF_Texture2D pTexture2D, eLib3MFTextureType eContentType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "SetContentType");
			pJournalEntry->addEnumParameter ("ContentType", "TextureType", eContentType);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pITexture2D->SetContentType(eContentType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_gettilestyleuv (Lib3MF_Texture2D pTexture2D, eLib3MFTextureTileStyle * pTileStyleU, eLib3MFTextureTileStyle * pTileStyleV)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "GetTileStyleUV");
		}

		if (!pTileStyleU)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pTileStyleV)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		eLib3MFTextureTileStyle eTileStyleU;
		eLib3MFTextureTileStyle eTileStyleV;

		pITexture2D->GetTileStyleUV(eTileStyleU, eTileStyleV);

		*pTileStyleU = eTileStyleU;
		*pTileStyleV = eTileStyleV;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("TileStyleU", "TextureTileStyle", *pTileStyleU);
			pJournalEntry->addEnumResult ("TileStyleV", "TextureTileStyle", *pTileStyleV);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_settilestyleuv (Lib3MF_Texture2D pTexture2D, eLib3MFTextureTileStyle eTileStyleU, eLib3MFTextureTileStyle eTileStyleV)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "SetTileStyleUV");
			pJournalEntry->addEnumParameter ("TileStyleU", "TextureTileStyle", eTileStyleU);
			pJournalEntry->addEnumParameter ("TileStyleV", "TextureTileStyle", eTileStyleV);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pITexture2D->SetTileStyleUV(eTileStyleU, eTileStyleV);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_getfilter (Lib3MF_Texture2D pTexture2D, eLib3MFTextureFilter * pFilter)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "GetFilter");
		}

		if (pFilter == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pFilter = pITexture2D->GetFilter();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("Filter", "TextureFilter", *pFilter);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_texture2d_setfilter (Lib3MF_Texture2D pTexture2D, eLib3MFTextureFilter eFilter)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pTexture2D, "Texture2D", "SetFilter");
			pJournalEntry->addEnumParameter ("Filter", "TextureFilter", eFilter);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pTexture2D;
		IInternalLib3MFTexture2D* pITexture2D = dynamic_cast<IInternalLib3MFTexture2D*>(pIBaseClass);
		if (!pITexture2D)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pITexture2D->SetFilter(eFilter);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for BuildItem
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjectresource (Lib3MF_BuildItem pBuildItem, Lib3MF_Resource * pObjectResource)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetObjectResource");
		}

		if (pObjectResource == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseObjectResource(nullptr);

		pBaseObjectResource = pIBuildItem->GetObjectResource();

		*pObjectResource = (IInternalLib3MFBaseClass*)(pBaseObjectResource);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ObjectResource", *pObjectResource);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getuuidutf8 (Lib3MF_BuildItem pBuildItem, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetUUID");
		}

		if (!pHasUUID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pUUIDBuffer) && !(pUUIDNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		bool bHasUUID;
		std::string sUUID("");

		sUUID = pIBuildItem->GetUUID(bHasUUID);

		*pHasUUID = bHasUUID;
		if (pUUIDNeededChars) 
			*pUUIDNeededChars = (unsigned int) sUUID.size();
		if (pUUIDBuffer) {
			if (sUUID.size() >= nUUIDBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iUUID = 0; iUUID < sUUID.size(); iUUID++)
				pUUIDBuffer[iUUID] = sUUID[iUUID];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasUUID", *pHasUUID);
			pJournalEntry->addStringResult ("UUID", sUUID.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setuuidutf8 (Lib3MF_BuildItem pBuildItem, const char * pUUID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "SetUUID");
			pJournalEntry->addStringParameter ("UUID", pUUID);
		}

		if (pUUID == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sUUID(pUUID);

		pIBuildItem->SetUUID(sUUID);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjectresourceid (Lib3MF_BuildItem pBuildItem, unsigned int * pId)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetObjectResourceID");
		}

		if (pId == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pId = pIBuildItem->GetObjectResourceID();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Id", *pId);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_hasobjecttransform (Lib3MF_BuildItem pBuildItem, bool * pHasTransform)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "HasObjectTransform");
		}

		if (pHasTransform == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasTransform = pIBuildItem->HasObjectTransform();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasTransform", *pHasTransform);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getobjecttransform (Lib3MF_BuildItem pBuildItem, sLib3MFTransform * pTransform)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetObjectTransform");
		}

		if (pTransform == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pTransform = pIBuildItem->GetObjectTransform();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setobjecttransform (Lib3MF_BuildItem pBuildItem, const sLib3MFTransform * pTransform)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "SetObjectTransform");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBuildItem->SetObjectTransform(*pTransform);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getpartnumberutf8 (Lib3MF_BuildItem pBuildItem, const unsigned int nPartNumberBufferSize, unsigned int * pPartNumberNeededChars, char * pPartNumberBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetPartNumber");
		}

		if ( (!pPartNumberBuffer) && !(pPartNumberNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sPartNumber("");

		sPartNumber = pIBuildItem->GetPartNumber();

		if (pPartNumberNeededChars) 
			*pPartNumberNeededChars = (unsigned int) sPartNumber.size();
		if (pPartNumberBuffer) {
			if (sPartNumber.size() >= nPartNumberBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iPartNumber = 0; iPartNumber < sPartNumber.size(); iPartNumber++)
				pPartNumberBuffer[iPartNumber] = sPartNumber[iPartNumber];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("PartNumber", sPartNumber.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_setpartnumberutf8 (Lib3MF_BuildItem pBuildItem, const char * pSetPartnumber)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "SetPartNumber");
			pJournalEntry->addStringParameter ("SetPartnumber", pSetPartnumber);
		}

		if (pSetPartnumber == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sSetPartnumber(pSetPartnumber);

		pIBuildItem->SetPartNumber(sSetPartnumber);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_hasmetadatagroup (Lib3MF_BuildItem pBuildItem, bool * pHasMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "HasMetaDataGroup");
		}

		if (pHasMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasMetaDataGroup = pIBuildItem->HasMetaDataGroup();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasMetaDataGroup", *pHasMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_getmetadatagroup (Lib3MF_BuildItem pBuildItem, Lib3MF_MetaDataGroup * pMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "GetMetaDataGroup");
		}

		if (pMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaDataGroup(nullptr);

		pBaseMetaDataGroup = pIBuildItem->GetMetaDataGroup();

		*pMetaDataGroup = (IInternalLib3MFBaseClass*)(pBaseMetaDataGroup);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaDataGroup", *pMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_createmetadatagroup (Lib3MF_BuildItem pBuildItem, Lib3MF_MetaDataGroup * pMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "CreateMetaDataGroup");
		}

		if (pMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaDataGroup(nullptr);

		pBaseMetaDataGroup = pIBuildItem->CreateMetaDataGroup();

		*pMetaDataGroup = (IInternalLib3MFBaseClass*)(pBaseMetaDataGroup);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaDataGroup", *pMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditem_removemetadatagroup (Lib3MF_BuildItem pBuildItem)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItem, "BuildItem", "RemoveMetaDataGroup");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItem;
		IInternalLib3MFBuildItem* pIBuildItem = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClass);
		if (!pIBuildItem)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIBuildItem->RemoveMetaDataGroup();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for BuildItemIterator
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_movenext (Lib3MF_BuildItemIterator pBuildItemIterator, bool * pHasNext)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItemIterator, "BuildItemIterator", "MoveNext");
		}

		if (pHasNext == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItemIterator;
		IInternalLib3MFBuildItemIterator* pIBuildItemIterator = dynamic_cast<IInternalLib3MFBuildItemIterator*>(pIBaseClass);
		if (!pIBuildItemIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasNext = pIBuildItemIterator->MoveNext();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasNext", *pHasNext);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_moveprevious (Lib3MF_BuildItemIterator pBuildItemIterator, bool * pHasPrevious)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItemIterator, "BuildItemIterator", "MovePrevious");
		}

		if (pHasPrevious == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItemIterator;
		IInternalLib3MFBuildItemIterator* pIBuildItemIterator = dynamic_cast<IInternalLib3MFBuildItemIterator*>(pIBaseClass);
		if (!pIBuildItemIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasPrevious = pIBuildItemIterator->MovePrevious();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasPrevious", *pHasPrevious);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_getcurrent (Lib3MF_BuildItemIterator pBuildItemIterator, Lib3MF_BuildItem * pBuildItem)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItemIterator, "BuildItemIterator", "GetCurrent");
		}

		if (pBuildItem == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItemIterator;
		IInternalLib3MFBuildItemIterator* pIBuildItemIterator = dynamic_cast<IInternalLib3MFBuildItemIterator*>(pIBaseClass);
		if (!pIBuildItemIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBuildItem(nullptr);

		pBaseBuildItem = pIBuildItemIterator->GetCurrent();

		*pBuildItem = (IInternalLib3MFBaseClass*)(pBaseBuildItem);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BuildItem", *pBuildItem);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_builditemiterator_clone (Lib3MF_BuildItemIterator pBuildItemIterator, Lib3MF_BuildItemIterator * pOutBuildItemIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pBuildItemIterator, "BuildItemIterator", "Clone");
		}

		if (pOutBuildItemIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pBuildItemIterator;
		IInternalLib3MFBuildItemIterator* pIBuildItemIterator = dynamic_cast<IInternalLib3MFBuildItemIterator*>(pIBaseClass);
		if (!pIBuildItemIterator)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseOutBuildItemIterator(nullptr);

		pBaseOutBuildItemIterator = pIBuildItemIterator->Clone();

		*pOutBuildItemIterator = (IInternalLib3MFBaseClass*)(pBaseOutBuildItemIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("OutBuildItemIterator", *pOutBuildItemIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Class implementation for Model
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setunit (Lib3MF_Model pModel, eLib3MFModelUnit eUnit)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "SetUnit");
			pJournalEntry->addEnumParameter ("Unit", "ModelUnit", eUnit);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIModel->SetUnit(eUnit);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getunit (Lib3MF_Model pModel, eLib3MFModelUnit * pUnit)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetUnit");
		}

		if (pUnit == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pUnit = pIModel->GetUnit();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addEnumResult ("Unit", "ModelUnit", *pUnit);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getlanguageutf8 (Lib3MF_Model pModel, const unsigned int nLanguageBufferSize, unsigned int * pLanguageNeededChars, char * pLanguageBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetLanguage");
		}

		if ( (!pLanguageBuffer) && !(pLanguageNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sLanguage("");

		sLanguage = pIModel->GetLanguage();

		if (pLanguageNeededChars) 
			*pLanguageNeededChars = (unsigned int) sLanguage.size();
		if (pLanguageBuffer) {
			if (sLanguage.size() >= nLanguageBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iLanguage = 0; iLanguage < sLanguage.size(); iLanguage++)
				pLanguageBuffer[iLanguage] = sLanguage[iLanguage];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("Language", sLanguage.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setlanguageutf8 (Lib3MF_Model pModel, const char * pLanguage)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "SetLanguage");
			pJournalEntry->addStringParameter ("Language", pLanguage);
		}

		if (pLanguage == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sLanguage(pLanguage);

		pIModel->SetLanguage(sLanguage);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_querywriter (Lib3MF_Model pModel, const char * pWriterClass, Lib3MF_Writer * pWriterInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "QueryWriter");
			pJournalEntry->addStringParameter ("WriterClass", pWriterClass);
		}

		if (pWriterClass == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pWriterInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sWriterClass(pWriterClass);
		IInternalLib3MFBaseClass* pBaseWriterInstance(nullptr);

		pBaseWriterInstance = pIModel->QueryWriter(sWriterClass);

		*pWriterInstance = (IInternalLib3MFBaseClass*)(pBaseWriterInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("WriterInstance", *pWriterInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_queryreader (Lib3MF_Model pModel, const char * pReaderClass, Lib3MF_Reader * pReaderInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "QueryReader");
			pJournalEntry->addStringParameter ("ReaderClass", pReaderClass);
		}

		if (pReaderClass == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pReaderInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sReaderClass(pReaderClass);
		IInternalLib3MFBaseClass* pBaseReaderInstance(nullptr);

		pBaseReaderInstance = pIModel->QueryReader(sReaderClass);

		*pReaderInstance = (IInternalLib3MFBaseClass*)(pBaseReaderInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ReaderInstance", *pReaderInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getresourcebyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_Resource * pResourceInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetResourceByID");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}

		if (pResourceInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceInstance(nullptr);

		pBaseResourceInstance = pIModel->GetResourceByID(nResourceID);

		*pResourceInstance = (IInternalLib3MFBaseClass*)(pBaseResourceInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceInstance", *pResourceInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_gettexture2dbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_Texture2D * pTextureInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetTexture2DByID");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}

		if (pTextureInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseTextureInstance(nullptr);

		pBaseTextureInstance = pIModel->GetTexture2DByID(nResourceID);

		*pTextureInstance = (IInternalLib3MFBaseClass*)(pBaseTextureInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("TextureInstance", *pTextureInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbasematerialbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_BaseMaterial * pBaseMaterialInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetBaseMaterialByID");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}

		if (pBaseMaterialInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBaseMaterialInstance(nullptr);

		pBaseBaseMaterialInstance = pIModel->GetBaseMaterialByID(nResourceID);

		*pBaseMaterialInstance = (IInternalLib3MFBaseClass*)(pBaseBaseMaterialInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BaseMaterialInstance", *pBaseMaterialInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmeshobjectbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_MeshObject * pMeshObjectInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetMeshObjectByID");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}

		if (pMeshObjectInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMeshObjectInstance(nullptr);

		pBaseMeshObjectInstance = pIModel->GetMeshObjectByID(nResourceID);

		*pMeshObjectInstance = (IInternalLib3MFBaseClass*)(pBaseMeshObjectInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MeshObjectInstance", *pMeshObjectInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getcomponentsobjectbyid (Lib3MF_Model pModel, unsigned int nResourceID, Lib3MF_ComponentsObject * pComponentsObjectInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetComponentsObjectByID");
			pJournalEntry->addUInt32Parameter ("ResourceID", nResourceID);
		}

		if (pComponentsObjectInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseComponentsObjectInstance(nullptr);

		pBaseComponentsObjectInstance = pIModel->GetComponentsObjectByID(nResourceID);

		*pComponentsObjectInstance = (IInternalLib3MFBaseClass*)(pBaseComponentsObjectInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ComponentsObjectInstance", *pComponentsObjectInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbuilduuidutf8 (Lib3MF_Model pModel, bool * pHasUUID, const unsigned int nUUIDBufferSize, unsigned int * pUUIDNeededChars, char * pUUIDBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetBuildUUID");
		}

		if (!pHasUUID)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if ( (!pUUIDBuffer) && !(pUUIDNeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		bool bHasUUID;
		std::string sUUID("");

		sUUID = pIModel->GetBuildUUID(bHasUUID);

		*pHasUUID = bHasUUID;
		if (pUUIDNeededChars) 
			*pUUIDNeededChars = (unsigned int) sUUID.size();
		if (pUUIDBuffer) {
			if (sUUID.size() >= nUUIDBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iUUID = 0; iUUID < sUUID.size(); iUUID++)
				pUUIDBuffer[iUUID] = sUUID[iUUID];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasUUID", *pHasUUID);
			pJournalEntry->addStringResult ("UUID", sUUID.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_setbuilduuidutf8 (Lib3MF_Model pModel, const char * pUUID)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "SetBuildUUID");
			pJournalEntry->addStringParameter ("UUID", pUUID);
		}

		if (pUUID == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sUUID(pUUID);

		pIModel->SetBuildUUID(sUUID);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbuilditems (Lib3MF_Model pModel, Lib3MF_BuildItemIterator * pBuildItemIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetBuildItems");
		}

		if (pBuildItemIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBuildItemIterator(nullptr);

		pBaseBuildItemIterator = pIModel->GetBuildItems();

		*pBuildItemIterator = (IInternalLib3MFBaseClass*)(pBaseBuildItemIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BuildItemIterator", *pBuildItemIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getresources (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetResources");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->GetResources();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetObjects");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->GetObjects();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmeshobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetMeshObjects");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->GetMeshObjects();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getcomponentsobjects (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetComponentsObjects");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->GetComponentsObjects();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_get2dtextures (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "Get2DTextures");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->Get2DTextures();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getbasematerials (Lib3MF_Model pModel, Lib3MF_ResourceIterator * pResourceIterator)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetBaseMaterials");
		}

		if (pResourceIterator == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseResourceIterator(nullptr);

		pBaseResourceIterator = pIModel->GetBaseMaterials();

		*pResourceIterator = (IInternalLib3MFBaseClass*)(pBaseResourceIterator);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ResourceIterator", *pResourceIterator);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_mergetomodel (Lib3MF_Model pModel, Lib3MF_Model * pMergedModelInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "MergeToModel");
		}

		if (pMergedModelInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMergedModelInstance(nullptr);

		pBaseMergedModelInstance = pIModel->MergeToModel();

		*pMergedModelInstance = (IInternalLib3MFBaseClass*)(pBaseMergedModelInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MergedModelInstance", *pMergedModelInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addmeshobject (Lib3MF_Model pModel, Lib3MF_MeshObject * pMeshObjectInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddMeshObject");
		}

		if (pMeshObjectInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMeshObjectInstance(nullptr);

		pBaseMeshObjectInstance = pIModel->AddMeshObject();

		*pMeshObjectInstance = (IInternalLib3MFBaseClass*)(pBaseMeshObjectInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MeshObjectInstance", *pMeshObjectInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addcomponentsobject (Lib3MF_Model pModel, Lib3MF_ComponentsObject * pComponentsObjectInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddComponentsObject");
		}

		if (pComponentsObjectInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseComponentsObjectInstance(nullptr);

		pBaseComponentsObjectInstance = pIModel->AddComponentsObject();

		*pComponentsObjectInstance = (IInternalLib3MFBaseClass*)(pBaseComponentsObjectInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("ComponentsObjectInstance", *pComponentsObjectInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addtexture2dfromattachment (Lib3MF_Model pModel, Lib3MF_Attachment pTextureAttachment, Lib3MF_Texture2D * pTexture2DInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddTexture2DFromAttachment");
			pJournalEntry->addHandleParameter ("TextureAttachment", pTextureAttachment);
		}

		if (pTexture2DInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pIBaseClassTextureAttachment = (IInternalLib3MFBaseClass *)pTextureAttachment;
		IInternalLib3MFAttachment* pITextureAttachment = dynamic_cast<IInternalLib3MFAttachment*>(pIBaseClassTextureAttachment);
		if (!pITextureAttachment)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseTexture2DInstance(nullptr);

		pBaseTexture2DInstance = pIModel->AddTexture2DFromAttachment(*pITextureAttachment);

		*pTexture2DInstance = (IInternalLib3MFBaseClass*)(pBaseTexture2DInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Texture2DInstance", *pTexture2DInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addbasematerialgroup (Lib3MF_Model pModel, Lib3MF_BaseMaterial * pBaseMaterialGroupInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddBaseMaterialGroup");
		}

		if (pBaseMaterialGroupInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBaseMaterialGroupInstance(nullptr);

		pBaseBaseMaterialGroupInstance = pIModel->AddBaseMaterialGroup();

		*pBaseMaterialGroupInstance = (IInternalLib3MFBaseClass*)(pBaseBaseMaterialGroupInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BaseMaterialGroupInstance", *pBaseMaterialGroupInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addbuilditem (Lib3MF_Model pModel, Lib3MF_Object pObject, const sLib3MFTransform * pTransform, Lib3MF_BuildItem * pBuildItemInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddBuildItem");
			pJournalEntry->addHandleParameter ("Object", pObject);
		}

		if (pBuildItemInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pIBaseClassObject = (IInternalLib3MFBaseClass *)pObject;
		IInternalLib3MFObject* pIObject = dynamic_cast<IInternalLib3MFObject*>(pIBaseClassObject);
		if (!pIObject)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseBuildItemInstance(nullptr);

		pBaseBuildItemInstance = pIModel->AddBuildItem(*pIObject, *pTransform);

		*pBuildItemInstance = (IInternalLib3MFBaseClass*)(pBaseBuildItemInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("BuildItemInstance", *pBuildItemInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removebuilditem (Lib3MF_Model pModel, Lib3MF_BuildItem pBuildItemInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "RemoveBuildItem");
			pJournalEntry->addHandleParameter ("BuildItemInstance", pBuildItemInstance);
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pIBaseClassBuildItemInstance = (IInternalLib3MFBaseClass *)pBuildItemInstance;
		IInternalLib3MFBuildItem* pIBuildItemInstance = dynamic_cast<IInternalLib3MFBuildItem*>(pIBaseClassBuildItemInstance);
		if (!pIBuildItemInstance)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);


		pIModel->RemoveBuildItem(*pIBuildItemInstance);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getmetadatagroup (Lib3MF_Model pModel, Lib3MF_MetaDataGroup * pMetaDataGroup)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetMetaDataGroup");
		}

		if (pMetaDataGroup == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseMetaDataGroup(nullptr);

		pBaseMetaDataGroup = pIModel->GetMetaDataGroup();

		*pMetaDataGroup = (IInternalLib3MFBaseClass*)(pBaseMetaDataGroup);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("MetaDataGroup", *pMetaDataGroup);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addattachmentutf8 (Lib3MF_Model pModel, const char * pURI, const char * pRelationShipType, Lib3MF_Attachment * pAttachmentInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddAttachment");
			pJournalEntry->addStringParameter ("URI", pURI);
			pJournalEntry->addStringParameter ("RelationShipType", pRelationShipType);
		}

		if (pURI == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pRelationShipType == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pAttachmentInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sURI(pURI);
		std::string sRelationShipType(pRelationShipType);
		IInternalLib3MFBaseClass* pBaseAttachmentInstance(nullptr);

		pBaseAttachmentInstance = pIModel->AddAttachment(sURI, sRelationShipType);

		*pAttachmentInstance = (IInternalLib3MFBaseClass*)(pBaseAttachmentInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("AttachmentInstance", *pAttachmentInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachment (Lib3MF_Model pModel, unsigned int nIndex, Lib3MF_Attachment * pAttachmentInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetAttachment");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pAttachmentInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseAttachmentInstance(nullptr);

		pBaseAttachmentInstance = pIModel->GetAttachment(nIndex);

		*pAttachmentInstance = (IInternalLib3MFBaseClass*)(pBaseAttachmentInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("AttachmentInstance", *pAttachmentInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_findattachmentutf8 (Lib3MF_Model pModel, const char * pURI, Lib3MF_Attachment * pAttachmentInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "FindAttachment");
			pJournalEntry->addStringParameter ("URI", pURI);
		}

		if (pURI == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pAttachmentInstance == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sURI(pURI);
		IInternalLib3MFBaseClass* pBaseAttachmentInstance(nullptr);

		pBaseAttachmentInstance = pIModel->FindAttachment(sURI);

		*pAttachmentInstance = (IInternalLib3MFBaseClass*)(pBaseAttachmentInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("AttachmentInstance", *pAttachmentInstance);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentcount (Lib3MF_Model pModel, unsigned int * pAttachmentCount)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetAttachmentCount");
		}

		if (pAttachmentCount == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pAttachmentCount = pIModel->GetAttachmentCount();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("AttachmentCount", *pAttachmentCount);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentsize (Lib3MF_Model pModel, unsigned int nIndex, unsigned long long * pAttachmentSize)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetAttachmentSize");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if (pAttachmentSize == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pAttachmentSize = pIModel->GetAttachmentSize(nIndex);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt64Result ("AttachmentSize", *pAttachmentSize);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getattachmentpathutf8 (Lib3MF_Model pModel, unsigned int nIndex, const unsigned int nAttachmentURIBufferSize, unsigned int * pAttachmentURINeededChars, char * pAttachmentURIBuffer)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetAttachmentPath");
			pJournalEntry->addUInt32Parameter ("Index", nIndex);
		}

		if ( (!pAttachmentURIBuffer) && !(pAttachmentURINeededChars) )
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sAttachmentURI("");

		sAttachmentURI = pIModel->GetAttachmentPath(nIndex);

		if (pAttachmentURINeededChars) 
			*pAttachmentURINeededChars = (unsigned int) sAttachmentURI.size();
		if (pAttachmentURIBuffer) {
			if (sAttachmentURI.size() >= nAttachmentURIBufferSize)
				throw ELib3MFInterfaceException (LIB3MF_ERROR_BUFFERTOOSMALL);
			for (int iAttachmentURI = 0; iAttachmentURI < sAttachmentURI.size(); iAttachmentURI++)
				pAttachmentURIBuffer[iAttachmentURI] = sAttachmentURI[iAttachmentURI];
		}

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addStringResult ("AttachmentURI", sAttachmentURI.c_str());
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_haspackagethumbnailattachment (Lib3MF_Model pModel, bool * pHasThumbnail)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "HasPackageThumbnailAttachment");
		}

		if (pHasThumbnail == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		*pHasThumbnail = pIModel->HasPackageThumbnailAttachment();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("HasThumbnail", *pHasThumbnail);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_createpackagethumbnailattachment (Lib3MF_Model pModel, Lib3MF_Attachment * pAttachment)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "CreatePackageThumbnailAttachment");
		}

		if (pAttachment == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseAttachment(nullptr);

		pBaseAttachment = pIModel->CreatePackageThumbnailAttachment();

		*pAttachment = (IInternalLib3MFBaseClass*)(pBaseAttachment);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Attachment", *pAttachment);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_getpackagethumbnailattachment (Lib3MF_Model pModel, Lib3MF_Attachment * pAttachment)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "GetPackageThumbnailAttachment");
		}

		if (pAttachment == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		IInternalLib3MFBaseClass* pBaseAttachment(nullptr);

		pBaseAttachment = pIModel->GetPackageThumbnailAttachment();

		*pAttachment = (IInternalLib3MFBaseClass*)(pBaseAttachment);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Attachment", *pAttachment);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removepackagethumbnailattachment (Lib3MF_Model pModel)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "RemovePackageThumbnailAttachment");
		}


		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);


		pIModel->RemovePackageThumbnailAttachment();


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_addcustomcontenttypeutf8 (Lib3MF_Model pModel, const char * pExtension, const char * pContentType)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "AddCustomContentType");
			pJournalEntry->addStringParameter ("Extension", pExtension);
			pJournalEntry->addStringParameter ("ContentType", pContentType);
		}

		if (pExtension == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (pContentType == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sExtension(pExtension);
		std::string sContentType(pContentType);

		pIModel->AddCustomContentType(sExtension, sContentType);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_model_removecustomcontenttypeutf8 (Lib3MF_Model pModel, const char * pExtension)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginClassMethod(pModel, "Model", "RemoveCustomContentType");
			pJournalEntry->addStringParameter ("Extension", pExtension);
		}

		if (pExtension == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pIBaseClass = (IInternalLib3MFBaseClass *)pModel;
		IInternalLib3MFModel* pIModel = dynamic_cast<IInternalLib3MFModel*>(pIBaseClass);
		if (!pIModel)
			throw ELib3MFInterfaceException(LIB3MF_ERROR_INVALIDCAST);

		std::string sExtension(pExtension);

		pIModel->RemoveCustomContentType(sExtension);


		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}


/*************************************************************************************************************************
 Global functions implementation
**************************************************************************************************************************/
LIB3MF_DECLSPEC Lib3MFResult lib3mf_getlibraryversion (unsigned int * pMajor, unsigned int * pMinor, unsigned int * pMicro)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetLibraryVersion");
		}

		if (!pMajor)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		unsigned int nMajor;
		unsigned int nMinor;
		unsigned int nMicro;

		CInternalLib3MFWrapper::GetLibraryVersion(nMajor, nMinor, nMicro);

		*pMajor = nMajor;
		*pMinor = nMinor;
		*pMicro = nMicro;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addUInt32Result ("Major", *pMajor);
			pJournalEntry->addUInt32Result ("Minor", *pMinor);
			pJournalEntry->addUInt32Result ("Micro", *pMicro);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_getspecificationversion (const char * pSpecificationURL, bool * pIsSupported, unsigned int * pMajor, unsigned int * pMinor, unsigned int * pMicro)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("GetSpecificationVersion");
			pJournalEntry->addStringParameter ("SpecificationURL", pSpecificationURL);
		}

		if (pSpecificationURL == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pIsSupported)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMajor)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMinor)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);
		if (!pMicro)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		std::string sSpecificationURL(pSpecificationURL);
		bool bIsSupported;
		unsigned int nMajor;
		unsigned int nMinor;
		unsigned int nMicro;

		CInternalLib3MFWrapper::GetSpecificationVersion(sSpecificationURL, bIsSupported, nMajor, nMinor, nMicro);

		*pIsSupported = bIsSupported;
		*pMajor = nMajor;
		*pMinor = nMinor;
		*pMicro = nMicro;

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addBooleanResult ("IsSupported", *pIsSupported);
			pJournalEntry->addUInt32Result ("Major", *pMajor);
			pJournalEntry->addUInt32Result ("Minor", *pMinor);
			pJournalEntry->addUInt32Result ("Micro", *pMicro);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_createmodel (Lib3MF_Model * pModel)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("CreateModel");
		}

		if (pModel == nullptr)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		IInternalLib3MFBaseClass* pBaseModel(nullptr);

		pBaseModel = CInternalLib3MFWrapper::CreateModel();

		*pModel = (IInternalLib3MFBaseClass*)(pBaseModel);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->addHandleResult ("Model", *pModel);
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_release (Lib3MF_BaseClass pInstance)
{
	PLib3MFInterfaceJournalEntry pJournalEntry;
	try {
		if (m_GlobalJournal.get() != nullptr)  {
			pJournalEntry = m_GlobalJournal->beginStaticFunction("Release");
			pJournalEntry->addHandleParameter ("Instance", pInstance);
		}


		IInternalLib3MFBaseClass* pIBaseClassInstance = (IInternalLib3MFBaseClass *)pInstance;
		IInternalLib3MFBaseClass* pIInstance = dynamic_cast<IInternalLib3MFBaseClass*>(pIBaseClassInstance);
		if (!pIInstance)
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDCAST);

		CInternalLib3MFWrapper::Release(*pIInstance);

		if (pJournalEntry.get() != nullptr) {
			pJournalEntry->writeSuccess();
		}

		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(E.getErrorCode());
		return E.getErrorCode();
	}
	catch (...) {
		if (pJournalEntry.get() != nullptr)
			pJournalEntry->writeError(LIB3MF_ERROR_GENERICEXCEPTION);
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

LIB3MF_DECLSPEC Lib3MFResult lib3mf_setjournal (const char * pJournalPath)
{
	try {
		if (pJournalPath == nullptr) 
			throw ELib3MFInterfaceException (LIB3MF_ERROR_INVALIDPARAM);

		std::string sJournalPath(pJournalPath);

		m_GlobalJournal = nullptr;
		if (sJournalPath != "") {
			m_GlobalJournal = std::make_shared<CLib3MFInterfaceJournal> (sJournalPath);
		}


		return LIB3MF_SUCCESS;
	}
	catch (ELib3MFInterfaceException & E) {
		return E.getErrorCode();
	}
	catch (...) {
		return LIB3MF_ERROR_GENERICEXCEPTION;
	}
}

}

