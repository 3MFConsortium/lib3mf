/*++

Copyright (C) 2019 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated Java file in order to allow an easy
 use of the 3MF Library

Interface version: 2.0.0

*/

package com.aibuild.lib3mf4j;

import com.sun.jna.Library;
import com.sun.jna.Memory;
import com.sun.jna.Native;
import com.sun.jna.Pointer;
import java.lang.ref.Cleaner;


import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

public class BuildItemIterator extends Base {

	public BuildItemIterator(Lib3MFWrapper wrapper, Pointer handle) {
		super(wrapper, handle);
	}

	/**
	 * Iterates to the next build item in the list.
	 *
	 * @return Iterates to the next build item in the list.
	 * @throws Lib3MFException
	 */
	public boolean moveNext() throws Lib3MFException {
		Pointer bufferHasNext = new Memory(1);
		mWrapper.checkError(this, mWrapper.lib3mf_builditemiterator_movenext.invokeInt(new java.lang.Object[]{mHandle, bufferHasNext}));
		return bufferHasNext.getByte(0) != 0;
	}

	/**
	 * Iterates to the previous build item in the list.
	 *
	 * @return Iterates to the previous build item in the list.
	 * @throws Lib3MFException
	 */
	public boolean movePrevious() throws Lib3MFException {
		Pointer bufferHasPrevious = new Memory(1);
		mWrapper.checkError(this, mWrapper.lib3mf_builditemiterator_moveprevious.invokeInt(new java.lang.Object[]{mHandle, bufferHasPrevious}));
		return bufferHasPrevious.getByte(0) != 0;
	}

	/**
	 * Returns the build item the iterator points at.
	 *
	 * @return returns the build item instance.
	 * @throws Lib3MFException
	 */
	public BuildItem getCurrent() throws Lib3MFException {
		Pointer bufferBuildItem = new Memory(8);
		mWrapper.checkError(this, mWrapper.lib3mf_builditemiterator_getcurrent.invokeInt(new java.lang.Object[]{mHandle, bufferBuildItem}));
		Pointer valueBuildItem = bufferBuildItem.getPointer(0);
		BuildItem buildItem = null;
		if (valueBuildItem == Pointer.NULL) {
		  throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "BuildItem was a null pointer");
		}
		buildItem = new BuildItem(mWrapper, valueBuildItem);
		return buildItem;
	}

	/**
	 * Creates a new build item iterator with the same build item list.
	 *
	 * @return returns the cloned Iterator instance
	 * @throws Lib3MFException
	 */
	public BuildItemIterator clone_() throws Lib3MFException {
		Pointer bufferOutBuildItemIterator = new Memory(8);
		mWrapper.checkError(this, mWrapper.lib3mf_builditemiterator_clone.invokeInt(new java.lang.Object[]{mHandle, bufferOutBuildItemIterator}));
		Pointer valueOutBuildItemIterator = bufferOutBuildItemIterator.getPointer(0);
		BuildItemIterator outBuildItemIterator = null;
		if (valueOutBuildItemIterator == Pointer.NULL) {
		  throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "OutBuildItemIterator was a null pointer");
		}
		outBuildItemIterator = new BuildItemIterator(mWrapper, valueOutBuildItemIterator);
		return outBuildItemIterator;
	}

	/**
	 * Returns the number of build items the iterator captures.
	 *
	 * @return returns the number of build items the iterator captures.
	 * @throws Lib3MFException
	 */
	public long count() throws Lib3MFException {
		Pointer bufferCount = new Memory(8);
		mWrapper.checkError(this, mWrapper.lib3mf_builditemiterator_count.invokeInt(new java.lang.Object[]{mHandle, bufferCount}));
		return bufferCount.getLong(0);
	}


}

