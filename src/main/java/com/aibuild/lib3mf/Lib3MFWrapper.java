/*++

Copyright (C) 2019 3MF Consortium (Original Author)

All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This file has been generated by the Automatic Component Toolkit (ACT) version 1.7.0-develop.

Abstract: This is an autogenerated Java file in order to allow an easy
 use of the 3MF Library

Interface version: 2.0.0

*/

package com.aibuild.lib3mf4j;

import com.sun.jna.*;

import java.nio.charset.StandardCharsets;


public class Lib3MFWrapper {

	public static final int PROPERTYTYPE_NOPROPERTYTYPE = 0;
	public static final int PROPERTYTYPE_BASEMATERIAL = 1;
	public static final int PROPERTYTYPE_TEXCOORD = 2;
	public static final int PROPERTYTYPE_COLORS = 3;
	public static final int PROPERTYTYPE_COMPOSITE = 4;
	public static final int PROPERTYTYPE_MULTI = 5;

	public enum PropertyType {
		eNoPropertyType,
		eBaseMaterial,
		eTexCoord,
		eColors,
		eComposite,
		eMulti
	}

	public static final int SLICESMESHRESOLUTION_FULLRES = 0;
	public static final int SLICESMESHRESOLUTION_LOWRES = 1;

	public enum SlicesMeshResolution {
		eFullres,
		eLowres
	}

	public static final int MODELUNIT_MICROMETER = 0;
	public static final int MODELUNIT_MILLIMETER = 1;
	public static final int MODELUNIT_CENTIMETER = 2;
	public static final int MODELUNIT_INCH = 3;
	public static final int MODELUNIT_FOOT = 4;
	public static final int MODELUNIT_METER = 5;

	public enum ModelUnit {
		eMicroMeter,
		eMilliMeter,
		eCentiMeter,
		eInch,
		eFoot,
		eMeter
	}

	public static final int OBJECTTYPE_OTHER = 0;
	public static final int OBJECTTYPE_MODEL = 1;
	public static final int OBJECTTYPE_SUPPORT = 2;
	public static final int OBJECTTYPE_SOLIDSUPPORT = 3;

	public enum ObjectType {
		eOther,
		eModel,
		eSupport,
		eSolidSupport
	}

	public static final int TEXTURETYPE_UNKNOWN = 0;
	public static final int TEXTURETYPE_PNG = 1;
	public static final int TEXTURETYPE_JPEG = 2;

	public enum TextureType {
		eUnknown,
		ePNG,
		eJPEG
	}

	public static final int TEXTURETILESTYLE_WRAP = 0;
	public static final int TEXTURETILESTYLE_MIRROR = 1;
	public static final int TEXTURETILESTYLE_CLAMP = 2;
	public static final int TEXTURETILESTYLE_NOTILESTYLE = 3;

	public enum TextureTileStyle {
		eWrap,
		eMirror,
		eClamp,
		eNoTileStyle
	}

	public static final int TEXTUREFILTER_AUTO = 0;
	public static final int TEXTUREFILTER_LINEAR = 1;
	public static final int TEXTUREFILTER_NEAREST = 2;

	public enum TextureFilter {
		eAuto,
		eLinear,
		eNearest
	}

	public static final int BEAMLATTICECAPMODE_SPHERE = 0;
	public static final int BEAMLATTICECAPMODE_HEMISPHERE = 1;
	public static final int BEAMLATTICECAPMODE_BUTT = 2;

	public enum BeamLatticeCapMode {
		eSphere,
		eHemiSphere,
		eButt
	}

	public static final int BEAMLATTICECLIPMODE_NOCLIPMODE = 0;
	public static final int BEAMLATTICECLIPMODE_INSIDE = 1;
	public static final int BEAMLATTICECLIPMODE_OUTSIDE = 2;

	public enum BeamLatticeClipMode {
		eNoClipMode,
		eInside,
		eOutside
	}

	public static final int PROGRESSIDENTIFIER_QUERYCANCELED = 0;
	public static final int PROGRESSIDENTIFIER_DONE = 1;
	public static final int PROGRESSIDENTIFIER_CLEANUP = 2;
	public static final int PROGRESSIDENTIFIER_READSTREAM = 3;
	public static final int PROGRESSIDENTIFIER_EXTRACTOPCPACKAGE = 4;
	public static final int PROGRESSIDENTIFIER_READNONROOTMODELS = 5;
	public static final int PROGRESSIDENTIFIER_READROOTMODEL = 6;
	public static final int PROGRESSIDENTIFIER_READRESOURCES = 7;
	public static final int PROGRESSIDENTIFIER_READMESH = 8;
	public static final int PROGRESSIDENTIFIER_READSLICES = 9;
	public static final int PROGRESSIDENTIFIER_READBUILD = 10;
	public static final int PROGRESSIDENTIFIER_READCUSTOMATTACHMENT = 11;
	public static final int PROGRESSIDENTIFIER_READTEXTURETACHMENTS = 12;
	public static final int PROGRESSIDENTIFIER_CREATEOPCPACKAGE = 13;
	public static final int PROGRESSIDENTIFIER_WRITEMODELSTOSTREAM = 14;
	public static final int PROGRESSIDENTIFIER_WRITEROOTMODEL = 15;
	public static final int PROGRESSIDENTIFIER_WRITENONROOTMODELS = 16;
	public static final int PROGRESSIDENTIFIER_WRITEATTACHMENTS = 17;
	public static final int PROGRESSIDENTIFIER_WRITECONTENTTYPES = 18;
	public static final int PROGRESSIDENTIFIER_WRITENOBJECTS = 19;
	public static final int PROGRESSIDENTIFIER_WRITENODES = 20;
	public static final int PROGRESSIDENTIFIER_WRITETRIANGLES = 21;
	public static final int PROGRESSIDENTIFIER_WRITESLICES = 22;

	public enum ProgressIdentifier {
		eQUERYCANCELED,
		eDONE,
		eCLEANUP,
		eREADSTREAM,
		eEXTRACTOPCPACKAGE,
		eREADNONROOTMODELS,
		eREADROOTMODEL,
		eREADRESOURCES,
		eREADMESH,
		eREADSLICES,
		eREADBUILD,
		eREADCUSTOMATTACHMENT,
		eREADTEXTURETACHMENTS,
		eCREATEOPCPACKAGE,
		eWRITEMODELSTOSTREAM,
		eWRITEROOTMODEL,
		eWRITENONROOTMODELS,
		eWRITEATTACHMENTS,
		eWRITECONTENTTYPES,
		eWRITENOBJECTS,
		eWRITENODES,
		eWRITETRIANGLES,
		eWRITESLICES
	}

	public static final int BLENDMETHOD_NOBLENDMETHOD = 0;
	public static final int BLENDMETHOD_MIX = 1;
	public static final int BLENDMETHOD_MULTIPLY = 2;

	public enum BlendMethod {
		eNoBlendMethod,
		eMix,
		eMultiply
	}

	public static class EnumConversion {
		public static int convertPropertyTypeToConst (PropertyType value) throws Lib3MFException {
			switch (value) {
				case eNoPropertyType: return PROPERTYTYPE_NOPROPERTYTYPE;
				case eBaseMaterial: return PROPERTYTYPE_BASEMATERIAL;
				case eTexCoord: return PROPERTYTYPE_TEXCOORD;
				case eColors: return PROPERTYTYPE_COLORS;
				case eComposite: return PROPERTYTYPE_COMPOSITE;
				case eMulti: return PROPERTYTYPE_MULTI;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static PropertyType convertConstToPropertyType (int value) throws Lib3MFException {
			switch (value) {
				case PROPERTYTYPE_NOPROPERTYTYPE: return PropertyType.eNoPropertyType;
				case PROPERTYTYPE_BASEMATERIAL: return PropertyType.eBaseMaterial;
				case PROPERTYTYPE_TEXCOORD: return PropertyType.eTexCoord;
				case PROPERTYTYPE_COLORS: return PropertyType.eColors;
				case PROPERTYTYPE_COMPOSITE: return PropertyType.eComposite;
				case PROPERTYTYPE_MULTI: return PropertyType.eMulti;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertSlicesMeshResolutionToConst (SlicesMeshResolution value) throws Lib3MFException {
			switch (value) {
				case eFullres: return SLICESMESHRESOLUTION_FULLRES;
				case eLowres: return SLICESMESHRESOLUTION_LOWRES;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static SlicesMeshResolution convertConstToSlicesMeshResolution (int value) throws Lib3MFException {
			switch (value) {
				case SLICESMESHRESOLUTION_FULLRES: return SlicesMeshResolution.eFullres;
				case SLICESMESHRESOLUTION_LOWRES: return SlicesMeshResolution.eLowres;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertModelUnitToConst (ModelUnit value) throws Lib3MFException {
			switch (value) {
				case eMicroMeter: return MODELUNIT_MICROMETER;
				case eMilliMeter: return MODELUNIT_MILLIMETER;
				case eCentiMeter: return MODELUNIT_CENTIMETER;
				case eInch: return MODELUNIT_INCH;
				case eFoot: return MODELUNIT_FOOT;
				case eMeter: return MODELUNIT_METER;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static ModelUnit convertConstToModelUnit (int value) throws Lib3MFException {
			switch (value) {
				case MODELUNIT_MICROMETER: return ModelUnit.eMicroMeter;
				case MODELUNIT_MILLIMETER: return ModelUnit.eMilliMeter;
				case MODELUNIT_CENTIMETER: return ModelUnit.eCentiMeter;
				case MODELUNIT_INCH: return ModelUnit.eInch;
				case MODELUNIT_FOOT: return ModelUnit.eFoot;
				case MODELUNIT_METER: return ModelUnit.eMeter;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertObjectTypeToConst (ObjectType value) throws Lib3MFException {
			switch (value) {
				case eOther: return OBJECTTYPE_OTHER;
				case eModel: return OBJECTTYPE_MODEL;
				case eSupport: return OBJECTTYPE_SUPPORT;
				case eSolidSupport: return OBJECTTYPE_SOLIDSUPPORT;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static ObjectType convertConstToObjectType (int value) throws Lib3MFException {
			switch (value) {
				case OBJECTTYPE_OTHER: return ObjectType.eOther;
				case OBJECTTYPE_MODEL: return ObjectType.eModel;
				case OBJECTTYPE_SUPPORT: return ObjectType.eSupport;
				case OBJECTTYPE_SOLIDSUPPORT: return ObjectType.eSolidSupport;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertTextureTypeToConst (TextureType value) throws Lib3MFException {
			switch (value) {
				case eUnknown: return TEXTURETYPE_UNKNOWN;
				case ePNG: return TEXTURETYPE_PNG;
				case eJPEG: return TEXTURETYPE_JPEG;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static TextureType convertConstToTextureType (int value) throws Lib3MFException {
			switch (value) {
				case TEXTURETYPE_UNKNOWN: return TextureType.eUnknown;
				case TEXTURETYPE_PNG: return TextureType.ePNG;
				case TEXTURETYPE_JPEG: return TextureType.eJPEG;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertTextureTileStyleToConst (TextureTileStyle value) throws Lib3MFException {
			switch (value) {
				case eWrap: return TEXTURETILESTYLE_WRAP;
				case eMirror: return TEXTURETILESTYLE_MIRROR;
				case eClamp: return TEXTURETILESTYLE_CLAMP;
				case eNoTileStyle: return TEXTURETILESTYLE_NOTILESTYLE;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static TextureTileStyle convertConstToTextureTileStyle (int value) throws Lib3MFException {
			switch (value) {
				case TEXTURETILESTYLE_WRAP: return TextureTileStyle.eWrap;
				case TEXTURETILESTYLE_MIRROR: return TextureTileStyle.eMirror;
				case TEXTURETILESTYLE_CLAMP: return TextureTileStyle.eClamp;
				case TEXTURETILESTYLE_NOTILESTYLE: return TextureTileStyle.eNoTileStyle;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertTextureFilterToConst (TextureFilter value) throws Lib3MFException {
			switch (value) {
				case eAuto: return TEXTUREFILTER_AUTO;
				case eLinear: return TEXTUREFILTER_LINEAR;
				case eNearest: return TEXTUREFILTER_NEAREST;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static TextureFilter convertConstToTextureFilter (int value) throws Lib3MFException {
			switch (value) {
				case TEXTUREFILTER_AUTO: return TextureFilter.eAuto;
				case TEXTUREFILTER_LINEAR: return TextureFilter.eLinear;
				case TEXTUREFILTER_NEAREST: return TextureFilter.eNearest;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertBeamLatticeCapModeToConst (BeamLatticeCapMode value) throws Lib3MFException {
			switch (value) {
				case eSphere: return BEAMLATTICECAPMODE_SPHERE;
				case eHemiSphere: return BEAMLATTICECAPMODE_HEMISPHERE;
				case eButt: return BEAMLATTICECAPMODE_BUTT;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static BeamLatticeCapMode convertConstToBeamLatticeCapMode (int value) throws Lib3MFException {
			switch (value) {
				case BEAMLATTICECAPMODE_SPHERE: return BeamLatticeCapMode.eSphere;
				case BEAMLATTICECAPMODE_HEMISPHERE: return BeamLatticeCapMode.eHemiSphere;
				case BEAMLATTICECAPMODE_BUTT: return BeamLatticeCapMode.eButt;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertBeamLatticeClipModeToConst (BeamLatticeClipMode value) throws Lib3MFException {
			switch (value) {
				case eNoClipMode: return BEAMLATTICECLIPMODE_NOCLIPMODE;
				case eInside: return BEAMLATTICECLIPMODE_INSIDE;
				case eOutside: return BEAMLATTICECLIPMODE_OUTSIDE;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static BeamLatticeClipMode convertConstToBeamLatticeClipMode (int value) throws Lib3MFException {
			switch (value) {
				case BEAMLATTICECLIPMODE_NOCLIPMODE: return BeamLatticeClipMode.eNoClipMode;
				case BEAMLATTICECLIPMODE_INSIDE: return BeamLatticeClipMode.eInside;
				case BEAMLATTICECLIPMODE_OUTSIDE: return BeamLatticeClipMode.eOutside;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertProgressIdentifierToConst (ProgressIdentifier value) throws Lib3MFException {
			switch (value) {
				case eQUERYCANCELED: return PROGRESSIDENTIFIER_QUERYCANCELED;
				case eDONE: return PROGRESSIDENTIFIER_DONE;
				case eCLEANUP: return PROGRESSIDENTIFIER_CLEANUP;
				case eREADSTREAM: return PROGRESSIDENTIFIER_READSTREAM;
				case eEXTRACTOPCPACKAGE: return PROGRESSIDENTIFIER_EXTRACTOPCPACKAGE;
				case eREADNONROOTMODELS: return PROGRESSIDENTIFIER_READNONROOTMODELS;
				case eREADROOTMODEL: return PROGRESSIDENTIFIER_READROOTMODEL;
				case eREADRESOURCES: return PROGRESSIDENTIFIER_READRESOURCES;
				case eREADMESH: return PROGRESSIDENTIFIER_READMESH;
				case eREADSLICES: return PROGRESSIDENTIFIER_READSLICES;
				case eREADBUILD: return PROGRESSIDENTIFIER_READBUILD;
				case eREADCUSTOMATTACHMENT: return PROGRESSIDENTIFIER_READCUSTOMATTACHMENT;
				case eREADTEXTURETACHMENTS: return PROGRESSIDENTIFIER_READTEXTURETACHMENTS;
				case eCREATEOPCPACKAGE: return PROGRESSIDENTIFIER_CREATEOPCPACKAGE;
				case eWRITEMODELSTOSTREAM: return PROGRESSIDENTIFIER_WRITEMODELSTOSTREAM;
				case eWRITEROOTMODEL: return PROGRESSIDENTIFIER_WRITEROOTMODEL;
				case eWRITENONROOTMODELS: return PROGRESSIDENTIFIER_WRITENONROOTMODELS;
				case eWRITEATTACHMENTS: return PROGRESSIDENTIFIER_WRITEATTACHMENTS;
				case eWRITECONTENTTYPES: return PROGRESSIDENTIFIER_WRITECONTENTTYPES;
				case eWRITENOBJECTS: return PROGRESSIDENTIFIER_WRITENOBJECTS;
				case eWRITENODES: return PROGRESSIDENTIFIER_WRITENODES;
				case eWRITETRIANGLES: return PROGRESSIDENTIFIER_WRITETRIANGLES;
				case eWRITESLICES: return PROGRESSIDENTIFIER_WRITESLICES;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static ProgressIdentifier convertConstToProgressIdentifier (int value) throws Lib3MFException {
			switch (value) {
				case PROGRESSIDENTIFIER_QUERYCANCELED: return ProgressIdentifier.eQUERYCANCELED;
				case PROGRESSIDENTIFIER_DONE: return ProgressIdentifier.eDONE;
				case PROGRESSIDENTIFIER_CLEANUP: return ProgressIdentifier.eCLEANUP;
				case PROGRESSIDENTIFIER_READSTREAM: return ProgressIdentifier.eREADSTREAM;
				case PROGRESSIDENTIFIER_EXTRACTOPCPACKAGE: return ProgressIdentifier.eEXTRACTOPCPACKAGE;
				case PROGRESSIDENTIFIER_READNONROOTMODELS: return ProgressIdentifier.eREADNONROOTMODELS;
				case PROGRESSIDENTIFIER_READROOTMODEL: return ProgressIdentifier.eREADROOTMODEL;
				case PROGRESSIDENTIFIER_READRESOURCES: return ProgressIdentifier.eREADRESOURCES;
				case PROGRESSIDENTIFIER_READMESH: return ProgressIdentifier.eREADMESH;
				case PROGRESSIDENTIFIER_READSLICES: return ProgressIdentifier.eREADSLICES;
				case PROGRESSIDENTIFIER_READBUILD: return ProgressIdentifier.eREADBUILD;
				case PROGRESSIDENTIFIER_READCUSTOMATTACHMENT: return ProgressIdentifier.eREADCUSTOMATTACHMENT;
				case PROGRESSIDENTIFIER_READTEXTURETACHMENTS: return ProgressIdentifier.eREADTEXTURETACHMENTS;
				case PROGRESSIDENTIFIER_CREATEOPCPACKAGE: return ProgressIdentifier.eCREATEOPCPACKAGE;
				case PROGRESSIDENTIFIER_WRITEMODELSTOSTREAM: return ProgressIdentifier.eWRITEMODELSTOSTREAM;
				case PROGRESSIDENTIFIER_WRITEROOTMODEL: return ProgressIdentifier.eWRITEROOTMODEL;
				case PROGRESSIDENTIFIER_WRITENONROOTMODELS: return ProgressIdentifier.eWRITENONROOTMODELS;
				case PROGRESSIDENTIFIER_WRITEATTACHMENTS: return ProgressIdentifier.eWRITEATTACHMENTS;
				case PROGRESSIDENTIFIER_WRITECONTENTTYPES: return ProgressIdentifier.eWRITECONTENTTYPES;
				case PROGRESSIDENTIFIER_WRITENOBJECTS: return ProgressIdentifier.eWRITENOBJECTS;
				case PROGRESSIDENTIFIER_WRITENODES: return ProgressIdentifier.eWRITENODES;
				case PROGRESSIDENTIFIER_WRITETRIANGLES: return ProgressIdentifier.eWRITETRIANGLES;
				case PROGRESSIDENTIFIER_WRITESLICES: return ProgressIdentifier.eWRITESLICES;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

		public static int convertBlendMethodToConst (BlendMethod value) throws Lib3MFException {
			switch (value) {
				case eNoBlendMethod: return BLENDMETHOD_NOBLENDMETHOD;
				case eMix: return BLENDMETHOD_MIX;
				case eMultiply: return BLENDMETHOD_MULTIPLY;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum value : " + value);
			}
		}

		public static BlendMethod convertConstToBlendMethod (int value) throws Lib3MFException {
			switch (value) {
				case BLENDMETHOD_NOBLENDMETHOD: return BlendMethod.eNoBlendMethod;
				case BLENDMETHOD_MIX: return BlendMethod.eMix;
				case BLENDMETHOD_MULTIPLY: return BlendMethod.eMultiply;
				default: throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Unknown enum const : " + value);
			}
		}

	}

	public interface ProgressCallback extends Callback {

		void progressCallback (Pointer abort, double progressValue, int progressIdentifier, Pointer userData);

	}

	public interface WriteCallback extends Callback {

		void writeCallback (long byteData, long numBytes, Pointer userData);

	}

	public interface ReadCallback extends Callback {

		void readCallback (long byteData, long numBytes, Pointer userData);

	}

	public interface SeekCallback extends Callback {

		void seekCallback (long position, Pointer userData);

	}

	protected Function lib3mf_getlibraryversion;
	protected Function lib3mf_getprereleaseinformation;
	protected Function lib3mf_getbuildinformation;
	protected Function lib3mf_getspecificationversion;
	protected Function lib3mf_createmodel;
	protected Function lib3mf_release;
	protected Function lib3mf_acquire;
	protected Function lib3mf_setjournal;
	protected Function lib3mf_getlasterror;
	protected Function lib3mf_retrieveprogressmessage;
	protected Function lib3mf_rgbatocolor;
	protected Function lib3mf_floatrgbatocolor;
	protected Function lib3mf_colortorgba;
	protected Function lib3mf_colortofloatrgba;
	protected Function lib3mf_getidentitytransform;
	protected Function lib3mf_getuniformscaletransform;
	protected Function lib3mf_getscaletransform;
	protected Function lib3mf_gettranslationtransform;
	protected Function lib3mf_writer_writetofile;
	protected Function lib3mf_writer_getstreamsize;
	protected Function lib3mf_writer_writetobuffer;
	protected Function lib3mf_writer_writetocallback;
	protected Function lib3mf_writer_setprogresscallback;
	protected Function lib3mf_writer_getdecimalprecision;
	protected Function lib3mf_writer_setdecimalprecision;
	protected Function lib3mf_reader_readfromfile;
	protected Function lib3mf_reader_readfrombuffer;
	protected Function lib3mf_reader_readfromcallback;
	protected Function lib3mf_reader_setprogresscallback;
	protected Function lib3mf_reader_addrelationtoread;
	protected Function lib3mf_reader_removerelationtoread;
	protected Function lib3mf_reader_setstrictmodeactive;
	protected Function lib3mf_reader_getstrictmodeactive;
	protected Function lib3mf_reader_getwarning;
	protected Function lib3mf_reader_getwarningcount;
	protected Function lib3mf_resource_getresourceid;
	protected Function lib3mf_resourceiterator_movenext;
	protected Function lib3mf_resourceiterator_moveprevious;
	protected Function lib3mf_resourceiterator_getcurrent;
	protected Function lib3mf_resourceiterator_clone;
	protected Function lib3mf_resourceiterator_count;
	protected Function lib3mf_slicestackiterator_getcurrentslicestack;
	protected Function lib3mf_objectiterator_getcurrentobject;
	protected Function lib3mf_meshobjectiterator_getcurrentmeshobject;
	protected Function lib3mf_componentsobjectiterator_getcurrentcomponentsobject;
	protected Function lib3mf_texture2diterator_getcurrenttexture2d;
	protected Function lib3mf_basematerialgroupiterator_getcurrentbasematerialgroup;
	protected Function lib3mf_colorgroupiterator_getcurrentcolorgroup;
	protected Function lib3mf_texture2dgroupiterator_getcurrenttexture2dgroup;
	protected Function lib3mf_compositematerialsiterator_getcurrentcompositematerials;
	protected Function lib3mf_multipropertygroupiterator_getcurrentmultipropertygroup;
	protected Function lib3mf_metadata_getnamespace;
	protected Function lib3mf_metadata_setnamespace;
	protected Function lib3mf_metadata_getname;
	protected Function lib3mf_metadata_setname;
	protected Function lib3mf_metadata_getkey;
	protected Function lib3mf_metadata_getmustpreserve;
	protected Function lib3mf_metadata_setmustpreserve;
	protected Function lib3mf_metadata_gettype;
	protected Function lib3mf_metadata_settype;
	protected Function lib3mf_metadata_getvalue;
	protected Function lib3mf_metadata_setvalue;
	protected Function lib3mf_metadatagroup_getmetadatacount;
	protected Function lib3mf_metadatagroup_getmetadata;
	protected Function lib3mf_metadatagroup_getmetadatabykey;
	protected Function lib3mf_metadatagroup_removemetadatabyindex;
	protected Function lib3mf_metadatagroup_removemetadata;
	protected Function lib3mf_metadatagroup_addmetadata;
	protected Function lib3mf_object_gettype;
	protected Function lib3mf_object_settype;
	protected Function lib3mf_object_getname;
	protected Function lib3mf_object_setname;
	protected Function lib3mf_object_getpartnumber;
	protected Function lib3mf_object_setpartnumber;
	protected Function lib3mf_object_ismeshobject;
	protected Function lib3mf_object_iscomponentsobject;
	protected Function lib3mf_object_isvalid;
	protected Function lib3mf_object_setattachmentasthumbnail;
	protected Function lib3mf_object_getthumbnailattachment;
	protected Function lib3mf_object_clearthumbnailattachment;
	protected Function lib3mf_object_getoutbox;
	protected Function lib3mf_object_getuuid;
	protected Function lib3mf_object_setuuid;
	protected Function lib3mf_object_getmetadatagroup;
	protected Function lib3mf_object_setslicesmeshresolution;
	protected Function lib3mf_object_getslicesmeshresolution;
	protected Function lib3mf_object_hasslices;
	protected Function lib3mf_object_clearslicestack;
	protected Function lib3mf_object_getslicestack;
	protected Function lib3mf_object_assignslicestack;
	protected Function lib3mf_meshobject_getvertexcount;
	protected Function lib3mf_meshobject_gettrianglecount;
	protected Function lib3mf_meshobject_getvertex;
	protected Function lib3mf_meshobject_setvertex;
	protected Function lib3mf_meshobject_addvertex;
	protected Function lib3mf_meshobject_getvertices;
	protected Function lib3mf_meshobject_gettriangle;
	protected Function lib3mf_meshobject_settriangle;
	protected Function lib3mf_meshobject_addtriangle;
	protected Function lib3mf_meshobject_gettriangleindices;
	protected Function lib3mf_meshobject_setobjectlevelproperty;
	protected Function lib3mf_meshobject_getobjectlevelproperty;
	protected Function lib3mf_meshobject_settriangleproperties;
	protected Function lib3mf_meshobject_gettriangleproperties;
	protected Function lib3mf_meshobject_setalltriangleproperties;
	protected Function lib3mf_meshobject_getalltriangleproperties;
	protected Function lib3mf_meshobject_clearallproperties;
	protected Function lib3mf_meshobject_setgeometry;
	protected Function lib3mf_meshobject_ismanifoldandoriented;
	protected Function lib3mf_meshobject_beamlattice;
	protected Function lib3mf_beamlattice_getminlength;
	protected Function lib3mf_beamlattice_setminlength;
	protected Function lib3mf_beamlattice_getclipping;
	protected Function lib3mf_beamlattice_setclipping;
	protected Function lib3mf_beamlattice_getrepresentation;
	protected Function lib3mf_beamlattice_setrepresentation;
	protected Function lib3mf_beamlattice_getbeamcount;
	protected Function lib3mf_beamlattice_getbeam;
	protected Function lib3mf_beamlattice_addbeam;
	protected Function lib3mf_beamlattice_setbeam;
	protected Function lib3mf_beamlattice_setbeams;
	protected Function lib3mf_beamlattice_getbeams;
	protected Function lib3mf_beamlattice_getbeamsetcount;
	protected Function lib3mf_beamlattice_addbeamset;
	protected Function lib3mf_beamlattice_getbeamset;
	protected Function lib3mf_component_getobjectresource;
	protected Function lib3mf_component_getobjectresourceid;
	protected Function lib3mf_component_getuuid;
	protected Function lib3mf_component_setuuid;
	protected Function lib3mf_component_hastransform;
	protected Function lib3mf_component_gettransform;
	protected Function lib3mf_component_settransform;
	protected Function lib3mf_componentsobject_addcomponent;
	protected Function lib3mf_componentsobject_getcomponent;
	protected Function lib3mf_componentsobject_getcomponentcount;
	protected Function lib3mf_beamset_setname;
	protected Function lib3mf_beamset_getname;
	protected Function lib3mf_beamset_setidentifier;
	protected Function lib3mf_beamset_getidentifier;
	protected Function lib3mf_beamset_getreferencecount;
	protected Function lib3mf_beamset_setreferences;
	protected Function lib3mf_beamset_getreferences;
	protected Function lib3mf_basematerialgroup_getcount;
	protected Function lib3mf_basematerialgroup_getallpropertyids;
	protected Function lib3mf_basematerialgroup_addmaterial;
	protected Function lib3mf_basematerialgroup_removematerial;
	protected Function lib3mf_basematerialgroup_getname;
	protected Function lib3mf_basematerialgroup_setname;
	protected Function lib3mf_basematerialgroup_setdisplaycolor;
	protected Function lib3mf_basematerialgroup_getdisplaycolor;
	protected Function lib3mf_colorgroup_getcount;
	protected Function lib3mf_colorgroup_getallpropertyids;
	protected Function lib3mf_colorgroup_addcolor;
	protected Function lib3mf_colorgroup_removecolor;
	protected Function lib3mf_colorgroup_setcolor;
	protected Function lib3mf_colorgroup_getcolor;
	protected Function lib3mf_texture2dgroup_getcount;
	protected Function lib3mf_texture2dgroup_getallpropertyids;
	protected Function lib3mf_texture2dgroup_addtex2coord;
	protected Function lib3mf_texture2dgroup_gettex2coord;
	protected Function lib3mf_texture2dgroup_removetex2coord;
	protected Function lib3mf_texture2dgroup_gettexture2d;
	protected Function lib3mf_compositematerials_getcount;
	protected Function lib3mf_compositematerials_getallpropertyids;
	protected Function lib3mf_compositematerials_getbasematerialgroup;
	protected Function lib3mf_compositematerials_addcomposite;
	protected Function lib3mf_compositematerials_removecomposite;
	protected Function lib3mf_compositematerials_getcomposite;
	protected Function lib3mf_multipropertygroup_getcount;
	protected Function lib3mf_multipropertygroup_getallpropertyids;
	protected Function lib3mf_multipropertygroup_addmultiproperty;
	protected Function lib3mf_multipropertygroup_setmultiproperty;
	protected Function lib3mf_multipropertygroup_getmultiproperty;
	protected Function lib3mf_multipropertygroup_removemultiproperty;
	protected Function lib3mf_multipropertygroup_getlayercount;
	protected Function lib3mf_multipropertygroup_addlayer;
	protected Function lib3mf_multipropertygroup_getlayer;
	protected Function lib3mf_multipropertygroup_removelayer;
	protected Function lib3mf_attachment_getpath;
	protected Function lib3mf_attachment_setpath;
	protected Function lib3mf_attachment_getrelationshiptype;
	protected Function lib3mf_attachment_setrelationshiptype;
	protected Function lib3mf_attachment_writetofile;
	protected Function lib3mf_attachment_readfromfile;
	protected Function lib3mf_attachment_getstreamsize;
	protected Function lib3mf_attachment_writetobuffer;
	protected Function lib3mf_attachment_readfrombuffer;
	protected Function lib3mf_texture2d_getattachment;
	protected Function lib3mf_texture2d_setattachment;
	protected Function lib3mf_texture2d_getcontenttype;
	protected Function lib3mf_texture2d_setcontenttype;
	protected Function lib3mf_texture2d_gettilestyleuv;
	protected Function lib3mf_texture2d_settilestyleuv;
	protected Function lib3mf_texture2d_getfilter;
	protected Function lib3mf_texture2d_setfilter;
	protected Function lib3mf_builditem_getobjectresource;
	protected Function lib3mf_builditem_getuuid;
	protected Function lib3mf_builditem_setuuid;
	protected Function lib3mf_builditem_getobjectresourceid;
	protected Function lib3mf_builditem_hasobjecttransform;
	protected Function lib3mf_builditem_getobjecttransform;
	protected Function lib3mf_builditem_setobjecttransform;
	protected Function lib3mf_builditem_getpartnumber;
	protected Function lib3mf_builditem_setpartnumber;
	protected Function lib3mf_builditem_getmetadatagroup;
	protected Function lib3mf_builditem_getoutbox;
	protected Function lib3mf_builditemiterator_movenext;
	protected Function lib3mf_builditemiterator_moveprevious;
	protected Function lib3mf_builditemiterator_getcurrent;
	protected Function lib3mf_builditemiterator_clone;
	protected Function lib3mf_builditemiterator_count;
	protected Function lib3mf_slice_setvertices;
	protected Function lib3mf_slice_getvertices;
	protected Function lib3mf_slice_getvertexcount;
	protected Function lib3mf_slice_addpolygon;
	protected Function lib3mf_slice_getpolygoncount;
	protected Function lib3mf_slice_setpolygonindices;
	protected Function lib3mf_slice_getpolygonindices;
	protected Function lib3mf_slice_getpolygonindexcount;
	protected Function lib3mf_slice_getztop;
	protected Function lib3mf_slicestack_getbottomz;
	protected Function lib3mf_slicestack_getslicecount;
	protected Function lib3mf_slicestack_getslice;
	protected Function lib3mf_slicestack_addslice;
	protected Function lib3mf_slicestack_getslicerefcount;
	protected Function lib3mf_slicestack_addslicestackreference;
	protected Function lib3mf_slicestack_getslicestackreference;
	protected Function lib3mf_slicestack_collapseslicereferences;
	protected Function lib3mf_slicestack_setownpath;
	protected Function lib3mf_slicestack_getownpath;
	protected Function lib3mf_model_setunit;
	protected Function lib3mf_model_getunit;
	protected Function lib3mf_model_getlanguage;
	protected Function lib3mf_model_setlanguage;
	protected Function lib3mf_model_querywriter;
	protected Function lib3mf_model_queryreader;
	protected Function lib3mf_model_gettexture2dbyid;
	protected Function lib3mf_model_getpropertytypebyid;
	protected Function lib3mf_model_getbasematerialgroupbyid;
	protected Function lib3mf_model_gettexture2dgroupbyid;
	protected Function lib3mf_model_getcompositematerialsbyid;
	protected Function lib3mf_model_getmultipropertygroupbyid;
	protected Function lib3mf_model_getmeshobjectbyid;
	protected Function lib3mf_model_getcomponentsobjectbyid;
	protected Function lib3mf_model_getcolorgroupbyid;
	protected Function lib3mf_model_getslicestackbyid;
	protected Function lib3mf_model_getbuilduuid;
	protected Function lib3mf_model_setbuilduuid;
	protected Function lib3mf_model_getbuilditems;
	protected Function lib3mf_model_getoutbox;
	protected Function lib3mf_model_getresources;
	protected Function lib3mf_model_getobjects;
	protected Function lib3mf_model_getmeshobjects;
	protected Function lib3mf_model_getcomponentsobjects;
	protected Function lib3mf_model_gettexture2ds;
	protected Function lib3mf_model_getbasematerialgroups;
	protected Function lib3mf_model_getcolorgroups;
	protected Function lib3mf_model_gettexture2dgroups;
	protected Function lib3mf_model_getcompositematerials;
	protected Function lib3mf_model_getmultipropertygroups;
	protected Function lib3mf_model_getslicestacks;
	protected Function lib3mf_model_mergetomodel;
	protected Function lib3mf_model_addmeshobject;
	protected Function lib3mf_model_addcomponentsobject;
	protected Function lib3mf_model_addslicestack;
	protected Function lib3mf_model_addtexture2dfromattachment;
	protected Function lib3mf_model_addbasematerialgroup;
	protected Function lib3mf_model_addcolorgroup;
	protected Function lib3mf_model_addtexture2dgroup;
	protected Function lib3mf_model_addcompositematerials;
	protected Function lib3mf_model_addmultipropertygroup;
	protected Function lib3mf_model_addbuilditem;
	protected Function lib3mf_model_removebuilditem;
	protected Function lib3mf_model_getmetadatagroup;
	protected Function lib3mf_model_addattachment;
	protected Function lib3mf_model_removeattachment;
	protected Function lib3mf_model_getattachment;
	protected Function lib3mf_model_findattachment;
	protected Function lib3mf_model_getattachmentcount;
	protected Function lib3mf_model_haspackagethumbnailattachment;
	protected Function lib3mf_model_createpackagethumbnailattachment;
	protected Function lib3mf_model_getpackagethumbnailattachment;
	protected Function lib3mf_model_removepackagethumbnailattachment;
	protected Function lib3mf_model_addcustomcontenttype;
	protected Function lib3mf_model_removecustomcontenttype;

	protected NativeLibrary mLibrary;

	public Lib3MFWrapper(String libraryPath) {
		mLibrary = NativeLibrary.getInstance(libraryPath);
		lib3mf_getlibraryversion = mLibrary.getFunction("lib3mf_getlibraryversion");
		lib3mf_getprereleaseinformation = mLibrary.getFunction("lib3mf_getprereleaseinformation");
		lib3mf_getbuildinformation = mLibrary.getFunction("lib3mf_getbuildinformation");
		lib3mf_getspecificationversion = mLibrary.getFunction("lib3mf_getspecificationversion");
		lib3mf_createmodel = mLibrary.getFunction("lib3mf_createmodel");
		lib3mf_release = mLibrary.getFunction("lib3mf_release");
		lib3mf_acquire = mLibrary.getFunction("lib3mf_acquire");
		lib3mf_setjournal = mLibrary.getFunction("lib3mf_setjournal");
		lib3mf_getlasterror = mLibrary.getFunction("lib3mf_getlasterror");
		lib3mf_retrieveprogressmessage = mLibrary.getFunction("lib3mf_retrieveprogressmessage");
		lib3mf_rgbatocolor = mLibrary.getFunction("lib3mf_rgbatocolor");
		lib3mf_floatrgbatocolor = mLibrary.getFunction("lib3mf_floatrgbatocolor");
		lib3mf_colortorgba = mLibrary.getFunction("lib3mf_colortorgba");
		lib3mf_colortofloatrgba = mLibrary.getFunction("lib3mf_colortofloatrgba");
		lib3mf_getidentitytransform = mLibrary.getFunction("lib3mf_getidentitytransform");
		lib3mf_getuniformscaletransform = mLibrary.getFunction("lib3mf_getuniformscaletransform");
		lib3mf_getscaletransform = mLibrary.getFunction("lib3mf_getscaletransform");
		lib3mf_gettranslationtransform = mLibrary.getFunction("lib3mf_gettranslationtransform");
		lib3mf_writer_writetofile = mLibrary.getFunction("lib3mf_writer_writetofile");
		lib3mf_writer_getstreamsize = mLibrary.getFunction("lib3mf_writer_getstreamsize");
		lib3mf_writer_writetobuffer = mLibrary.getFunction("lib3mf_writer_writetobuffer");
		lib3mf_writer_writetocallback = mLibrary.getFunction("lib3mf_writer_writetocallback");
		lib3mf_writer_setprogresscallback = mLibrary.getFunction("lib3mf_writer_setprogresscallback");
		lib3mf_writer_getdecimalprecision = mLibrary.getFunction("lib3mf_writer_getdecimalprecision");
		lib3mf_writer_setdecimalprecision = mLibrary.getFunction("lib3mf_writer_setdecimalprecision");
		lib3mf_reader_readfromfile = mLibrary.getFunction("lib3mf_reader_readfromfile");
		lib3mf_reader_readfrombuffer = mLibrary.getFunction("lib3mf_reader_readfrombuffer");
		lib3mf_reader_readfromcallback = mLibrary.getFunction("lib3mf_reader_readfromcallback");
		lib3mf_reader_setprogresscallback = mLibrary.getFunction("lib3mf_reader_setprogresscallback");
		lib3mf_reader_addrelationtoread = mLibrary.getFunction("lib3mf_reader_addrelationtoread");
		lib3mf_reader_removerelationtoread = mLibrary.getFunction("lib3mf_reader_removerelationtoread");
		lib3mf_reader_setstrictmodeactive = mLibrary.getFunction("lib3mf_reader_setstrictmodeactive");
		lib3mf_reader_getstrictmodeactive = mLibrary.getFunction("lib3mf_reader_getstrictmodeactive");
		lib3mf_reader_getwarning = mLibrary.getFunction("lib3mf_reader_getwarning");
		lib3mf_reader_getwarningcount = mLibrary.getFunction("lib3mf_reader_getwarningcount");
		lib3mf_resource_getresourceid = mLibrary.getFunction("lib3mf_resource_getresourceid");
		lib3mf_resourceiterator_movenext = mLibrary.getFunction("lib3mf_resourceiterator_movenext");
		lib3mf_resourceiterator_moveprevious = mLibrary.getFunction("lib3mf_resourceiterator_moveprevious");
		lib3mf_resourceiterator_getcurrent = mLibrary.getFunction("lib3mf_resourceiterator_getcurrent");
		lib3mf_resourceiterator_clone = mLibrary.getFunction("lib3mf_resourceiterator_clone");
		lib3mf_resourceiterator_count = mLibrary.getFunction("lib3mf_resourceiterator_count");
		lib3mf_slicestackiterator_getcurrentslicestack = mLibrary.getFunction("lib3mf_slicestackiterator_getcurrentslicestack");
		lib3mf_objectiterator_getcurrentobject = mLibrary.getFunction("lib3mf_objectiterator_getcurrentobject");
		lib3mf_meshobjectiterator_getcurrentmeshobject = mLibrary.getFunction("lib3mf_meshobjectiterator_getcurrentmeshobject");
		lib3mf_componentsobjectiterator_getcurrentcomponentsobject = mLibrary.getFunction("lib3mf_componentsobjectiterator_getcurrentcomponentsobject");
		lib3mf_texture2diterator_getcurrenttexture2d = mLibrary.getFunction("lib3mf_texture2diterator_getcurrenttexture2d");
		lib3mf_basematerialgroupiterator_getcurrentbasematerialgroup = mLibrary.getFunction("lib3mf_basematerialgroupiterator_getcurrentbasematerialgroup");
		lib3mf_colorgroupiterator_getcurrentcolorgroup = mLibrary.getFunction("lib3mf_colorgroupiterator_getcurrentcolorgroup");
		lib3mf_texture2dgroupiterator_getcurrenttexture2dgroup = mLibrary.getFunction("lib3mf_texture2dgroupiterator_getcurrenttexture2dgroup");
		lib3mf_compositematerialsiterator_getcurrentcompositematerials = mLibrary.getFunction("lib3mf_compositematerialsiterator_getcurrentcompositematerials");
		lib3mf_multipropertygroupiterator_getcurrentmultipropertygroup = mLibrary.getFunction("lib3mf_multipropertygroupiterator_getcurrentmultipropertygroup");
		lib3mf_metadata_getnamespace = mLibrary.getFunction("lib3mf_metadata_getnamespace");
		lib3mf_metadata_setnamespace = mLibrary.getFunction("lib3mf_metadata_setnamespace");
		lib3mf_metadata_getname = mLibrary.getFunction("lib3mf_metadata_getname");
		lib3mf_metadata_setname = mLibrary.getFunction("lib3mf_metadata_setname");
		lib3mf_metadata_getkey = mLibrary.getFunction("lib3mf_metadata_getkey");
		lib3mf_metadata_getmustpreserve = mLibrary.getFunction("lib3mf_metadata_getmustpreserve");
		lib3mf_metadata_setmustpreserve = mLibrary.getFunction("lib3mf_metadata_setmustpreserve");
		lib3mf_metadata_gettype = mLibrary.getFunction("lib3mf_metadata_gettype");
		lib3mf_metadata_settype = mLibrary.getFunction("lib3mf_metadata_settype");
		lib3mf_metadata_getvalue = mLibrary.getFunction("lib3mf_metadata_getvalue");
		lib3mf_metadata_setvalue = mLibrary.getFunction("lib3mf_metadata_setvalue");
		lib3mf_metadatagroup_getmetadatacount = mLibrary.getFunction("lib3mf_metadatagroup_getmetadatacount");
		lib3mf_metadatagroup_getmetadata = mLibrary.getFunction("lib3mf_metadatagroup_getmetadata");
		lib3mf_metadatagroup_getmetadatabykey = mLibrary.getFunction("lib3mf_metadatagroup_getmetadatabykey");
		lib3mf_metadatagroup_removemetadatabyindex = mLibrary.getFunction("lib3mf_metadatagroup_removemetadatabyindex");
		lib3mf_metadatagroup_removemetadata = mLibrary.getFunction("lib3mf_metadatagroup_removemetadata");
		lib3mf_metadatagroup_addmetadata = mLibrary.getFunction("lib3mf_metadatagroup_addmetadata");
		lib3mf_object_gettype = mLibrary.getFunction("lib3mf_object_gettype");
		lib3mf_object_settype = mLibrary.getFunction("lib3mf_object_settype");
		lib3mf_object_getname = mLibrary.getFunction("lib3mf_object_getname");
		lib3mf_object_setname = mLibrary.getFunction("lib3mf_object_setname");
		lib3mf_object_getpartnumber = mLibrary.getFunction("lib3mf_object_getpartnumber");
		lib3mf_object_setpartnumber = mLibrary.getFunction("lib3mf_object_setpartnumber");
		lib3mf_object_ismeshobject = mLibrary.getFunction("lib3mf_object_ismeshobject");
		lib3mf_object_iscomponentsobject = mLibrary.getFunction("lib3mf_object_iscomponentsobject");
		lib3mf_object_isvalid = mLibrary.getFunction("lib3mf_object_isvalid");
		lib3mf_object_setattachmentasthumbnail = mLibrary.getFunction("lib3mf_object_setattachmentasthumbnail");
		lib3mf_object_getthumbnailattachment = mLibrary.getFunction("lib3mf_object_getthumbnailattachment");
		lib3mf_object_clearthumbnailattachment = mLibrary.getFunction("lib3mf_object_clearthumbnailattachment");
		lib3mf_object_getoutbox = mLibrary.getFunction("lib3mf_object_getoutbox");
		lib3mf_object_getuuid = mLibrary.getFunction("lib3mf_object_getuuid");
		lib3mf_object_setuuid = mLibrary.getFunction("lib3mf_object_setuuid");
		lib3mf_object_getmetadatagroup = mLibrary.getFunction("lib3mf_object_getmetadatagroup");
		lib3mf_object_setslicesmeshresolution = mLibrary.getFunction("lib3mf_object_setslicesmeshresolution");
		lib3mf_object_getslicesmeshresolution = mLibrary.getFunction("lib3mf_object_getslicesmeshresolution");
		lib3mf_object_hasslices = mLibrary.getFunction("lib3mf_object_hasslices");
		lib3mf_object_clearslicestack = mLibrary.getFunction("lib3mf_object_clearslicestack");
		lib3mf_object_getslicestack = mLibrary.getFunction("lib3mf_object_getslicestack");
		lib3mf_object_assignslicestack = mLibrary.getFunction("lib3mf_object_assignslicestack");
		lib3mf_meshobject_getvertexcount = mLibrary.getFunction("lib3mf_meshobject_getvertexcount");
		lib3mf_meshobject_gettrianglecount = mLibrary.getFunction("lib3mf_meshobject_gettrianglecount");
		lib3mf_meshobject_getvertex = mLibrary.getFunction("lib3mf_meshobject_getvertex");
		lib3mf_meshobject_setvertex = mLibrary.getFunction("lib3mf_meshobject_setvertex");
		lib3mf_meshobject_addvertex = mLibrary.getFunction("lib3mf_meshobject_addvertex");
		lib3mf_meshobject_getvertices = mLibrary.getFunction("lib3mf_meshobject_getvertices");
		lib3mf_meshobject_gettriangle = mLibrary.getFunction("lib3mf_meshobject_gettriangle");
		lib3mf_meshobject_settriangle = mLibrary.getFunction("lib3mf_meshobject_settriangle");
		lib3mf_meshobject_addtriangle = mLibrary.getFunction("lib3mf_meshobject_addtriangle");
		lib3mf_meshobject_gettriangleindices = mLibrary.getFunction("lib3mf_meshobject_gettriangleindices");
		lib3mf_meshobject_setobjectlevelproperty = mLibrary.getFunction("lib3mf_meshobject_setobjectlevelproperty");
		lib3mf_meshobject_getobjectlevelproperty = mLibrary.getFunction("lib3mf_meshobject_getobjectlevelproperty");
		lib3mf_meshobject_settriangleproperties = mLibrary.getFunction("lib3mf_meshobject_settriangleproperties");
		lib3mf_meshobject_gettriangleproperties = mLibrary.getFunction("lib3mf_meshobject_gettriangleproperties");
		lib3mf_meshobject_setalltriangleproperties = mLibrary.getFunction("lib3mf_meshobject_setalltriangleproperties");
		lib3mf_meshobject_getalltriangleproperties = mLibrary.getFunction("lib3mf_meshobject_getalltriangleproperties");
		lib3mf_meshobject_clearallproperties = mLibrary.getFunction("lib3mf_meshobject_clearallproperties");
		lib3mf_meshobject_setgeometry = mLibrary.getFunction("lib3mf_meshobject_setgeometry");
		lib3mf_meshobject_ismanifoldandoriented = mLibrary.getFunction("lib3mf_meshobject_ismanifoldandoriented");
		lib3mf_meshobject_beamlattice = mLibrary.getFunction("lib3mf_meshobject_beamlattice");
		lib3mf_beamlattice_getminlength = mLibrary.getFunction("lib3mf_beamlattice_getminlength");
		lib3mf_beamlattice_setminlength = mLibrary.getFunction("lib3mf_beamlattice_setminlength");
		lib3mf_beamlattice_getclipping = mLibrary.getFunction("lib3mf_beamlattice_getclipping");
		lib3mf_beamlattice_setclipping = mLibrary.getFunction("lib3mf_beamlattice_setclipping");
		lib3mf_beamlattice_getrepresentation = mLibrary.getFunction("lib3mf_beamlattice_getrepresentation");
		lib3mf_beamlattice_setrepresentation = mLibrary.getFunction("lib3mf_beamlattice_setrepresentation");
		lib3mf_beamlattice_getbeamcount = mLibrary.getFunction("lib3mf_beamlattice_getbeamcount");
		lib3mf_beamlattice_getbeam = mLibrary.getFunction("lib3mf_beamlattice_getbeam");
		lib3mf_beamlattice_addbeam = mLibrary.getFunction("lib3mf_beamlattice_addbeam");
		lib3mf_beamlattice_setbeam = mLibrary.getFunction("lib3mf_beamlattice_setbeam");
		lib3mf_beamlattice_setbeams = mLibrary.getFunction("lib3mf_beamlattice_setbeams");
		lib3mf_beamlattice_getbeams = mLibrary.getFunction("lib3mf_beamlattice_getbeams");
		lib3mf_beamlattice_getbeamsetcount = mLibrary.getFunction("lib3mf_beamlattice_getbeamsetcount");
		lib3mf_beamlattice_addbeamset = mLibrary.getFunction("lib3mf_beamlattice_addbeamset");
		lib3mf_beamlattice_getbeamset = mLibrary.getFunction("lib3mf_beamlattice_getbeamset");
		lib3mf_component_getobjectresource = mLibrary.getFunction("lib3mf_component_getobjectresource");
		lib3mf_component_getobjectresourceid = mLibrary.getFunction("lib3mf_component_getobjectresourceid");
		lib3mf_component_getuuid = mLibrary.getFunction("lib3mf_component_getuuid");
		lib3mf_component_setuuid = mLibrary.getFunction("lib3mf_component_setuuid");
		lib3mf_component_hastransform = mLibrary.getFunction("lib3mf_component_hastransform");
		lib3mf_component_gettransform = mLibrary.getFunction("lib3mf_component_gettransform");
		lib3mf_component_settransform = mLibrary.getFunction("lib3mf_component_settransform");
		lib3mf_componentsobject_addcomponent = mLibrary.getFunction("lib3mf_componentsobject_addcomponent");
		lib3mf_componentsobject_getcomponent = mLibrary.getFunction("lib3mf_componentsobject_getcomponent");
		lib3mf_componentsobject_getcomponentcount = mLibrary.getFunction("lib3mf_componentsobject_getcomponentcount");
		lib3mf_beamset_setname = mLibrary.getFunction("lib3mf_beamset_setname");
		lib3mf_beamset_getname = mLibrary.getFunction("lib3mf_beamset_getname");
		lib3mf_beamset_setidentifier = mLibrary.getFunction("lib3mf_beamset_setidentifier");
		lib3mf_beamset_getidentifier = mLibrary.getFunction("lib3mf_beamset_getidentifier");
		lib3mf_beamset_getreferencecount = mLibrary.getFunction("lib3mf_beamset_getreferencecount");
		lib3mf_beamset_setreferences = mLibrary.getFunction("lib3mf_beamset_setreferences");
		lib3mf_beamset_getreferences = mLibrary.getFunction("lib3mf_beamset_getreferences");
		lib3mf_basematerialgroup_getcount = mLibrary.getFunction("lib3mf_basematerialgroup_getcount");
		lib3mf_basematerialgroup_getallpropertyids = mLibrary.getFunction("lib3mf_basematerialgroup_getallpropertyids");
		lib3mf_basematerialgroup_addmaterial = mLibrary.getFunction("lib3mf_basematerialgroup_addmaterial");
		lib3mf_basematerialgroup_removematerial = mLibrary.getFunction("lib3mf_basematerialgroup_removematerial");
		lib3mf_basematerialgroup_getname = mLibrary.getFunction("lib3mf_basematerialgroup_getname");
		lib3mf_basematerialgroup_setname = mLibrary.getFunction("lib3mf_basematerialgroup_setname");
		lib3mf_basematerialgroup_setdisplaycolor = mLibrary.getFunction("lib3mf_basematerialgroup_setdisplaycolor");
		lib3mf_basematerialgroup_getdisplaycolor = mLibrary.getFunction("lib3mf_basematerialgroup_getdisplaycolor");
		lib3mf_colorgroup_getcount = mLibrary.getFunction("lib3mf_colorgroup_getcount");
		lib3mf_colorgroup_getallpropertyids = mLibrary.getFunction("lib3mf_colorgroup_getallpropertyids");
		lib3mf_colorgroup_addcolor = mLibrary.getFunction("lib3mf_colorgroup_addcolor");
		lib3mf_colorgroup_removecolor = mLibrary.getFunction("lib3mf_colorgroup_removecolor");
		lib3mf_colorgroup_setcolor = mLibrary.getFunction("lib3mf_colorgroup_setcolor");
		lib3mf_colorgroup_getcolor = mLibrary.getFunction("lib3mf_colorgroup_getcolor");
		lib3mf_texture2dgroup_getcount = mLibrary.getFunction("lib3mf_texture2dgroup_getcount");
		lib3mf_texture2dgroup_getallpropertyids = mLibrary.getFunction("lib3mf_texture2dgroup_getallpropertyids");
		lib3mf_texture2dgroup_addtex2coord = mLibrary.getFunction("lib3mf_texture2dgroup_addtex2coord");
		lib3mf_texture2dgroup_gettex2coord = mLibrary.getFunction("lib3mf_texture2dgroup_gettex2coord");
		lib3mf_texture2dgroup_removetex2coord = mLibrary.getFunction("lib3mf_texture2dgroup_removetex2coord");
		lib3mf_texture2dgroup_gettexture2d = mLibrary.getFunction("lib3mf_texture2dgroup_gettexture2d");
		lib3mf_compositematerials_getcount = mLibrary.getFunction("lib3mf_compositematerials_getcount");
		lib3mf_compositematerials_getallpropertyids = mLibrary.getFunction("lib3mf_compositematerials_getallpropertyids");
		lib3mf_compositematerials_getbasematerialgroup = mLibrary.getFunction("lib3mf_compositematerials_getbasematerialgroup");
		lib3mf_compositematerials_addcomposite = mLibrary.getFunction("lib3mf_compositematerials_addcomposite");
		lib3mf_compositematerials_removecomposite = mLibrary.getFunction("lib3mf_compositematerials_removecomposite");
		lib3mf_compositematerials_getcomposite = mLibrary.getFunction("lib3mf_compositematerials_getcomposite");
		lib3mf_multipropertygroup_getcount = mLibrary.getFunction("lib3mf_multipropertygroup_getcount");
		lib3mf_multipropertygroup_getallpropertyids = mLibrary.getFunction("lib3mf_multipropertygroup_getallpropertyids");
		lib3mf_multipropertygroup_addmultiproperty = mLibrary.getFunction("lib3mf_multipropertygroup_addmultiproperty");
		lib3mf_multipropertygroup_setmultiproperty = mLibrary.getFunction("lib3mf_multipropertygroup_setmultiproperty");
		lib3mf_multipropertygroup_getmultiproperty = mLibrary.getFunction("lib3mf_multipropertygroup_getmultiproperty");
		lib3mf_multipropertygroup_removemultiproperty = mLibrary.getFunction("lib3mf_multipropertygroup_removemultiproperty");
		lib3mf_multipropertygroup_getlayercount = mLibrary.getFunction("lib3mf_multipropertygroup_getlayercount");
		lib3mf_multipropertygroup_addlayer = mLibrary.getFunction("lib3mf_multipropertygroup_addlayer");
		lib3mf_multipropertygroup_getlayer = mLibrary.getFunction("lib3mf_multipropertygroup_getlayer");
		lib3mf_multipropertygroup_removelayer = mLibrary.getFunction("lib3mf_multipropertygroup_removelayer");
		lib3mf_attachment_getpath = mLibrary.getFunction("lib3mf_attachment_getpath");
		lib3mf_attachment_setpath = mLibrary.getFunction("lib3mf_attachment_setpath");
		lib3mf_attachment_getrelationshiptype = mLibrary.getFunction("lib3mf_attachment_getrelationshiptype");
		lib3mf_attachment_setrelationshiptype = mLibrary.getFunction("lib3mf_attachment_setrelationshiptype");
		lib3mf_attachment_writetofile = mLibrary.getFunction("lib3mf_attachment_writetofile");
		lib3mf_attachment_readfromfile = mLibrary.getFunction("lib3mf_attachment_readfromfile");
		lib3mf_attachment_getstreamsize = mLibrary.getFunction("lib3mf_attachment_getstreamsize");
		lib3mf_attachment_writetobuffer = mLibrary.getFunction("lib3mf_attachment_writetobuffer");
		lib3mf_attachment_readfrombuffer = mLibrary.getFunction("lib3mf_attachment_readfrombuffer");
		lib3mf_texture2d_getattachment = mLibrary.getFunction("lib3mf_texture2d_getattachment");
		lib3mf_texture2d_setattachment = mLibrary.getFunction("lib3mf_texture2d_setattachment");
		lib3mf_texture2d_getcontenttype = mLibrary.getFunction("lib3mf_texture2d_getcontenttype");
		lib3mf_texture2d_setcontenttype = mLibrary.getFunction("lib3mf_texture2d_setcontenttype");
		lib3mf_texture2d_gettilestyleuv = mLibrary.getFunction("lib3mf_texture2d_gettilestyleuv");
		lib3mf_texture2d_settilestyleuv = mLibrary.getFunction("lib3mf_texture2d_settilestyleuv");
		lib3mf_texture2d_getfilter = mLibrary.getFunction("lib3mf_texture2d_getfilter");
		lib3mf_texture2d_setfilter = mLibrary.getFunction("lib3mf_texture2d_setfilter");
		lib3mf_builditem_getobjectresource = mLibrary.getFunction("lib3mf_builditem_getobjectresource");
		lib3mf_builditem_getuuid = mLibrary.getFunction("lib3mf_builditem_getuuid");
		lib3mf_builditem_setuuid = mLibrary.getFunction("lib3mf_builditem_setuuid");
		lib3mf_builditem_getobjectresourceid = mLibrary.getFunction("lib3mf_builditem_getobjectresourceid");
		lib3mf_builditem_hasobjecttransform = mLibrary.getFunction("lib3mf_builditem_hasobjecttransform");
		lib3mf_builditem_getobjecttransform = mLibrary.getFunction("lib3mf_builditem_getobjecttransform");
		lib3mf_builditem_setobjecttransform = mLibrary.getFunction("lib3mf_builditem_setobjecttransform");
		lib3mf_builditem_getpartnumber = mLibrary.getFunction("lib3mf_builditem_getpartnumber");
		lib3mf_builditem_setpartnumber = mLibrary.getFunction("lib3mf_builditem_setpartnumber");
		lib3mf_builditem_getmetadatagroup = mLibrary.getFunction("lib3mf_builditem_getmetadatagroup");
		lib3mf_builditem_getoutbox = mLibrary.getFunction("lib3mf_builditem_getoutbox");
		lib3mf_builditemiterator_movenext = mLibrary.getFunction("lib3mf_builditemiterator_movenext");
		lib3mf_builditemiterator_moveprevious = mLibrary.getFunction("lib3mf_builditemiterator_moveprevious");
		lib3mf_builditemiterator_getcurrent = mLibrary.getFunction("lib3mf_builditemiterator_getcurrent");
		lib3mf_builditemiterator_clone = mLibrary.getFunction("lib3mf_builditemiterator_clone");
		lib3mf_builditemiterator_count = mLibrary.getFunction("lib3mf_builditemiterator_count");
		lib3mf_slice_setvertices = mLibrary.getFunction("lib3mf_slice_setvertices");
		lib3mf_slice_getvertices = mLibrary.getFunction("lib3mf_slice_getvertices");
		lib3mf_slice_getvertexcount = mLibrary.getFunction("lib3mf_slice_getvertexcount");
		lib3mf_slice_addpolygon = mLibrary.getFunction("lib3mf_slice_addpolygon");
		lib3mf_slice_getpolygoncount = mLibrary.getFunction("lib3mf_slice_getpolygoncount");
		lib3mf_slice_setpolygonindices = mLibrary.getFunction("lib3mf_slice_setpolygonindices");
		lib3mf_slice_getpolygonindices = mLibrary.getFunction("lib3mf_slice_getpolygonindices");
		lib3mf_slice_getpolygonindexcount = mLibrary.getFunction("lib3mf_slice_getpolygonindexcount");
		lib3mf_slice_getztop = mLibrary.getFunction("lib3mf_slice_getztop");
		lib3mf_slicestack_getbottomz = mLibrary.getFunction("lib3mf_slicestack_getbottomz");
		lib3mf_slicestack_getslicecount = mLibrary.getFunction("lib3mf_slicestack_getslicecount");
		lib3mf_slicestack_getslice = mLibrary.getFunction("lib3mf_slicestack_getslice");
		lib3mf_slicestack_addslice = mLibrary.getFunction("lib3mf_slicestack_addslice");
		lib3mf_slicestack_getslicerefcount = mLibrary.getFunction("lib3mf_slicestack_getslicerefcount");
		lib3mf_slicestack_addslicestackreference = mLibrary.getFunction("lib3mf_slicestack_addslicestackreference");
		lib3mf_slicestack_getslicestackreference = mLibrary.getFunction("lib3mf_slicestack_getslicestackreference");
		lib3mf_slicestack_collapseslicereferences = mLibrary.getFunction("lib3mf_slicestack_collapseslicereferences");
		lib3mf_slicestack_setownpath = mLibrary.getFunction("lib3mf_slicestack_setownpath");
		lib3mf_slicestack_getownpath = mLibrary.getFunction("lib3mf_slicestack_getownpath");
		lib3mf_model_setunit = mLibrary.getFunction("lib3mf_model_setunit");
		lib3mf_model_getunit = mLibrary.getFunction("lib3mf_model_getunit");
		lib3mf_model_getlanguage = mLibrary.getFunction("lib3mf_model_getlanguage");
		lib3mf_model_setlanguage = mLibrary.getFunction("lib3mf_model_setlanguage");
		lib3mf_model_querywriter = mLibrary.getFunction("lib3mf_model_querywriter");
		lib3mf_model_queryreader = mLibrary.getFunction("lib3mf_model_queryreader");
		lib3mf_model_gettexture2dbyid = mLibrary.getFunction("lib3mf_model_gettexture2dbyid");
		lib3mf_model_getpropertytypebyid = mLibrary.getFunction("lib3mf_model_getpropertytypebyid");
		lib3mf_model_getbasematerialgroupbyid = mLibrary.getFunction("lib3mf_model_getbasematerialgroupbyid");
		lib3mf_model_gettexture2dgroupbyid = mLibrary.getFunction("lib3mf_model_gettexture2dgroupbyid");
		lib3mf_model_getcompositematerialsbyid = mLibrary.getFunction("lib3mf_model_getcompositematerialsbyid");
		lib3mf_model_getmultipropertygroupbyid = mLibrary.getFunction("lib3mf_model_getmultipropertygroupbyid");
		lib3mf_model_getmeshobjectbyid = mLibrary.getFunction("lib3mf_model_getmeshobjectbyid");
		lib3mf_model_getcomponentsobjectbyid = mLibrary.getFunction("lib3mf_model_getcomponentsobjectbyid");
		lib3mf_model_getcolorgroupbyid = mLibrary.getFunction("lib3mf_model_getcolorgroupbyid");
		lib3mf_model_getslicestackbyid = mLibrary.getFunction("lib3mf_model_getslicestackbyid");
		lib3mf_model_getbuilduuid = mLibrary.getFunction("lib3mf_model_getbuilduuid");
		lib3mf_model_setbuilduuid = mLibrary.getFunction("lib3mf_model_setbuilduuid");
		lib3mf_model_getbuilditems = mLibrary.getFunction("lib3mf_model_getbuilditems");
		lib3mf_model_getoutbox = mLibrary.getFunction("lib3mf_model_getoutbox");
		lib3mf_model_getresources = mLibrary.getFunction("lib3mf_model_getresources");
		lib3mf_model_getobjects = mLibrary.getFunction("lib3mf_model_getobjects");
		lib3mf_model_getmeshobjects = mLibrary.getFunction("lib3mf_model_getmeshobjects");
		lib3mf_model_getcomponentsobjects = mLibrary.getFunction("lib3mf_model_getcomponentsobjects");
		lib3mf_model_gettexture2ds = mLibrary.getFunction("lib3mf_model_gettexture2ds");
		lib3mf_model_getbasematerialgroups = mLibrary.getFunction("lib3mf_model_getbasematerialgroups");
		lib3mf_model_getcolorgroups = mLibrary.getFunction("lib3mf_model_getcolorgroups");
		lib3mf_model_gettexture2dgroups = mLibrary.getFunction("lib3mf_model_gettexture2dgroups");
		lib3mf_model_getcompositematerials = mLibrary.getFunction("lib3mf_model_getcompositematerials");
		lib3mf_model_getmultipropertygroups = mLibrary.getFunction("lib3mf_model_getmultipropertygroups");
		lib3mf_model_getslicestacks = mLibrary.getFunction("lib3mf_model_getslicestacks");
		lib3mf_model_mergetomodel = mLibrary.getFunction("lib3mf_model_mergetomodel");
		lib3mf_model_addmeshobject = mLibrary.getFunction("lib3mf_model_addmeshobject");
		lib3mf_model_addcomponentsobject = mLibrary.getFunction("lib3mf_model_addcomponentsobject");
		lib3mf_model_addslicestack = mLibrary.getFunction("lib3mf_model_addslicestack");
		lib3mf_model_addtexture2dfromattachment = mLibrary.getFunction("lib3mf_model_addtexture2dfromattachment");
		lib3mf_model_addbasematerialgroup = mLibrary.getFunction("lib3mf_model_addbasematerialgroup");
		lib3mf_model_addcolorgroup = mLibrary.getFunction("lib3mf_model_addcolorgroup");
		lib3mf_model_addtexture2dgroup = mLibrary.getFunction("lib3mf_model_addtexture2dgroup");
		lib3mf_model_addcompositematerials = mLibrary.getFunction("lib3mf_model_addcompositematerials");
		lib3mf_model_addmultipropertygroup = mLibrary.getFunction("lib3mf_model_addmultipropertygroup");
		lib3mf_model_addbuilditem = mLibrary.getFunction("lib3mf_model_addbuilditem");
		lib3mf_model_removebuilditem = mLibrary.getFunction("lib3mf_model_removebuilditem");
		lib3mf_model_getmetadatagroup = mLibrary.getFunction("lib3mf_model_getmetadatagroup");
		lib3mf_model_addattachment = mLibrary.getFunction("lib3mf_model_addattachment");
		lib3mf_model_removeattachment = mLibrary.getFunction("lib3mf_model_removeattachment");
		lib3mf_model_getattachment = mLibrary.getFunction("lib3mf_model_getattachment");
		lib3mf_model_findattachment = mLibrary.getFunction("lib3mf_model_findattachment");
		lib3mf_model_getattachmentcount = mLibrary.getFunction("lib3mf_model_getattachmentcount");
		lib3mf_model_haspackagethumbnailattachment = mLibrary.getFunction("lib3mf_model_haspackagethumbnailattachment");
		lib3mf_model_createpackagethumbnailattachment = mLibrary.getFunction("lib3mf_model_createpackagethumbnailattachment");
		lib3mf_model_getpackagethumbnailattachment = mLibrary.getFunction("lib3mf_model_getpackagethumbnailattachment");
		lib3mf_model_removepackagethumbnailattachment = mLibrary.getFunction("lib3mf_model_removepackagethumbnailattachment");
		lib3mf_model_addcustomcontenttype = mLibrary.getFunction("lib3mf_model_addcustomcontenttype");
		lib3mf_model_removecustomcontenttype = mLibrary.getFunction("lib3mf_model_removecustomcontenttype");
	}

	public Lib3MFWrapper(Pointer lookupPointer) throws Lib3MFException {
		Function lookupMethod = Function.getFunction(lookupPointer);
		lib3mf_getlibraryversion = loadFunctionByLookup(lookupMethod, "lib3mf_getlibraryversion");
		lib3mf_getprereleaseinformation = loadFunctionByLookup(lookupMethod, "lib3mf_getprereleaseinformation");
		lib3mf_getbuildinformation = loadFunctionByLookup(lookupMethod, "lib3mf_getbuildinformation");
		lib3mf_getspecificationversion = loadFunctionByLookup(lookupMethod, "lib3mf_getspecificationversion");
		lib3mf_createmodel = loadFunctionByLookup(lookupMethod, "lib3mf_createmodel");
		lib3mf_release = loadFunctionByLookup(lookupMethod, "lib3mf_release");
		lib3mf_acquire = loadFunctionByLookup(lookupMethod, "lib3mf_acquire");
		lib3mf_setjournal = loadFunctionByLookup(lookupMethod, "lib3mf_setjournal");
		lib3mf_getlasterror = loadFunctionByLookup(lookupMethod, "lib3mf_getlasterror");
		lib3mf_retrieveprogressmessage = loadFunctionByLookup(lookupMethod, "lib3mf_retrieveprogressmessage");
		lib3mf_rgbatocolor = loadFunctionByLookup(lookupMethod, "lib3mf_rgbatocolor");
		lib3mf_floatrgbatocolor = loadFunctionByLookup(lookupMethod, "lib3mf_floatrgbatocolor");
		lib3mf_colortorgba = loadFunctionByLookup(lookupMethod, "lib3mf_colortorgba");
		lib3mf_colortofloatrgba = loadFunctionByLookup(lookupMethod, "lib3mf_colortofloatrgba");
		lib3mf_getidentitytransform = loadFunctionByLookup(lookupMethod, "lib3mf_getidentitytransform");
		lib3mf_getuniformscaletransform = loadFunctionByLookup(lookupMethod, "lib3mf_getuniformscaletransform");
		lib3mf_getscaletransform = loadFunctionByLookup(lookupMethod, "lib3mf_getscaletransform");
		lib3mf_gettranslationtransform = loadFunctionByLookup(lookupMethod, "lib3mf_gettranslationtransform");
		lib3mf_writer_writetofile = loadFunctionByLookup(lookupMethod, "lib3mf_writer_writetofile");
		lib3mf_writer_getstreamsize = loadFunctionByLookup(lookupMethod, "lib3mf_writer_getstreamsize");
		lib3mf_writer_writetobuffer = loadFunctionByLookup(lookupMethod, "lib3mf_writer_writetobuffer");
		lib3mf_writer_writetocallback = loadFunctionByLookup(lookupMethod, "lib3mf_writer_writetocallback");
		lib3mf_writer_setprogresscallback = loadFunctionByLookup(lookupMethod, "lib3mf_writer_setprogresscallback");
		lib3mf_writer_getdecimalprecision = loadFunctionByLookup(lookupMethod, "lib3mf_writer_getdecimalprecision");
		lib3mf_writer_setdecimalprecision = loadFunctionByLookup(lookupMethod, "lib3mf_writer_setdecimalprecision");
		lib3mf_reader_readfromfile = loadFunctionByLookup(lookupMethod, "lib3mf_reader_readfromfile");
		lib3mf_reader_readfrombuffer = loadFunctionByLookup(lookupMethod, "lib3mf_reader_readfrombuffer");
		lib3mf_reader_readfromcallback = loadFunctionByLookup(lookupMethod, "lib3mf_reader_readfromcallback");
		lib3mf_reader_setprogresscallback = loadFunctionByLookup(lookupMethod, "lib3mf_reader_setprogresscallback");
		lib3mf_reader_addrelationtoread = loadFunctionByLookup(lookupMethod, "lib3mf_reader_addrelationtoread");
		lib3mf_reader_removerelationtoread = loadFunctionByLookup(lookupMethod, "lib3mf_reader_removerelationtoread");
		lib3mf_reader_setstrictmodeactive = loadFunctionByLookup(lookupMethod, "lib3mf_reader_setstrictmodeactive");
		lib3mf_reader_getstrictmodeactive = loadFunctionByLookup(lookupMethod, "lib3mf_reader_getstrictmodeactive");
		lib3mf_reader_getwarning = loadFunctionByLookup(lookupMethod, "lib3mf_reader_getwarning");
		lib3mf_reader_getwarningcount = loadFunctionByLookup(lookupMethod, "lib3mf_reader_getwarningcount");
		lib3mf_resource_getresourceid = loadFunctionByLookup(lookupMethod, "lib3mf_resource_getresourceid");
		lib3mf_resourceiterator_movenext = loadFunctionByLookup(lookupMethod, "lib3mf_resourceiterator_movenext");
		lib3mf_resourceiterator_moveprevious = loadFunctionByLookup(lookupMethod, "lib3mf_resourceiterator_moveprevious");
		lib3mf_resourceiterator_getcurrent = loadFunctionByLookup(lookupMethod, "lib3mf_resourceiterator_getcurrent");
		lib3mf_resourceiterator_clone = loadFunctionByLookup(lookupMethod, "lib3mf_resourceiterator_clone");
		lib3mf_resourceiterator_count = loadFunctionByLookup(lookupMethod, "lib3mf_resourceiterator_count");
		lib3mf_slicestackiterator_getcurrentslicestack = loadFunctionByLookup(lookupMethod, "lib3mf_slicestackiterator_getcurrentslicestack");
		lib3mf_objectiterator_getcurrentobject = loadFunctionByLookup(lookupMethod, "lib3mf_objectiterator_getcurrentobject");
		lib3mf_meshobjectiterator_getcurrentmeshobject = loadFunctionByLookup(lookupMethod, "lib3mf_meshobjectiterator_getcurrentmeshobject");
		lib3mf_componentsobjectiterator_getcurrentcomponentsobject = loadFunctionByLookup(lookupMethod, "lib3mf_componentsobjectiterator_getcurrentcomponentsobject");
		lib3mf_texture2diterator_getcurrenttexture2d = loadFunctionByLookup(lookupMethod, "lib3mf_texture2diterator_getcurrenttexture2d");
		lib3mf_basematerialgroupiterator_getcurrentbasematerialgroup = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroupiterator_getcurrentbasematerialgroup");
		lib3mf_colorgroupiterator_getcurrentcolorgroup = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroupiterator_getcurrentcolorgroup");
		lib3mf_texture2dgroupiterator_getcurrenttexture2dgroup = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroupiterator_getcurrenttexture2dgroup");
		lib3mf_compositematerialsiterator_getcurrentcompositematerials = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerialsiterator_getcurrentcompositematerials");
		lib3mf_multipropertygroupiterator_getcurrentmultipropertygroup = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroupiterator_getcurrentmultipropertygroup");
		lib3mf_metadata_getnamespace = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_getnamespace");
		lib3mf_metadata_setnamespace = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_setnamespace");
		lib3mf_metadata_getname = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_getname");
		lib3mf_metadata_setname = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_setname");
		lib3mf_metadata_getkey = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_getkey");
		lib3mf_metadata_getmustpreserve = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_getmustpreserve");
		lib3mf_metadata_setmustpreserve = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_setmustpreserve");
		lib3mf_metadata_gettype = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_gettype");
		lib3mf_metadata_settype = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_settype");
		lib3mf_metadata_getvalue = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_getvalue");
		lib3mf_metadata_setvalue = loadFunctionByLookup(lookupMethod, "lib3mf_metadata_setvalue");
		lib3mf_metadatagroup_getmetadatacount = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_getmetadatacount");
		lib3mf_metadatagroup_getmetadata = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_getmetadata");
		lib3mf_metadatagroup_getmetadatabykey = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_getmetadatabykey");
		lib3mf_metadatagroup_removemetadatabyindex = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_removemetadatabyindex");
		lib3mf_metadatagroup_removemetadata = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_removemetadata");
		lib3mf_metadatagroup_addmetadata = loadFunctionByLookup(lookupMethod, "lib3mf_metadatagroup_addmetadata");
		lib3mf_object_gettype = loadFunctionByLookup(lookupMethod, "lib3mf_object_gettype");
		lib3mf_object_settype = loadFunctionByLookup(lookupMethod, "lib3mf_object_settype");
		lib3mf_object_getname = loadFunctionByLookup(lookupMethod, "lib3mf_object_getname");
		lib3mf_object_setname = loadFunctionByLookup(lookupMethod, "lib3mf_object_setname");
		lib3mf_object_getpartnumber = loadFunctionByLookup(lookupMethod, "lib3mf_object_getpartnumber");
		lib3mf_object_setpartnumber = loadFunctionByLookup(lookupMethod, "lib3mf_object_setpartnumber");
		lib3mf_object_ismeshobject = loadFunctionByLookup(lookupMethod, "lib3mf_object_ismeshobject");
		lib3mf_object_iscomponentsobject = loadFunctionByLookup(lookupMethod, "lib3mf_object_iscomponentsobject");
		lib3mf_object_isvalid = loadFunctionByLookup(lookupMethod, "lib3mf_object_isvalid");
		lib3mf_object_setattachmentasthumbnail = loadFunctionByLookup(lookupMethod, "lib3mf_object_setattachmentasthumbnail");
		lib3mf_object_getthumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_object_getthumbnailattachment");
		lib3mf_object_clearthumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_object_clearthumbnailattachment");
		lib3mf_object_getoutbox = loadFunctionByLookup(lookupMethod, "lib3mf_object_getoutbox");
		lib3mf_object_getuuid = loadFunctionByLookup(lookupMethod, "lib3mf_object_getuuid");
		lib3mf_object_setuuid = loadFunctionByLookup(lookupMethod, "lib3mf_object_setuuid");
		lib3mf_object_getmetadatagroup = loadFunctionByLookup(lookupMethod, "lib3mf_object_getmetadatagroup");
		lib3mf_object_setslicesmeshresolution = loadFunctionByLookup(lookupMethod, "lib3mf_object_setslicesmeshresolution");
		lib3mf_object_getslicesmeshresolution = loadFunctionByLookup(lookupMethod, "lib3mf_object_getslicesmeshresolution");
		lib3mf_object_hasslices = loadFunctionByLookup(lookupMethod, "lib3mf_object_hasslices");
		lib3mf_object_clearslicestack = loadFunctionByLookup(lookupMethod, "lib3mf_object_clearslicestack");
		lib3mf_object_getslicestack = loadFunctionByLookup(lookupMethod, "lib3mf_object_getslicestack");
		lib3mf_object_assignslicestack = loadFunctionByLookup(lookupMethod, "lib3mf_object_assignslicestack");
		lib3mf_meshobject_getvertexcount = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_getvertexcount");
		lib3mf_meshobject_gettrianglecount = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_gettrianglecount");
		lib3mf_meshobject_getvertex = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_getvertex");
		lib3mf_meshobject_setvertex = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_setvertex");
		lib3mf_meshobject_addvertex = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_addvertex");
		lib3mf_meshobject_getvertices = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_getvertices");
		lib3mf_meshobject_gettriangle = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_gettriangle");
		lib3mf_meshobject_settriangle = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_settriangle");
		lib3mf_meshobject_addtriangle = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_addtriangle");
		lib3mf_meshobject_gettriangleindices = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_gettriangleindices");
		lib3mf_meshobject_setobjectlevelproperty = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_setobjectlevelproperty");
		lib3mf_meshobject_getobjectlevelproperty = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_getobjectlevelproperty");
		lib3mf_meshobject_settriangleproperties = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_settriangleproperties");
		lib3mf_meshobject_gettriangleproperties = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_gettriangleproperties");
		lib3mf_meshobject_setalltriangleproperties = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_setalltriangleproperties");
		lib3mf_meshobject_getalltriangleproperties = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_getalltriangleproperties");
		lib3mf_meshobject_clearallproperties = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_clearallproperties");
		lib3mf_meshobject_setgeometry = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_setgeometry");
		lib3mf_meshobject_ismanifoldandoriented = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_ismanifoldandoriented");
		lib3mf_meshobject_beamlattice = loadFunctionByLookup(lookupMethod, "lib3mf_meshobject_beamlattice");
		lib3mf_beamlattice_getminlength = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getminlength");
		lib3mf_beamlattice_setminlength = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_setminlength");
		lib3mf_beamlattice_getclipping = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getclipping");
		lib3mf_beamlattice_setclipping = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_setclipping");
		lib3mf_beamlattice_getrepresentation = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getrepresentation");
		lib3mf_beamlattice_setrepresentation = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_setrepresentation");
		lib3mf_beamlattice_getbeamcount = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getbeamcount");
		lib3mf_beamlattice_getbeam = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getbeam");
		lib3mf_beamlattice_addbeam = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_addbeam");
		lib3mf_beamlattice_setbeam = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_setbeam");
		lib3mf_beamlattice_setbeams = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_setbeams");
		lib3mf_beamlattice_getbeams = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getbeams");
		lib3mf_beamlattice_getbeamsetcount = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getbeamsetcount");
		lib3mf_beamlattice_addbeamset = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_addbeamset");
		lib3mf_beamlattice_getbeamset = loadFunctionByLookup(lookupMethod, "lib3mf_beamlattice_getbeamset");
		lib3mf_component_getobjectresource = loadFunctionByLookup(lookupMethod, "lib3mf_component_getobjectresource");
		lib3mf_component_getobjectresourceid = loadFunctionByLookup(lookupMethod, "lib3mf_component_getobjectresourceid");
		lib3mf_component_getuuid = loadFunctionByLookup(lookupMethod, "lib3mf_component_getuuid");
		lib3mf_component_setuuid = loadFunctionByLookup(lookupMethod, "lib3mf_component_setuuid");
		lib3mf_component_hastransform = loadFunctionByLookup(lookupMethod, "lib3mf_component_hastransform");
		lib3mf_component_gettransform = loadFunctionByLookup(lookupMethod, "lib3mf_component_gettransform");
		lib3mf_component_settransform = loadFunctionByLookup(lookupMethod, "lib3mf_component_settransform");
		lib3mf_componentsobject_addcomponent = loadFunctionByLookup(lookupMethod, "lib3mf_componentsobject_addcomponent");
		lib3mf_componentsobject_getcomponent = loadFunctionByLookup(lookupMethod, "lib3mf_componentsobject_getcomponent");
		lib3mf_componentsobject_getcomponentcount = loadFunctionByLookup(lookupMethod, "lib3mf_componentsobject_getcomponentcount");
		lib3mf_beamset_setname = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_setname");
		lib3mf_beamset_getname = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_getname");
		lib3mf_beamset_setidentifier = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_setidentifier");
		lib3mf_beamset_getidentifier = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_getidentifier");
		lib3mf_beamset_getreferencecount = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_getreferencecount");
		lib3mf_beamset_setreferences = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_setreferences");
		lib3mf_beamset_getreferences = loadFunctionByLookup(lookupMethod, "lib3mf_beamset_getreferences");
		lib3mf_basematerialgroup_getcount = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_getcount");
		lib3mf_basematerialgroup_getallpropertyids = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_getallpropertyids");
		lib3mf_basematerialgroup_addmaterial = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_addmaterial");
		lib3mf_basematerialgroup_removematerial = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_removematerial");
		lib3mf_basematerialgroup_getname = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_getname");
		lib3mf_basematerialgroup_setname = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_setname");
		lib3mf_basematerialgroup_setdisplaycolor = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_setdisplaycolor");
		lib3mf_basematerialgroup_getdisplaycolor = loadFunctionByLookup(lookupMethod, "lib3mf_basematerialgroup_getdisplaycolor");
		lib3mf_colorgroup_getcount = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_getcount");
		lib3mf_colorgroup_getallpropertyids = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_getallpropertyids");
		lib3mf_colorgroup_addcolor = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_addcolor");
		lib3mf_colorgroup_removecolor = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_removecolor");
		lib3mf_colorgroup_setcolor = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_setcolor");
		lib3mf_colorgroup_getcolor = loadFunctionByLookup(lookupMethod, "lib3mf_colorgroup_getcolor");
		lib3mf_texture2dgroup_getcount = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_getcount");
		lib3mf_texture2dgroup_getallpropertyids = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_getallpropertyids");
		lib3mf_texture2dgroup_addtex2coord = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_addtex2coord");
		lib3mf_texture2dgroup_gettex2coord = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_gettex2coord");
		lib3mf_texture2dgroup_removetex2coord = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_removetex2coord");
		lib3mf_texture2dgroup_gettexture2d = loadFunctionByLookup(lookupMethod, "lib3mf_texture2dgroup_gettexture2d");
		lib3mf_compositematerials_getcount = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_getcount");
		lib3mf_compositematerials_getallpropertyids = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_getallpropertyids");
		lib3mf_compositematerials_getbasematerialgroup = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_getbasematerialgroup");
		lib3mf_compositematerials_addcomposite = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_addcomposite");
		lib3mf_compositematerials_removecomposite = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_removecomposite");
		lib3mf_compositematerials_getcomposite = loadFunctionByLookup(lookupMethod, "lib3mf_compositematerials_getcomposite");
		lib3mf_multipropertygroup_getcount = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_getcount");
		lib3mf_multipropertygroup_getallpropertyids = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_getallpropertyids");
		lib3mf_multipropertygroup_addmultiproperty = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_addmultiproperty");
		lib3mf_multipropertygroup_setmultiproperty = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_setmultiproperty");
		lib3mf_multipropertygroup_getmultiproperty = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_getmultiproperty");
		lib3mf_multipropertygroup_removemultiproperty = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_removemultiproperty");
		lib3mf_multipropertygroup_getlayercount = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_getlayercount");
		lib3mf_multipropertygroup_addlayer = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_addlayer");
		lib3mf_multipropertygroup_getlayer = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_getlayer");
		lib3mf_multipropertygroup_removelayer = loadFunctionByLookup(lookupMethod, "lib3mf_multipropertygroup_removelayer");
		lib3mf_attachment_getpath = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_getpath");
		lib3mf_attachment_setpath = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_setpath");
		lib3mf_attachment_getrelationshiptype = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_getrelationshiptype");
		lib3mf_attachment_setrelationshiptype = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_setrelationshiptype");
		lib3mf_attachment_writetofile = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_writetofile");
		lib3mf_attachment_readfromfile = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_readfromfile");
		lib3mf_attachment_getstreamsize = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_getstreamsize");
		lib3mf_attachment_writetobuffer = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_writetobuffer");
		lib3mf_attachment_readfrombuffer = loadFunctionByLookup(lookupMethod, "lib3mf_attachment_readfrombuffer");
		lib3mf_texture2d_getattachment = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_getattachment");
		lib3mf_texture2d_setattachment = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_setattachment");
		lib3mf_texture2d_getcontenttype = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_getcontenttype");
		lib3mf_texture2d_setcontenttype = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_setcontenttype");
		lib3mf_texture2d_gettilestyleuv = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_gettilestyleuv");
		lib3mf_texture2d_settilestyleuv = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_settilestyleuv");
		lib3mf_texture2d_getfilter = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_getfilter");
		lib3mf_texture2d_setfilter = loadFunctionByLookup(lookupMethod, "lib3mf_texture2d_setfilter");
		lib3mf_builditem_getobjectresource = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getobjectresource");
		lib3mf_builditem_getuuid = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getuuid");
		lib3mf_builditem_setuuid = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_setuuid");
		lib3mf_builditem_getobjectresourceid = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getobjectresourceid");
		lib3mf_builditem_hasobjecttransform = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_hasobjecttransform");
		lib3mf_builditem_getobjecttransform = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getobjecttransform");
		lib3mf_builditem_setobjecttransform = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_setobjecttransform");
		lib3mf_builditem_getpartnumber = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getpartnumber");
		lib3mf_builditem_setpartnumber = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_setpartnumber");
		lib3mf_builditem_getmetadatagroup = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getmetadatagroup");
		lib3mf_builditem_getoutbox = loadFunctionByLookup(lookupMethod, "lib3mf_builditem_getoutbox");
		lib3mf_builditemiterator_movenext = loadFunctionByLookup(lookupMethod, "lib3mf_builditemiterator_movenext");
		lib3mf_builditemiterator_moveprevious = loadFunctionByLookup(lookupMethod, "lib3mf_builditemiterator_moveprevious");
		lib3mf_builditemiterator_getcurrent = loadFunctionByLookup(lookupMethod, "lib3mf_builditemiterator_getcurrent");
		lib3mf_builditemiterator_clone = loadFunctionByLookup(lookupMethod, "lib3mf_builditemiterator_clone");
		lib3mf_builditemiterator_count = loadFunctionByLookup(lookupMethod, "lib3mf_builditemiterator_count");
		lib3mf_slice_setvertices = loadFunctionByLookup(lookupMethod, "lib3mf_slice_setvertices");
		lib3mf_slice_getvertices = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getvertices");
		lib3mf_slice_getvertexcount = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getvertexcount");
		lib3mf_slice_addpolygon = loadFunctionByLookup(lookupMethod, "lib3mf_slice_addpolygon");
		lib3mf_slice_getpolygoncount = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getpolygoncount");
		lib3mf_slice_setpolygonindices = loadFunctionByLookup(lookupMethod, "lib3mf_slice_setpolygonindices");
		lib3mf_slice_getpolygonindices = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getpolygonindices");
		lib3mf_slice_getpolygonindexcount = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getpolygonindexcount");
		lib3mf_slice_getztop = loadFunctionByLookup(lookupMethod, "lib3mf_slice_getztop");
		lib3mf_slicestack_getbottomz = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getbottomz");
		lib3mf_slicestack_getslicecount = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getslicecount");
		lib3mf_slicestack_getslice = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getslice");
		lib3mf_slicestack_addslice = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_addslice");
		lib3mf_slicestack_getslicerefcount = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getslicerefcount");
		lib3mf_slicestack_addslicestackreference = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_addslicestackreference");
		lib3mf_slicestack_getslicestackreference = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getslicestackreference");
		lib3mf_slicestack_collapseslicereferences = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_collapseslicereferences");
		lib3mf_slicestack_setownpath = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_setownpath");
		lib3mf_slicestack_getownpath = loadFunctionByLookup(lookupMethod, "lib3mf_slicestack_getownpath");
		lib3mf_model_setunit = loadFunctionByLookup(lookupMethod, "lib3mf_model_setunit");
		lib3mf_model_getunit = loadFunctionByLookup(lookupMethod, "lib3mf_model_getunit");
		lib3mf_model_getlanguage = loadFunctionByLookup(lookupMethod, "lib3mf_model_getlanguage");
		lib3mf_model_setlanguage = loadFunctionByLookup(lookupMethod, "lib3mf_model_setlanguage");
		lib3mf_model_querywriter = loadFunctionByLookup(lookupMethod, "lib3mf_model_querywriter");
		lib3mf_model_queryreader = loadFunctionByLookup(lookupMethod, "lib3mf_model_queryreader");
		lib3mf_model_gettexture2dbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_gettexture2dbyid");
		lib3mf_model_getpropertytypebyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getpropertytypebyid");
		lib3mf_model_getbasematerialgroupbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getbasematerialgroupbyid");
		lib3mf_model_gettexture2dgroupbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_gettexture2dgroupbyid");
		lib3mf_model_getcompositematerialsbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcompositematerialsbyid");
		lib3mf_model_getmultipropertygroupbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getmultipropertygroupbyid");
		lib3mf_model_getmeshobjectbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getmeshobjectbyid");
		lib3mf_model_getcomponentsobjectbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcomponentsobjectbyid");
		lib3mf_model_getcolorgroupbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcolorgroupbyid");
		lib3mf_model_getslicestackbyid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getslicestackbyid");
		lib3mf_model_getbuilduuid = loadFunctionByLookup(lookupMethod, "lib3mf_model_getbuilduuid");
		lib3mf_model_setbuilduuid = loadFunctionByLookup(lookupMethod, "lib3mf_model_setbuilduuid");
		lib3mf_model_getbuilditems = loadFunctionByLookup(lookupMethod, "lib3mf_model_getbuilditems");
		lib3mf_model_getoutbox = loadFunctionByLookup(lookupMethod, "lib3mf_model_getoutbox");
		lib3mf_model_getresources = loadFunctionByLookup(lookupMethod, "lib3mf_model_getresources");
		lib3mf_model_getobjects = loadFunctionByLookup(lookupMethod, "lib3mf_model_getobjects");
		lib3mf_model_getmeshobjects = loadFunctionByLookup(lookupMethod, "lib3mf_model_getmeshobjects");
		lib3mf_model_getcomponentsobjects = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcomponentsobjects");
		lib3mf_model_gettexture2ds = loadFunctionByLookup(lookupMethod, "lib3mf_model_gettexture2ds");
		lib3mf_model_getbasematerialgroups = loadFunctionByLookup(lookupMethod, "lib3mf_model_getbasematerialgroups");
		lib3mf_model_getcolorgroups = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcolorgroups");
		lib3mf_model_gettexture2dgroups = loadFunctionByLookup(lookupMethod, "lib3mf_model_gettexture2dgroups");
		lib3mf_model_getcompositematerials = loadFunctionByLookup(lookupMethod, "lib3mf_model_getcompositematerials");
		lib3mf_model_getmultipropertygroups = loadFunctionByLookup(lookupMethod, "lib3mf_model_getmultipropertygroups");
		lib3mf_model_getslicestacks = loadFunctionByLookup(lookupMethod, "lib3mf_model_getslicestacks");
		lib3mf_model_mergetomodel = loadFunctionByLookup(lookupMethod, "lib3mf_model_mergetomodel");
		lib3mf_model_addmeshobject = loadFunctionByLookup(lookupMethod, "lib3mf_model_addmeshobject");
		lib3mf_model_addcomponentsobject = loadFunctionByLookup(lookupMethod, "lib3mf_model_addcomponentsobject");
		lib3mf_model_addslicestack = loadFunctionByLookup(lookupMethod, "lib3mf_model_addslicestack");
		lib3mf_model_addtexture2dfromattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_addtexture2dfromattachment");
		lib3mf_model_addbasematerialgroup = loadFunctionByLookup(lookupMethod, "lib3mf_model_addbasematerialgroup");
		lib3mf_model_addcolorgroup = loadFunctionByLookup(lookupMethod, "lib3mf_model_addcolorgroup");
		lib3mf_model_addtexture2dgroup = loadFunctionByLookup(lookupMethod, "lib3mf_model_addtexture2dgroup");
		lib3mf_model_addcompositematerials = loadFunctionByLookup(lookupMethod, "lib3mf_model_addcompositematerials");
		lib3mf_model_addmultipropertygroup = loadFunctionByLookup(lookupMethod, "lib3mf_model_addmultipropertygroup");
		lib3mf_model_addbuilditem = loadFunctionByLookup(lookupMethod, "lib3mf_model_addbuilditem");
		lib3mf_model_removebuilditem = loadFunctionByLookup(lookupMethod, "lib3mf_model_removebuilditem");
		lib3mf_model_getmetadatagroup = loadFunctionByLookup(lookupMethod, "lib3mf_model_getmetadatagroup");
		lib3mf_model_addattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_addattachment");
		lib3mf_model_removeattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_removeattachment");
		lib3mf_model_getattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_getattachment");
		lib3mf_model_findattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_findattachment");
		lib3mf_model_getattachmentcount = loadFunctionByLookup(lookupMethod, "lib3mf_model_getattachmentcount");
		lib3mf_model_haspackagethumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_haspackagethumbnailattachment");
		lib3mf_model_createpackagethumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_createpackagethumbnailattachment");
		lib3mf_model_getpackagethumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_getpackagethumbnailattachment");
		lib3mf_model_removepackagethumbnailattachment = loadFunctionByLookup(lookupMethod, "lib3mf_model_removepackagethumbnailattachment");
		lib3mf_model_addcustomcontenttype = loadFunctionByLookup(lookupMethod, "lib3mf_model_addcustomcontenttype");
		lib3mf_model_removecustomcontenttype = loadFunctionByLookup(lookupMethod, "lib3mf_model_removecustomcontenttype");
	}

	protected void checkError(Base instance, int errorCode) throws Lib3MFException {
		if (instance != null && instance.mWrapper != this) {
			throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDCAST, "invalid wrapper call");
		}
		if (errorCode != Lib3MFException.LIB3MF_SUCCESS) {
			if (instance != null) {
				GetLastErrorResult result = getLastError(instance);
				throw new Lib3MFException(errorCode, result.LastErrorString);
			} else {
				throw new Lib3MFException(errorCode, "");
			}
		}
	}

	private Function loadFunctionByLookup(Function lookupMethod, String functionName) throws Lib3MFException {
		byte[] bytes = functionName.getBytes(StandardCharsets.UTF_8);
		Memory name = new Memory(bytes.length+1);
		name.write(0, bytes, 0, bytes.length);
		name.setByte(bytes.length, (byte)0);
		Pointer address = new Memory(8);
		java.lang.Object[] addressParam = new java.lang.Object[]{name, address};
		checkError(null, lookupMethod.invokeInt(addressParam));
		return Function.getFunction(address.getPointer(0));
	}

	/**
	 * retrieves the binary version of this library.
	 *
	 * @return GetLibraryVersion Result Tuple
	 * @throws Lib3MFException
	 */
	public GetLibraryVersionResult getLibraryVersion() throws Lib3MFException {
		Pointer bufferMajor = new Memory(4);
		Pointer bufferMinor = new Memory(4);
		Pointer bufferMicro = new Memory(4);
		checkError(null, lib3mf_getlibraryversion.invokeInt(new java.lang.Object[]{bufferMajor, bufferMinor, bufferMicro}));
		GetLibraryVersionResult returnTuple = new GetLibraryVersionResult();
		returnTuple.Major = bufferMajor.getInt(0);
		returnTuple.Minor = bufferMinor.getInt(0);
		returnTuple.Micro = bufferMicro.getInt(0);
		return returnTuple;
	}

	public static class GetLibraryVersionResult {
		/**
		 * returns the major version of this library
		 */
		public int Major;

		/**
		 * returns the minor version of this library
		 */
		public int Minor;

		/**
		 * returns the micro version of this library
		 */
		public int Micro;

	}
	/**
	 * retrieves prerelease information of this library.
	 *
	 * @return GetPrereleaseInformation Result Tuple
	 * @throws Lib3MFException
	 */
	public GetPrereleaseInformationResult getPrereleaseInformation() throws Lib3MFException {
		Pointer bufferHasPrereleaseInfo = new Memory(1);
		Pointer bytesNeededPrereleaseInfo = new Memory(4);
		checkError(null, lib3mf_getprereleaseinformation.invokeInt(new java.lang.Object[]{bufferHasPrereleaseInfo, 0, bytesNeededPrereleaseInfo, null}));
		int sizePrereleaseInfo = bytesNeededPrereleaseInfo.getInt(0);
		Pointer bufferPrereleaseInfo = new Memory(sizePrereleaseInfo);
		checkError(null, lib3mf_getprereleaseinformation.invokeInt(new java.lang.Object[]{bufferHasPrereleaseInfo, sizePrereleaseInfo, bytesNeededPrereleaseInfo, bufferPrereleaseInfo}));
		GetPrereleaseInformationResult returnTuple = new GetPrereleaseInformationResult();
		returnTuple.HasPrereleaseInfo = bufferHasPrereleaseInfo.getByte(0) != 0;
		returnTuple.PrereleaseInfo = new String(bufferPrereleaseInfo.getByteArray(0, sizePrereleaseInfo - 1), StandardCharsets.UTF_8);
		return returnTuple;
	}

	public static class GetPrereleaseInformationResult {
		/**
		 * Does the library provide prerelease version?
		 */
		public boolean HasPrereleaseInfo;

		/**
		 * retrieves prerelease information of this library.
		 */
		public String PrereleaseInfo;

	}
	/**
	 * retrieves build information of this library.
	 *
	 * @return GetBuildInformation Result Tuple
	 * @throws Lib3MFException
	 */
	public GetBuildInformationResult getBuildInformation() throws Lib3MFException {
		Pointer bufferHasBuildInfo = new Memory(1);
		Pointer bytesNeededBuildInformation = new Memory(4);
		checkError(null, lib3mf_getbuildinformation.invokeInt(new java.lang.Object[]{bufferHasBuildInfo, 0, bytesNeededBuildInformation, null}));
		int sizeBuildInformation = bytesNeededBuildInformation.getInt(0);
		Pointer bufferBuildInformation = new Memory(sizeBuildInformation);
		checkError(null, lib3mf_getbuildinformation.invokeInt(new java.lang.Object[]{bufferHasBuildInfo, sizeBuildInformation, bytesNeededBuildInformation, bufferBuildInformation}));
		GetBuildInformationResult returnTuple = new GetBuildInformationResult();
		returnTuple.HasBuildInfo = bufferHasBuildInfo.getByte(0) != 0;
		returnTuple.BuildInformation = new String(bufferBuildInformation.getByteArray(0, sizeBuildInformation - 1), StandardCharsets.UTF_8);
		return returnTuple;
	}

	public static class GetBuildInformationResult {
		/**
		 * Does the library provide build version?
		 */
		public boolean HasBuildInfo;

		/**
		 * retrieves build information of this library.
		 */
		public String BuildInformation;

	}
	/**
	 * retrieves whether a specification is supported, and if so, which version.
	 *
	 * @param specificationURL URL of extension to check
	 * @return GetSpecificationVersion Result Tuple
	 * @throws Lib3MFException
	 */
	public GetSpecificationVersionResult getSpecificationVersion(String specificationURL) throws Lib3MFException {
		byte[] bytesSpecificationURL = specificationURL.getBytes(StandardCharsets.UTF_8);
		Memory bufferSpecificationURL = new Memory(bytesSpecificationURL.length + 1);
		bufferSpecificationURL.write(0, bytesSpecificationURL, 0, bytesSpecificationURL.length);
		bufferSpecificationURL.setByte(bytesSpecificationURL.length, (byte)0);
		Pointer bufferIsSupported = new Memory(1);
		Pointer bufferMajor = new Memory(4);
		Pointer bufferMinor = new Memory(4);
		Pointer bufferMicro = new Memory(4);
		checkError(null, lib3mf_getspecificationversion.invokeInt(new java.lang.Object[]{bufferSpecificationURL, bufferIsSupported, bufferMajor, bufferMinor, bufferMicro}));
		GetSpecificationVersionResult returnTuple = new GetSpecificationVersionResult();
		returnTuple.IsSupported = bufferIsSupported.getByte(0) != 0;
		returnTuple.Major = bufferMajor.getInt(0);
		returnTuple.Minor = bufferMinor.getInt(0);
		returnTuple.Micro = bufferMicro.getInt(0);
		return returnTuple;
	}

	public static class GetSpecificationVersionResult {
		/**
		 * returns whether this specification is supported
		 */
		public boolean IsSupported;

		/**
		 * returns the major version of the extension (if IsSupported)
		 */
		public int Major;

		/**
		 * returns the minor version of the extension (if IsSupported)
		 */
		public int Minor;

		/**
		 * returns the micro version of the extension (if IsSupported)
		 */
		public int Micro;

	}
	/**
	 * creates an empty model instance.
	 *
	 * @return returns an empty model instance
	 * @throws Lib3MFException
	 */
	public Model createModel() throws Lib3MFException {
		Pointer bufferModel = new Memory(8);
		checkError(null, lib3mf_createmodel.invokeInt(new java.lang.Object[]{bufferModel}));
		Pointer valueModel = bufferModel.getPointer(0);
		Model model = null;
		if (valueModel == Pointer.NULL) {
		  throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Model was a null pointer");
		}
		model = new Model(this, valueModel);
		return model;
	}

	/**
	 * releases shared ownership of an object instance
	 *
	 * @param instance the object instance to release
	 * @throws Lib3MFException
	 */
	public void release(Base instance) throws Lib3MFException {
		Pointer instanceHandle = null;
		if (instance != null) {
			instanceHandle = instance.getHandle();
		} else {
			throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Instance is a null value.");
		}
		checkError(null, lib3mf_release.invokeInt(new java.lang.Object[]{instanceHandle}));
	}

	/**
	 * acquires shared ownership of an object instance
	 *
	 * @param instance the object instance to acquire
	 * @throws Lib3MFException
	 */
	public void acquire(Base instance) throws Lib3MFException {
		Pointer instanceHandle = null;
		if (instance != null) {
			instanceHandle = instance.getHandle();
		} else {
			throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Instance is a null value.");
		}
		checkError(null, lib3mf_acquire.invokeInt(new java.lang.Object[]{instanceHandle}));
	}

	/**
	 * Sets the journal file path
	 *
	 * @param journalPath File name of the journal file
	 * @throws Lib3MFException
	 */
	public void setJournal(String journalPath) throws Lib3MFException {
		byte[] bytesJournalPath = journalPath.getBytes(StandardCharsets.UTF_8);
		Memory bufferJournalPath = new Memory(bytesJournalPath.length + 1);
		bufferJournalPath.write(0, bytesJournalPath, 0, bytesJournalPath.length);
		bufferJournalPath.setByte(bytesJournalPath.length, (byte)0);
		checkError(null, lib3mf_setjournal.invokeInt(new java.lang.Object[]{bufferJournalPath}));
	}

	/**
	 * Retrieves the last error string of an instance
	 *
	 * @param instance Object where the error occured.
	 * @return GetLastError Result Tuple
	 * @throws Lib3MFException
	 */
	public GetLastErrorResult getLastError(Base instance) throws Lib3MFException {
		Pointer instanceHandle = null;
		if (instance != null) {
			instanceHandle = instance.getHandle();
		} else {
			throw new Lib3MFException(Lib3MFException.LIB3MF_ERROR_INVALIDPARAM, "Instance is a null value.");
		}
		Pointer bytesNeededLastErrorString = new Memory(4);
		Pointer bufferHasLastError = new Memory(1);
		checkError(null, lib3mf_getlasterror.invokeInt(new java.lang.Object[]{instanceHandle, 0, bytesNeededLastErrorString, null, bufferHasLastError}));
		int sizeLastErrorString = bytesNeededLastErrorString.getInt(0);
		Pointer bufferLastErrorString = new Memory(sizeLastErrorString);
		checkError(null, lib3mf_getlasterror.invokeInt(new java.lang.Object[]{instanceHandle, sizeLastErrorString, bytesNeededLastErrorString, bufferLastErrorString, bufferHasLastError}));
		GetLastErrorResult returnTuple = new GetLastErrorResult();
		returnTuple.LastErrorString = new String(bufferLastErrorString.getByteArray(0, sizeLastErrorString - 1), StandardCharsets.UTF_8);
		returnTuple.HasLastError = bufferHasLastError.getByte(0) != 0;
		return returnTuple;
	}

	public static class GetLastErrorResult {
		/**
		 * Last Error String
		 */
		public String LastErrorString;

		/**
		 * Returns if the instance has a last error.
		 */
		public boolean HasLastError;

	}
	/**
	 * Return an English text for a progress identifier.|Note: this is the only function you can call from your callback function.
	 *
	 * @param theProgressIdentifier the progress identifier that is passed to the callback function
	 * @return English text for the progress identifier
	 * @throws Lib3MFException
	 */
	public String retrieveProgressMessage(Lib3MFWrapper.ProgressIdentifier theProgressIdentifier) throws Lib3MFException {
		Pointer bytesNeededProgressMessage = new Memory(4);
		checkError(null, lib3mf_retrieveprogressmessage.invokeInt(new java.lang.Object[]{Lib3MFWrapper.EnumConversion.convertProgressIdentifierToConst(theProgressIdentifier), 0, bytesNeededProgressMessage, null}));
		int sizeProgressMessage = bytesNeededProgressMessage.getInt(0);
		Pointer bufferProgressMessage = new Memory(sizeProgressMessage);
		checkError(null, lib3mf_retrieveprogressmessage.invokeInt(new java.lang.Object[]{Lib3MFWrapper.EnumConversion.convertProgressIdentifierToConst(theProgressIdentifier), sizeProgressMessage, bytesNeededProgressMessage, bufferProgressMessage}));
		return new String(bufferProgressMessage.getByteArray(0, sizeProgressMessage - 1), StandardCharsets.UTF_8);
	}

	/**
	 * Creates a Color from uint8 RGBA values
	 *
	 * @param red Red value of color (0-255)
	 * @param green Green value of color (0-255)
	 * @param blue Blue value of color (0-255)
	 * @param alpha Alpha value of color (0-255)
	 * @return Assembled color
	 * @throws Lib3MFException
	 */
	public Color rGBAToColor(char red, char green, char blue, char alpha) throws Lib3MFException {
		Pointer bufferTheColor = new Memory(Color.SIZE);
		checkError(null, lib3mf_rgbatocolor.invokeInt(new java.lang.Object[]{red, green, blue, alpha, bufferTheColor}));
		Color theColor = new Color();
		theColor.readFromPointer(bufferTheColor, 0);
		return theColor;
	}

	/**
	 * Creates a Color from uint8 RGBA values
	 *
	 * @param red Red value of color (0-1)
	 * @param green Green value of color (0-1)
	 * @param blue Blue value of color (0-1)
	 * @param alpha Alpha value of color (0-1)
	 * @return Assembled color
	 * @throws Lib3MFException
	 */
	public Color floatRGBAToColor(float red, float green, float blue, float alpha) throws Lib3MFException {
		Pointer bufferTheColor = new Memory(Color.SIZE);
		checkError(null, lib3mf_floatrgbatocolor.invokeInt(new java.lang.Object[]{red, green, blue, alpha, bufferTheColor}));
		Color theColor = new Color();
		theColor.readFromPointer(bufferTheColor, 0);
		return theColor;
	}

	/**
	 * Calculates uint8-RGBA-values from a Color
	 *
	 * @param theColor Color to handle
	 * @return ColorToRGBA Result Tuple
	 * @throws Lib3MFException
	 */
	public ColorToRGBAResult colorToRGBA(Color theColor) throws Lib3MFException {
		Pointer bufferTheColor = new Memory(Color.SIZE);
		theColor.writeToPointer(bufferTheColor, 0);
		Pointer bufferRed = new Memory(1);
		Pointer bufferGreen = new Memory(1);
		Pointer bufferBlue = new Memory(1);
		Pointer bufferAlpha = new Memory(1);
		checkError(null, lib3mf_colortorgba.invokeInt(new java.lang.Object[]{bufferTheColor, bufferRed, bufferGreen, bufferBlue, bufferAlpha}));
		ColorToRGBAResult returnTuple = new ColorToRGBAResult();
		returnTuple.Red = bufferRed.getChar(0);
		returnTuple.Green = bufferGreen.getChar(0);
		returnTuple.Blue = bufferBlue.getChar(0);
		returnTuple.Alpha = bufferAlpha.getChar(0);
		return returnTuple;
	}

	public static class ColorToRGBAResult {
		/**
		 * Red value of color (0-255)
		 */
		public char Red;

		/**
		 * Green value of color (0-255)
		 */
		public char Green;

		/**
		 * Blue value of color (0-255)
		 */
		public char Blue;

		/**
		 * Alpha value of color (0-255)
		 */
		public char Alpha;

	}
	/**
	 * Calculates float-RGBA-values from a Color
	 *
	 * @param theColor Color to handle
	 * @return ColorToFloatRGBA Result Tuple
	 * @throws Lib3MFException
	 */
	public ColorToFloatRGBAResult colorToFloatRGBA(Color theColor) throws Lib3MFException {
		Pointer bufferTheColor = new Memory(Color.SIZE);
		theColor.writeToPointer(bufferTheColor, 0);
		Pointer bufferRed = new Memory(4);
		Pointer bufferGreen = new Memory(4);
		Pointer bufferBlue = new Memory(4);
		Pointer bufferAlpha = new Memory(4);
		checkError(null, lib3mf_colortofloatrgba.invokeInt(new java.lang.Object[]{bufferTheColor, bufferRed, bufferGreen, bufferBlue, bufferAlpha}));
		ColorToFloatRGBAResult returnTuple = new ColorToFloatRGBAResult();
		returnTuple.Red = bufferRed.getFloat(0);
		returnTuple.Green = bufferGreen.getFloat(0);
		returnTuple.Blue = bufferBlue.getFloat(0);
		returnTuple.Alpha = bufferAlpha.getFloat(0);
		return returnTuple;
	}

	public static class ColorToFloatRGBAResult {
		/**
		 * Red value of color (0-1)
		 */
		public float Red;

		/**
		 * Green value of color (0-1)
		 */
		public float Green;

		/**
		 * Blue value of color (0-1)
		 */
		public float Blue;

		/**
		 * Alpha value of color (0-1)
		 */
		public float Alpha;

	}
	/**
	 * Creates an identity transform
	 *
	 * @return Transformation matrix.
	 * @throws Lib3MFException
	 */
	public Transform getIdentityTransform() throws Lib3MFException {
		Pointer bufferTransform = new Memory(Transform.SIZE);
		checkError(null, lib3mf_getidentitytransform.invokeInt(new java.lang.Object[]{bufferTransform}));
		Transform transform = new Transform();
		transform.readFromPointer(bufferTransform, 0);
		return transform;
	}

	/**
	 * Creates a uniform scale transform
	 *
	 * @param factor Factor in X, Y and Z
	 * @return Transformation matrix.
	 * @throws Lib3MFException
	 */
	public Transform getUniformScaleTransform(float factor) throws Lib3MFException {
		Pointer bufferTransform = new Memory(Transform.SIZE);
		checkError(null, lib3mf_getuniformscaletransform.invokeInt(new java.lang.Object[]{factor, bufferTransform}));
		Transform transform = new Transform();
		transform.readFromPointer(bufferTransform, 0);
		return transform;
	}

	/**
	 * Creates a scale transform
	 *
	 * @param factorX Factor in X
	 * @param factorY Factor in Y
	 * @param factorZ Factor in Z
	 * @return Transformation matrix.
	 * @throws Lib3MFException
	 */
	public Transform getScaleTransform(float factorX, float factorY, float factorZ) throws Lib3MFException {
		Pointer bufferTransform = new Memory(Transform.SIZE);
		checkError(null, lib3mf_getscaletransform.invokeInt(new java.lang.Object[]{factorX, factorY, factorZ, bufferTransform}));
		Transform transform = new Transform();
		transform.readFromPointer(bufferTransform, 0);
		return transform;
	}

	/**
	 * Creates an translation transform
	 *
	 * @param vectorX Translation in X
	 * @param vectorY Translation in Y
	 * @param vectorZ Translation in Z
	 * @return Transformation matrix.
	 * @throws Lib3MFException
	 */
	public Transform getTranslationTransform(float vectorX, float vectorY, float vectorZ) throws Lib3MFException {
		Pointer bufferTransform = new Memory(Transform.SIZE);
		checkError(null, lib3mf_gettranslationtransform.invokeInt(new java.lang.Object[]{vectorX, vectorY, vectorZ, bufferTransform}));
		Transform transform = new Transform();
		transform.readFromPointer(bufferTransform, 0);
		return transform;
	}

}

